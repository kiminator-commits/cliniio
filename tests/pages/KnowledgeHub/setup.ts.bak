// Test setup for KnowledgeHub tests
import '@testing-library/jest-dom';
import { vi } from 'vitest';

// Mock environment variables
process.env.VITE_API_BASE_URL = 'http://test-api.example.com';

// Mock fetch globally if not already mocked
if (!global.fetch) {
  global.fetch = vi.fn();
}

// Mock console methods to reduce noise in tests
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;

beforeAll(() => {
  console.error = vi.fn();
  console.warn = vi.fn();
});

afterAll(() => {
  console.error = originalConsoleError;
  console.warn = originalConsoleWarn;
});

// Mock IntersectionObserver
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock ResizeObserver
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(), // deprecated
    removeListener: vi.fn(), // deprecated
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock window.scrollTo
Object.defineProperty(window, 'scrollTo', {
  writable: true,
  value: vi.fn(),
});

// Mock window.URL.createObjectURL
Object.defineProperty(window.URL, 'createObjectURL', {
  writable: true,
  value: vi.fn(() => 'mock-url'),
});

// Mock window.URL.revokeObjectURL
Object.defineProperty(window.URL, 'revokeObjectURL', {
  writable: true,
  value: vi.fn(),
});

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
};
Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
});

// Mock sessionStorage
const sessionStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
};
Object.defineProperty(window, 'sessionStorage', {
  value: sessionStorageMock,
});

// Mock crypto.randomUUID
Object.defineProperty(global, 'crypto', {
  value: {
    randomUUID: vi.fn(() => 'mock-uuid'),
  },
});

// Mock AbortController
global.AbortController = vi.fn().mockImplementation(() => ({
  signal: {
    aborted: false,
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
  },
  abort: vi.fn(),
}));

// Mock setTimeout and clearTimeout for better control in tests

beforeEach(() => {
  vi.useFakeTimers();
});

afterEach(() => {
  vi.runOnlyPendingTimers();
  vi.useRealTimers();
});

// Helper function to advance timers
export const advanceTimersByTime = (ms: number) => {
  vi.advanceTimersByTime(ms);
};

// Helper function to run all pending timers
export const runAllTimers = () => {
  vi.runAllTimers();
};

// Helper function to run only pending timers
export const runOnlyPendingTimers = () => {
  vi.runOnlyPendingTimers();
};

// Mock data factories
export const createMockContentItem = (overrides: Partial<Record<string, unknown>> = {}) => ({
  id: 'mock-id',
  title: 'Mock Content',
  category: 'Courses',
  status: 'Not Started',
  progress: 0,
  dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
  description: 'Mock content description',
  ...overrides,
});

export const createMockUser = (overrides: Partial<Record<string, unknown>> = {}) => ({
  id: 'mock-user-id',
  role: 'Administrator',
  ...overrides,
});

export const createMockError = (type: string, message: string) => {
  switch (type) {
    case 'NetworkError':
      return new Error(`Network error: ${message}`);
    case 'ValidationError':
      return new Error(`Validation error: ${message}`);
    case 'ApiError':
      return new Error(`API error: ${message}`);
    default:
      return new Error(message);
  }
};

// Test utilities
export const waitForLoadingToFinish = async () => {
  await new Promise(resolve => setTimeout(resolve, 0));
};

export const mockApiResponse = (data: unknown, status = 200) => {
  return Promise.resolve({
    ok: status >= 200 && status < 300,
    status,
    json: () => Promise.resolve(data),
    text: () => Promise.resolve(JSON.stringify(data)),
  } as Response);
};

export const mockApiError = (status: number, message: string) => {
  return Promise.resolve({
    ok: false,
    status,
    statusText: message,
    json: () => Promise.reject(new Error(message)),
    text: () => Promise.resolve(message),
  } as Response);
};

// Cleanup function for tests
export const cleanupTestEnvironment = () => {
  vi.clearAllMocks();
  vi.clearAllTimers();
  localStorageMock.clear();
  sessionStorageMock.clear();
};
