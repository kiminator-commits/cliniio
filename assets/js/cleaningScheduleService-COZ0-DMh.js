import{s as S}from"./login-em2Hs6UG.js";import"./utils-DSBVV_PW.js";import"./vendor-DoALFvsH.js";import"./data-73RVSc-N.js";import"./ui-CbhfWbfq.js";const f=s=>typeof s=="string"?s:"",I=s=>typeof s=="number"?s:0;class j{static transformFromDatabase(){return{}}static transformToDatabase(){return{}}static validateData(e){const t=[];return e||t.push("Data is required"),{isValid:t.length===0,errors:t}}static sanitizeData(e){return Object.fromEntries(Object.entries(e).filter(([,a])=>a!=null))}static transformArray(e){return e.map(()=>({}))}}var x=Object.defineProperty,B=Object.defineProperties,L=Object.getOwnPropertyDescriptors,b=Object.getOwnPropertySymbols,z=Object.prototype.hasOwnProperty,U=Object.prototype.propertyIsEnumerable,O=(s,e,t)=>e in s?x(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,T=(s,e)=>{for(var t in e||(e={}))z.call(e,t)&&O(s,t,e[t]);if(b)for(var t of b(e))U.call(e,t)&&O(s,t,e[t]);return s},P=(s,e)=>B(s,L(e));class y extends j{static transformFromSupabase(e){return{id:f(e.id),name:f(e.name),description:f(e.description),type:f(e.type),frequency:f(e.frequency),assignedTo:f(e.assigned_to),assignedToId:f(e.assigned_to_id),priority:f(e.priority),estimatedDuration:I(e.estimated_duration),points:I(e.points),status:f(e.status),dueDate:f(e.due_date),completedDate:f(e.completed_date),completedBy:f(e.completed_by),notes:f(e.notes),checklistId:f(e.checklist_id),roomId:f(e.room_id),patientId:f(e.patient_id),createdAt:f(e.created_at),updatedAt:f(e.updated_at)}}static transformToSupabase(e){return{name:e.name,description:e.description,type:e.type,frequency:e.frequency,assigned_to:e.assignedTo,assigned_to_id:e.assignedToId,priority:e.priority,estimated_duration:e.estimatedDuration,points:e.points,status:e.status,due_date:e.dueDate,completed_date:e.completedDate,completed_by:e.completedBy,notes:e.notes,checklist_id:e.checklistId,room_id:e.roomId,patient_id:e.patientId}}static createNewSchedule(e){return P(T({},e),{id:Date.now().toString(),createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()})}static updateScheduleWithTimestamp(e){return P(T({},e),{updatedAt:new Date().toISOString()})}static validateSchedule(e){const t=[];return(!e.name||e.name.trim().length===0)&&t.push("Schedule name is required"),e.type||t.push("Schedule type is required"),e.frequency||t.push("Schedule frequency is required"),e.assignedTo||t.push("Assigned staff is required"),e.priority||t.push("Priority is required"),(!e.estimatedDuration||e.estimatedDuration<=0)&&t.push("Estimated duration must be greater than 0"),(!e.points||e.points<0)&&t.push("Points must be non-negative"),e.dueDate||t.push("Due date is required"),e.dueDate&&new Date(e.dueDate)<new Date&&t.push("Due date cannot be in the past"),{isValid:t.length===0,errors:t}}static sanitizeSchedule(e){var t,a,r;return P(T({},e),{name:(t=e.name)==null?void 0:t.trim(),description:(a=e.description)==null?void 0:a.trim(),notes:(r=e.notes)==null?void 0:r.trim()})}static formatScheduleForDisplay(e){return{id:e.id,name:e.name,type:e.type,priority:e.priority,status:e.status,dueDate:e.dueDate?e.dueDate.split("T")[0]:"",assignedTo:e.assignedTo||"",estimatedDuration:`${e.estimatedDuration} minutes`,points:`${e.points} points`}}static getScheduleSummary(e){const t=e.length,a=e.filter(n=>n.status==="pending").length,r=e.filter(n=>n.status==="completed").length,i=e.filter(n=>n.status==="pending"&&new Date(n.dueDate)<new Date).length,o=e.reduce((n,u)=>n+u.points,0),c=t>0?e.reduce((n,u)=>n+u.estimatedDuration,0)/t:0;return{total:t,pending:a,completed:r,overdue:i,totalPoints:o,averageDuration:c}}}class K{constructor(){this.cache={data:new Map,timeout:300*1e3,updated_at:0}}isCacheValid(){return Date.now()-this.cache.updated_at<this.cache.timeout}getCachedData(e){return this.isCacheValid()?this.cache.data.get(e)||null:(this.clearCache(),null)}setCachedData(e,t){this.cache.data.set(e,t),this.cache.updated_at=Date.now()}clearCache(){this.cache.data.clear(),this.cache.updated_at=0}clearCacheKey(e){this.cache.data.delete(e)}getCacheAge(){return Date.now()-this.cache.updated_at}isExpired(){return Date.now()-this.cache.updated_at>=this.cache.timeout}setTTL(e){this.cache.timeout=e}getTTL(){return this.cache.timeout}getCacheSize(){return this.cache.data.size}hasKey(e){return this.cache.data.has(e)}getAllKeys(){return Array.from(this.cache.data.keys())}getCachedSchedules(e){return this.getCachedData(e)||[]}setCachedSchedules(e,t){this.setCachedData(e,t)}getCachedStats(e){return this.getCachedData(e)}setCachedStats(e,t){this.setCachedData(e,t)}invalidateScheduleCache(){this.getAllKeys().filter(t=>t.includes("schedule")||t.includes("cleaning")).forEach(t=>this.clearCacheKey(t))}invalidateStatsCache(){this.getAllKeys().filter(t=>t.includes("stats")||t.includes("analytics")).forEach(t=>this.clearCacheKey(t))}}var H=Object.defineProperty,V=Object.defineProperties,Z=Object.getOwnPropertyDescriptors,A=Object.getOwnPropertySymbols,G=Object.prototype.hasOwnProperty,J=Object.prototype.propertyIsEnumerable,$=(s,e,t)=>e in s?H(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,q=(s,e)=>{for(var t in e||(e={}))G.call(e,t)&&$(s,t,e[t]);if(A)for(var t of A(e))J.call(e,t)&&$(s,t,e[t]);return s},Q=(s,e)=>V(s,Z(e)),g=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class X{constructor(){this.cacheManager=new K}createSchedule(e){return g(this,null,function*(){const t=y.validateSchedule(e);if(!t.isValid)throw new Error(`Invalid schedule: ${t.errors.join(", ")}`);const a=y.sanitizeSchedule(e),{data:r,error:i}=yield S.from("cleaning_schedules").insert(Q(q({},y.transformToSupabase(a)),{created_at:new Date().toISOString(),updated_at:new Date().toISOString()})).select().single();if(i)throw new Error(`Failed to create schedule: ${i.message}`);const o=y.transformFromSupabase(r);return this.cacheManager.invalidateScheduleCache(),o})}updateSchedule(e,t){return g(this,null,function*(){const a=y.validateSchedule(t);if(!a.isValid)throw new Error(`Invalid schedule updates: ${a.errors.join(", ")}`);const r=y.sanitizeSchedule(t),{data:i,error:o}=yield S.from("cleaning_schedules").update(q({},y.transformToSupabase(r))).eq("id",e).select().single();if(o)throw new Error(`Failed to update schedule: ${o.message}`);const c=y.transformFromSupabase(i);return this.cacheManager.invalidateScheduleCache(),c})}getSchedules(e){return g(this,null,function*(){const t=`schedules_${JSON.stringify(e)}`,a=this.cacheManager.getCachedSchedules(t);if(a.length>0)return a;let r=S.from("cleaning_schedules").select("*");e!=null&&e.type&&(r=r.eq("type",e.type)),e!=null&&e.status&&(r=r.eq("status",e.status)),e!=null&&e.dateRange&&(r=r.gte("start_date",e.dateRange.start).lte("start_date",e.dateRange.end));const{data:i,error:o}=yield r.order("start_date",{ascending:!0});if(o)throw new Error(`Failed to fetch schedules: ${o.message}`);const c=i.map(y.transformFromSupabase);return this.cacheManager.setCachedSchedules(t,c),c})}getScheduleById(e){return g(this,null,function*(){const t=`schedule_${e}`,a=this.cacheManager.getCachedData(t);if(a)return a;const{data:r,error:i}=yield S.from("cleaning_schedules").select("*").eq("id",e).single();if(i){if(i.code==="PGRST116")return null;throw new Error(`Failed to fetch schedule: ${i.message}`)}const o=y.transformFromSupabase(r);return this.cacheManager.setCachedData(t,o),o})}deleteSchedule(e){return g(this,null,function*(){const{error:t}=yield S.from("cleaning_schedules").delete().eq("id",e);if(t)throw new Error(`Failed to delete schedule: ${t.message}`);this.cacheManager.invalidateScheduleCache()})}getSchedulesByType(e){return g(this,null,function*(){return this.getSchedules({type:e})})}getSchedulesByStatus(e){return g(this,null,function*(){return this.getSchedules({status:e})})}getSchedulesByStaff(e){return g(this,null,function*(){return this.getSchedules({assignedTo:e})})}getSchedulesByDateRange(e,t){return g(this,null,function*(){return this.getSchedules({dateRange:{start:e,end:t}})})}getPendingSchedules(){return g(this,null,function*(){return this.getSchedules({status:"pending"})})}getCompletedSchedules(){return g(this,null,function*(){return this.getSchedules({status:"completed"})})}getOverdueSchedules(){return g(this,null,function*(){return(yield this.getSchedules()).filter(t=>t.status==="pending"&&new Date(t.dueDate)<new Date)})}getTodaysSchedules(){return g(this,null,function*(){const e=new Date().toISOString().split("T")[0];return this.getSchedules({dateRange:{start:e,end:e}})})}getUpcomingSchedules(e=7){return g(this,null,function*(){const t=new Date().toISOString().split("T")[0],a=new Date;a.setDate(a.getDate()+e);const r=a.toISOString().split("T")[0];return this.getSchedules({dateRange:{start:t,end:r}})})}refresh(){return g(this,null,function*(){this.cacheManager.clearCache()})}clearCache(){this.cacheManager.clearCache()}getCacheManager(){return this.cacheManager}}var k=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});const d=s=>typeof s=="string"?s:"",M=s=>typeof s=="number"?s:0,C=s=>typeof s=="boolean"?s:!1,E=s=>Array.isArray(s)?s.filter(e=>typeof e=="string"):[];class h{static getScheduleConfigs(){return k(this,null,function*(){const{data:e,error:t}=yield S.from("cleaning_schedule_configs").select("*");if(t){const a=t;throw new Error(`Failed to fetch schedule configs: ${a.message}`)}return e?(e||[]).map(a=>({id:d(a.id),type:d(a.type),frequency:d(a.frequency),autoGenerate:C(a.auto_generate),enabled:C(a.enabled),defaultPoints:M(a.default_points),defaultDuration:M(a.default_duration),defaultPriority:d(a.default_priority)||"medium",triggerConditions:a.trigger_conditions||[],assignedRoles:E(a.assigned_roles),createdAt:d(a.created_at),updatedAt:d(a.updated_at)})):[]})}static getActiveStaffSchedules(){return k(this,null,function*(){const{data:e,error:t}=yield S.from("staff_schedules").select("*").eq("is_active",!0);if(t){const a=t;throw new Error(`Failed to fetch staff schedules: ${a.message}`)}return e?(e||[]).map(a=>{const r=a.work_hours;return{id:d(a.id),staffId:d(a.staff_id),staffName:d(a.staff_name),role:d(a.role),workDays:E(a.work_days),workHours:{start:d(r==null?void 0:r.start)||"09:00",end:d(r==null?void 0:r.end)||"17:00"},isActive:C(a.is_active),createdAt:d(a.created_at),updatedAt:d(a.updated_at)}}):[]})}static getRoomsByStatus(e){return k(this,null,function*(){const{data:t,error:a}=yield S.from("room_status").select("*").eq("status",e);if(a){const r=a;throw new Error(`Failed to fetch room status: ${r.message}`)}return t?(t||[]).map(r=>({id:d(r.id),roomId:d(r.room_id),status:d(r.status)||"clean",lastUpdated:d(r.updated_at),patientId:void 0,notes:d(r.notes)})):[]})}static isStaffAvailableOnDate(e,t){const a=new Date(t).toLocaleDateString("en-US",{weekday:"long"}).toLowerCase();return e.workDays.includes(a)}static getWeeklyScheduleDay(e){var t;const a=e.triggerConditions.find(r=>r.type==="time_based");return((t=a==null?void 0:a.value)==null?void 0:t.day)||"friday"}static getPublicSpacesScheduleDay(e){var t;const a=e.triggerConditions.find(r=>r.type==="admin_decision");return((t=a==null?void 0:a.value)==null?void 0:t.day)||"wednesday"}static getDeepCleanScheduleDay(e){var t;const a=e.triggerConditions.find(r=>r.type==="admin_decision");return((t=a==null?void 0:a.value)==null?void 0:t.day)||"saturday"}static getCurrentDayOfWeek(){return new Date().toLocaleDateString("en-US",{weekday:"long"}).toLowerCase()}static getTodayDateString(){return new Date().toISOString().split("T")[0]}static isSameDay(e,t){return e.split("T")[0]===t.split("T")[0]}static isDateInPast(e){return new Date(e)<new Date}static isDateInFuture(e){return new Date(e)>new Date}static addDaysToDate(e,t){const a=new Date(e);return a.setDate(a.getDate()+t),a.toISOString().split("T")[0]}static subtractDaysFromDate(e,t){const a=new Date(e);return a.setDate(a.getDate()-t),a.toISOString().split("T")[0]}static getDateRange(e,t){const a=[],r=new Date(e),i=new Date(t);for(;r<=i;)a.push(r.toISOString().split("T")[0]),r.setDate(r.getDate()+1);return a}static getWeekDays(){return["monday","tuesday","wednesday","thursday","friday","saturday","sunday"]}static getWorkDays(){return["monday","tuesday","wednesday","thursday","friday"]}static getWeekendDays(){return["saturday","sunday"]}static isWeekend(e){return this.getWeekendDays().includes(e)}static isWorkDay(e){return this.getWorkDays().includes(e)}static getNextWeekDay(e){const t=this.getWeekDays(),r=(t.indexOf(e)+1)%t.length;return t[r]}static getPreviousWeekDay(e){const t=this.getWeekDays(),a=t.indexOf(e),r=a===0?t.length-1:a-1;return t[r]}static formatTimeForSchedule(e,t=0){const a=new Date;return a.setHours(e,t,0,0),a.toISOString()}static getDefaultScheduleTimes(){return{morning:this.formatTimeForSchedule(9,0),afternoon:this.formatTimeForSchedule(14,0),evening:this.formatTimeForSchedule(17,0)}}static calculateDurationInMinutes(e,t){const a=new Date(e),r=new Date(t);return Math.round((r.getTime()-a.getTime())/(1e3*60))}static calculatePointsForDuration(e,t=10){return Math.round(e/30*t)}static getPriorityMultiplier(e){switch(e.toLowerCase()){case"low":return .8;case"medium":return 1;case"high":return 1.5;case"urgent":return 2;default:return 1}}static calculatePointsWithPriority(e,t){return Math.round(e*this.getPriorityMultiplier(t))}}var v=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class Y{constructor(e,t){this.coreService=e,this.assignmentService=t}generateDailySchedules(){return v(this,null,function*(){const e=h.getTodayDateString(),t=yield h.getScheduleConfigs(),a=[];for(const r of t)if(!(!r.enabled||!r.autoGenerate))try{switch(r.type){case"setup_take_down":yield this.generateSetupTakeDownSchedules(r,e,a);break;case"per_patient":yield this.generatePerPatientSchedules(r,e,a);break;case"weekly":yield this.generateWeeklySchedules(r,e,a);break;case"public_spaces":yield this.generatePublicSpacesSchedules(r,e,a);break;case"deep_clean":yield this.generateDeepCleanSchedules(r,e,a);break}}catch(i){console.error(`Error generating schedules for type ${r.type}:`,i)}return a})}generateSetupTakeDownSchedules(e,t,a){return v(this,null,function*(){const i=(yield h.getActiveStaffSchedules()).filter(u=>h.isStaffAvailableOnDate(u,t));if(i.length===0)return;const o=yield this.assignmentService.assignTaskToOptimalStaff(i,e),c={name:"Daily Setup/Take Down",type:"setup_take_down",frequency:"daily",assignedTo:o.staffName,assignedToId:o.staffId,priority:e.defaultPriority,estimatedDuration:e.defaultDuration,points:e.defaultPoints,status:"pending",dueDate:`${t}T09:00:00Z`},n=yield this.coreService.createSchedule(c);a.push(n)})}generatePerPatientSchedules(e,t,a){return v(this,null,function*(){const r=yield h.getRoomsByStatus("dirty");for(const i of r){const c=(yield h.getActiveStaffSchedules()).filter(l=>h.isStaffAvailableOnDate(l,t));if(c.length===0)continue;const n=yield this.assignmentService.assignTaskToOptimalStaff(c,e),u={name:`Per-Patient Cleaning - Room ${i.roomId}`,type:"per_patient",frequency:"per_patient",assignedTo:n.staffName,assignedToId:n.staffId,priority:"high",estimatedDuration:e.defaultDuration,points:e.defaultPoints,status:"pending",dueDate:`${t}T17:00:00Z`,roomId:i.roomId,patientId:i.patientId},m=yield this.coreService.createSchedule(u);a.push(m)}})}generateWeeklySchedules(e,t,a){return v(this,null,function*(){const r=h.getWeeklyScheduleDay(e);if(new Date(t).toLocaleDateString("en-US",{weekday:"long"}).toLowerCase()!==r)return;const c=(yield h.getActiveStaffSchedules()).filter(l=>h.isStaffAvailableOnDate(l,t));if(c.length===0)return;const n=yield this.assignmentService.assignTaskToOptimalStaff(c,e),u={name:"Weekly Deep Cleaning",type:"weekly",frequency:"weekly",assignedTo:n.staffName,assignedToId:n.staffId,priority:e.defaultPriority,estimatedDuration:e.defaultDuration*2,points:e.defaultPoints*1.5,status:"pending",dueDate:`${t}T14:00:00Z`},m=yield this.coreService.createSchedule(u);a.push(m)})}generatePublicSpacesSchedules(e,t,a){return v(this,null,function*(){const r=h.getPublicSpacesScheduleDay(e);if(new Date(t).toLocaleDateString("en-US",{weekday:"long"}).toLowerCase()!==r)return;const c=(yield h.getActiveStaffSchedules()).filter(l=>h.isStaffAvailableOnDate(l,t));if(c.length===0)return;const n=yield this.assignmentService.assignTaskToOptimalStaff(c,e),u={name:"Public Spaces Cleaning",type:"public_spaces",frequency:"weekly",assignedTo:n.staffName,assignedToId:n.staffId,priority:e.defaultPriority,estimatedDuration:e.defaultDuration,points:e.defaultPoints,status:"pending",dueDate:`${t}T10:00:00Z`},m=yield this.coreService.createSchedule(u);a.push(m)})}generateDeepCleanSchedules(e,t,a){return v(this,null,function*(){const r=h.getDeepCleanScheduleDay(e);if(new Date(t).toLocaleDateString("en-US",{weekday:"long"}).toLowerCase()!==r)return;const c=(yield h.getActiveStaffSchedules()).filter(l=>h.isStaffAvailableOnDate(l,t));if(c.length===0)return;const n=yield this.assignmentService.assignTaskToOptimalStaff(c,e),u={name:"Deep Clean Maintenance",type:"deep_clean",frequency:"monthly",assignedTo:n.staffName,assignedToId:n.staffId,priority:"high",estimatedDuration:e.defaultDuration*3,points:e.defaultPoints*2,status:"pending",dueDate:`${t}T08:00:00Z`},m=yield this.coreService.createSchedule(u);a.push(m)})}}var D=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class ee{assignTaskToOptimalStaff(e,t){return D(this,null,function*(){const a=yield Promise.all(e.map(r=>D(this,null,function*(){const i=yield this.calculateStaffAssignmentScore(r,t);return{staff:r,score:i}})));return a.sort((r,i)=>i.score-r.score),a[0].staff})}calculateStaffAssignmentScore(e,t){return D(this,null,function*(){let a=0;const r=yield this.getStaffCurrentTasks(e.staffId),i=Math.max(0,100-r.length*10);a+=i*.3;const o=yield this.getStaffPerformanceScore(e.staffId);a+=o*.25;const c=yield this.getStaffSkillMatchScore(e.staffId,t.type);a+=c*.2;const n=this.getStaffAvailabilityScore(e);a+=n*.15;const u=yield this.getStaffPreferenceScore(e.staffId,t.type);return a+=u*.1,a})}getStaffCurrentTasks(e){return D(this,null,function*(){const t=h.getTodayDateString(),{data:a,error:r}=yield S.from("cleaning_schedules").select("*").eq("assigned_to_id",e).eq("status","pending").gte("due_date",t).lte("due_date",t);return r?[]:a||[]})}getStaffPerformanceScore(e){return D(this,null,function*(){const{data:t,error:a}=yield S.from("cleaning_schedules").select("*").eq("assigned_to_id",e).eq("status","completed").gte("completed_date",new Date(Date.now()-2592e6).toISOString());if(a||!t)return 50;const r=t.length,i=t.filter(o=>new Date(o.completed_date||"")<=new Date(o.due_date||"")).length;return Math.min(100,i/r*100)})}getStaffSkillMatchScore(e,t){return D(this,null,function*(){return 50})}getStaffAvailabilityScore(e){const a=new Date().getHours(),r=parseInt(e.workHours.start.split(":")[0]),i=parseInt(e.workHours.end.split(":")[0]);return a>=r&&a<i?100:a<r?80:60}getStaffPreferenceScore(e,t){return D(this,null,function*(){return 50})}}var F=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class te{constructor(e){this.coreService=e}getCleaningStats(){return F(this,null,function*(){const e=h.getTodayDateString(),t=yield this.coreService.getSchedules(),a=t.filter(l=>{var w;return l.status==="completed"&&((w=l.completedDate)==null?void 0:w.startsWith(e))}).length,r=t.filter(l=>l.status==="pending"&&l.dueDate.startsWith(e)).length,i=t.filter(l=>l.status==="pending"&&new Date(l.dueDate)<new Date).length,o=t.length,c=o>0?a/o*100:0,n=t.filter(l=>l.status==="completed"&&l.completedDate),u=n.length>0?n.reduce((l,w)=>{const R=new Date(w.dueDate),N=new Date(w.completedDate);return l+(R.getTime()-N.getTime())},0)/n.length:0,m=yield this.getTopPerformers();return{totalSchedules:o,completedToday:a,pendingToday:r,overdue:i,completionRate:c,averageCompletionTime:u,pendingSchedules:r,overdueSchedules:i,topPerformers:m}})}getTopPerformers(){return F(this,null,function*(){const{data:e,error:t}=yield S.from("cleaning_tasks").select("user_id, updated_at").eq("status","completed").gte("updated_at",new Date(Date.now()-2592e6).toISOString());if(t||!e)return[];const a=e.reduce((r,i)=>{const o=i.user_id;return r[o]||(r[o]={staffId:o,staffName:i.user_id,completedTasks:0,totalTime:0}),r[o].completedTasks++,r},{});return Object.values(a).sort((r,i)=>i.completedTasks-r.completedTasks).slice(0,5).map(r=>({staffId:r.staffId,staffName:r.staffName,completedTasks:r.completedTasks,averageTime:r.totalTime/r.completedTasks}))})}}var W=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class ae{constructor(e){this.coreService=e}convertScheduleToTask(e){return W(this,null,function*(){return{id:e.id,title:e.name,completed:e.status==="completed",points:e.points,type:e.type,category:"Environmental Cleaning",priority:e.priority,dueDate:e.dueDate,status:e.status==="completed"?"completed":"pending"}})}getTodaysCleaningTasks(){return W(this,null,function*(){const e=h.getTodayDateString(),t=yield this.coreService.getSchedules({dateRange:{start:e,end:e}});return Promise.all(t.map(a=>this.convertScheduleToTask(a)))})}}var p=(s,e,t)=>new Promise((a,r)=>{var i=n=>{try{c(t.next(n))}catch(u){r(u)}},o=n=>{try{c(t.throw(n))}catch(u){r(u)}},c=n=>n.done?a(n.value):Promise.resolve(n.value).then(i,o);c((t=t.apply(s,e)).next())});class _{constructor(){this.coreService=new X,this.assignmentService=new ee,this.generatorService=new Y(this.coreService,this.assignmentService),this.analyticsService=new te(this.coreService),this.integrationService=new ae(this.coreService)}static getInstance(){return _.instance||(_.instance=new _),_.instance}createSchedule(e){return p(this,null,function*(){return this.coreService.createSchedule(e)})}updateSchedule(e,t){return p(this,null,function*(){return this.coreService.updateSchedule(e,t)})}getSchedules(e){return p(this,null,function*(){return this.coreService.getSchedules(e)})}getScheduleById(e){return p(this,null,function*(){return this.coreService.getScheduleById(e)})}generateDailySchedules(){return p(this,null,function*(){return this.generatorService.generateDailySchedules()})}convertScheduleToTask(e){return p(this,null,function*(){return this.integrationService.convertScheduleToTask(e)})}getTodaysCleaningTasks(){return p(this,null,function*(){return this.integrationService.getTodaysCleaningTasks()})}getCleaningStats(){return p(this,null,function*(){return this.analyticsService.getCleaningStats()})}deleteSchedule(e){return p(this,null,function*(){return this.coreService.deleteSchedule(e)})}getTodaysSchedules(){return p(this,null,function*(){return this.coreService.getTodaysSchedules()})}getPendingSchedules(){return p(this,null,function*(){return this.coreService.getPendingSchedules()})}getCompletedSchedules(){return p(this,null,function*(){return this.coreService.getCompletedSchedules()})}getOverdueSchedules(){return p(this,null,function*(){return this.coreService.getOverdueSchedules()})}getUpcomingSchedules(e=7){return p(this,null,function*(){return this.coreService.getUpcomingSchedules(e)})}refresh(){return p(this,null,function*(){return this.coreService.refresh()})}clearCache(){this.coreService.clearCache()}}const oe=_.getInstance();export{oe as cleaningScheduleService};
