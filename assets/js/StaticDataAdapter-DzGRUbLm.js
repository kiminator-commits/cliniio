import{W as _}from"./main-FsBT3Y_8.js";import{t as a,O as r}from"./login-em2Hs6UG.js";import"./utils-DSBVV_PW.js";import"./vendor-DoALFvsH.js";import"./data-73RVSc-N.js";import"./errors-CsB9ZK3e.js";import"./ui-CbhfWbfq.js";var S=Object.defineProperty,v=Object.defineProperties,g=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,y=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable,c=(i,t,e)=>t in i?S(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e,p=(i,t)=>{for(var e in t||(t={}))y.call(t,e)&&c(i,e,t[e]);if(l)for(var e of l(t))w.call(t,e)&&c(i,e,t[e]);return i},I=(i,t)=>v(i,g(t)),n=(i,t,e)=>new Promise((f,u)=>{var h=o=>{try{s(e.next(o))}catch(d){u(d)}},m=o=>{try{s(e.throw(o))}catch(d){u(d)}},s=o=>o.done?f(o.value):Promise.resolve(o.value).then(h,m);s((e=e.apply(i,t)).next())});class T extends _{constructor(t={type:"static"}){const e={supportsRead:a()||!r(),supportsWrite:a()||!r(),supportsDelete:a()||!r(),supportsRealTime:!1,supportsOffline:a()||!r(),supportsBatch:!1};super(t,{name:"StaticDataAdapter",version:"1.0.0",description:"Static data adapter for development or when Supabase is not configured",capabilities:e})}initialize(){return n(this,null,function*(){if(!(a()||!r()))throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}isConnected(){return a()||!r()}fetchAllInventoryData(){return n(this,null,function*(){if(a()||!r())return{data:this.getMockInventoryItems(),error:null,count:this.getMockInventoryItems().length};throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}fetchInventoryItems(){return n(this,null,function*(){if(a()||!r())return this.getMockInventoryItems();throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}fetchCategories(){return n(this,null,function*(){if(a()||!r())return this.getMockCategories();throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}addInventoryItem(t){return n(this,null,function*(){if(a()||!r())return I(p({},t),{id:`mock-${Date.now()}`});throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}updateInventoryItem(t,e){return n(this,null,function*(){if(a()||!r())return p({id:t,name:"Mock Item"},e);throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}deleteInventoryItem(t){return n(this,null,function*(){if(!(a()||!r()))throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}addCategory(t){return n(this,null,function*(){if(a()||!r())return t;throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}deleteCategory(t){return n(this,null,function*(){if(!(a()||!r()))throw new Error("Static data adapter is disabled. This project should not use mock data. Please configure Supabase instead.")})}getMockInventoryItems(){return[{id:"mock-1",facility_id:"mock-facility",name:"Surgical Scissors",category:"Surgical Instruments",status:"Available",quantity:5,unit_cost:150,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),reorder_point:2,expiration_date:null,data:{lastUpdated:new Date().toISOString()},reorder_level:2,archived:!1,archived_at:null,archived_by:null,archive_reason:null},{id:"mock-2",facility_id:"mock-facility",name:"Stethoscope",category:"Diagnostic Equipment",status:"Available",quantity:3,unit_cost:75,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),reorder_point:1,expiration_date:null,data:{lastUpdated:new Date().toISOString()},reorder_level:1,archived:!1,archived_at:null,archived_by:null,archive_reason:null},{id:"mock-3",facility_id:"mock-facility",name:"Blood Pressure Cuff",category:"Diagnostic Equipment",status:"In Use",quantity:2,unit_cost:45,created_at:new Date().toISOString(),updated_at:new Date().toISOString(),reorder_point:1,expiration_date:null,data:{lastUpdated:new Date().toISOString()},reorder_level:1,archived:!1,archived_at:null,archived_by:null,archive_reason:null}]}getMockCategories(){return["Surgical Instruments","Diagnostic Equipment","Medical Supplies","Office Equipment","Emergency Equipment"]}}export{T as StaticDataAdapter};
