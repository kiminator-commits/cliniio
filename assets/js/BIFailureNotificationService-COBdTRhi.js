import{k as c,l as g,F as O}from"./main-DVBlW6kB.js";import{s as l}from"./login-CtXU169Q.js";import"./utils-DSBVV_PW.js";import"./vendor-DoALFvsH.js";import"./data-73RVSc-N.js";import"./ui-DETUEJ2B.js";var C=Object.defineProperty,R=Object.defineProperties,U=Object.getOwnPropertyDescriptors,N=Object.getOwnPropertySymbols,q=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable,w=(d,t,e)=>t in d?C(d,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[t]=e,D=(d,t)=>{for(var e in t||(t={}))q.call(t,e)&&w(d,e,t[e]);if(N)for(var e of N(t))x.call(t,e)&&w(d,e,t[e]);return d},I=(d,t)=>R(d,U(t)),y=(d,t,e)=>new Promise((i,r)=>{var a=o=>{try{s(e.next(o))}catch(u){r(u)}},n=o=>{try{s(e.throw(o))}catch(u){r(u)}},s=o=>o.done?i(o.value):Promise.resolve(o.value).then(a,n);s((e=e.apply(d,t)).next())});class p{static updateIncidentNotificationStatus(t,e,i){return y(this,null,function*(){try{const r={regulatory_notification_sent:i,regulatory_notification_date:i?new Date().toISOString():null},{error:a}=yield l.from("bi_failure_incidents").update(r).eq("id",t).eq("facility_id",e);a&&c.handleDatabaseError(a,"update incident notification status")}catch(r){c.handleUnexpectedError(r,"update incident notification status")}})}static logManagerNotification(t,e,i){return y(this,null,function*(){try{const r={incident_id:t,action:"manager_notification_sent",details:{manager_id:e,severity:i,notification_type:"manager_alert"},created_at:new Date().toISOString()},{error:a}=yield l.from("bi_activity_log").insert(r);a&&console.error("Failed to log to activity log:",a);const n={module:"bi_failure",table_name:"bi_failure_incidents",record_id:t||null,action:"notification_sent",facility_id:"550e8400-e29b-41d4-a716-446655440000",user_id:e,metadata:{notification_type:"manager_alert",manager_id:e,severity:i,timestamp:new Date().toISOString()},created_at:new Date().toISOString()},{error:s}=yield l.from("audit_logs").insert(n);s&&console.error("Failed to log to audit trail:",s),console.log(`Manager notification logged: incident ${t}, manager ${e}, severity ${i}`)}catch(r){c.handleUnexpectedError(r,"log manager notification")}})}static storeNotificationRecord(t){return y(this,null,function*(){try{const e={id:t.id,incident_id:t.incidentId,facility_id:t.facilityId,severity:t.severity,message_type:t.messageType,recipients:t.recipients,subject:t.subject,body:t.body,sent_at:t.sentAt||null,status:t.status,retry_count:t.retryCount,max_retries:t.maxRetries},{error:i}=yield l.from("notifications").insert(I(D({},e),{created_at:new Date().toISOString(),updated_at:new Date().toISOString()}));i&&c.handleDatabaseError(i,"store notification record"),console.log("Notification record stored:",t.id)}catch(e){c.handleUnexpectedError(e,"store notification record")}})}static storeEmailAlertInQueue(t){return y(this,null,function*(){try{const e={id:t.id,incident_id:t.incidentId,facility_id:t.facilityId,recipient_type:t.recipientType,recipient_email:t.emailAddress,subject:t.subject,message:t.body,priority:t.priority,scheduled_for:t.scheduledFor||null,status:t.status,retry_count:t.retryCount,max_retries:t.maxRetries},{data:i,error:r}=yield l.from("email_alert_queue").insert(I(D({},e),{created_at:new Date().toISOString(),updated_at:new Date().toISOString()})).select("id").single();if(r&&c.handleDatabaseError(r,"store email alert in queue"),!i)throw new Error("Failed to store email alert in queue");return i.id}catch(e){throw c.handleUnexpectedError(e,"store email alert in queue"),e}})}static getPendingEmailAlerts(){return y(this,null,function*(){try{const{data:t,error:e}=yield l.from("email_alert_queue").select("*").eq("status","queued").lte("scheduled_for",new Date().toISOString()).order("priority",{ascending:!1}).order("created_at",{ascending:!0});return e?(c.handleDatabaseError(e,"get pending email alerts"),[]):t?t.map(i=>({id:i.id,incidentId:i.incident_id,facilityId:i.facility_id,recipientType:i.recipient_type,emailAddress:i.recipient_email,subject:i.subject,body:i.message,priority:i.priority,scheduledFor:i.scheduled_for||void 0,status:i.status,retryCount:i.retry_count||0,maxRetries:i.max_retries||3,createdAt:i.created_at,updatedAt:i.updated_at})):[]}catch(t){return c.handleUnexpectedError(t,"get pending email alerts"),[]}})}static updateEmailAlertStatus(t,e,i){return y(this,null,function*(){try{const r={status:e,updated_at:new Date().toISOString()};i!==void 0&&(r.retry_count=i);const{error:a}=yield l.from("email_alert_queue").update(r).eq("id",t);a&&c.handleDatabaseError(a,"update email alert status")}catch(r){c.handleUnexpectedError(r,"update email alert status")}})}static getNotificationStats(){return y(this,null,function*(){try{const{data:t,error:e}=yield l.from("notifications").select("id").eq("status","sent");e&&c.handleDatabaseError(e,"get sent notifications");const{data:i,error:r}=yield l.from("notifications").select("id").eq("status","failed");r&&c.handleDatabaseError(r,"get failed notifications");const{data:a,error:n}=yield l.from("email_alert_queue").select("id").eq("status","queued");n&&c.handleDatabaseError(n,"get queued email alerts");const s=(t==null?void 0:t.length)||0,o=(i==null?void 0:i.length)||0,u=(a==null?void 0:a.length)||0,m=s+o,E=m>0?s/m*100:0;return{totalSent:s,totalFailed:o,totalQueued:u,successRate:E}}catch(t){return c.handleUnexpectedError(t,"get notification stats"),{totalSent:0,totalFailed:0,totalQueued:0,successRate:0}}})}static getNotificationAuditLog(t){return y(this,null,function*(){try{const{data:e,error:i}=yield l.from("notification_audit_log").select("*").eq("notification_id",t).order("timestamp",{ascending:!1});return i?(c.handleDatabaseError(i,"get notification audit log"),[]):e?e.map(r=>({id:r.id,action:r.action,timestamp:r.timestamp,details:r.details})):[]}catch(e){return c.handleUnexpectedError(e,"get notification audit log"),[]}})}static logNotificationAuditEvent(t,e,i,r){return y(this,null,function*(){try{const a={notification_id:t,action:e,timestamp:new Date().toISOString(),user_id:r,details:i},{error:n}=yield l.from("notification_audit_log").insert(a);n&&c.handleDatabaseError(n,"log notification audit event")}catch(a){c.handleUnexpectedError(a,"log notification audit event")}})}}var S=(d,t,e)=>new Promise((i,r)=>{var a=o=>{try{s(e.next(o))}catch(u){r(u)}},n=o=>{try{s(e.throw(o))}catch(u){r(u)}},s=o=>o.done?i(o.value):Promise.resolve(o.value).then(a,n);s((e=e.apply(d,t)).next())});class v{static isRegulatoryNotificationRequired(t,e){return(t==="high"||t==="critical")&&e.autoNotificationEnabled}static scheduleDelayedNotification(t,e){return S(this,arguments,function*(i,r,a=this.DEFAULT_NOTIFICATION_DELAY){const n=new Date;return n.setMinutes(n.getMinutes()+a),n.toISOString(),new Date().toISOString(),new Date().toISOString(),console.log("Notification scheduled for:",n),yield p.logNotificationAuditEvent(i,"scheduled",`Scheduled for ${n.toISOString()}`,yield this.getCurrentUserId()),i})}static getEscalationRecipients(t,e){try{const r={supervisor:"low",manager:"medium",director:"high",executive:"critical"}[t]||"high";return e.escalationLevels[r]||[]}catch(i){return console.error("Error getting escalation recipients:",i),[]}}static getCurrentUserId(){return S(this,null,function*(){try{const{data:{user:t}}=yield l.auth.getUser();return t==null?void 0:t.id}catch(t){console.error("Error getting current user:",t);return}})}}v.DEFAULT_NOTIFICATION_DELAY=30;var _=(d,t,e)=>new Promise((i,r)=>{var a=o=>{try{s(e.next(o))}catch(u){r(u)}},n=o=>{try{s(e.throw(o))}catch(u){r(u)}},s=o=>o.done?i(o.value):Promise.resolve(o.value).then(a,n);s((e=e.apply(d,t)).next())});class h{static sendNotification(t){return _(this,null,function*(){try{const e=yield this.getNotificationConfig(t.facilityId);for(const i of e.notificationChannels)try{switch(i){case"email":yield this.sendEmailNotification(t);break;case"webhook":yield this.sendWebhookNotification(t);break}}catch(r){console.error(`Failed to send ${i} notification:`,r),t.retryCount++}t.status="sent",t.sentAt=new Date().toISOString(),yield this.storeNotificationRecord(t),yield p.logNotificationAuditEvent(t.id,"sent","Notification sent successfully",yield this.getCurrentUserId())}catch(e){throw t.status="failed",yield p.logNotificationAuditEvent(t.id,"failed",`Notification failed: ${e instanceof Error?e.message:"Unknown error"}`,yield this.getCurrentUserId()),e}})}static sendEmailNotification(t){return _(this,null,function*(){try{const{error:e}=yield l.from("email_alert_queue").insert({recipient_email:t.recipients.join(","),subject:t.subject,body:t.body,status:"queued",created_at:new Date().toISOString()});if(e)throw new Error(`Failed to queue email notification: ${e.message}`);console.log("Email notification queued:",{to:t.recipients,subject:t.subject})}catch(e){throw console.error("Failed to send email notification:",e),e}})}static sendWebhookNotification(t){return _(this,null,function*(){try{console.warn("Webhook notifications disabled - facility_webhooks table not available:",t.facilityId);return}catch(e){throw console.error("Failed to send webhook notification:",e),e}})}static storeNotificationRecord(t){return _(this,null,function*(){try{const{error:e}=yield l.from("notifications").insert({id:t.id,facility_id:t.facilityId,severity:t.severity,title:t.subject,message:t.body,notification_type:t.messageType,module:"bi_failure",created_at:new Date().toISOString(),updated_at:new Date().toISOString()});if(e)throw new Error(`Failed to store notification record: ${e.message}`);console.log("Notification record stored:",t.id)}catch(e){throw console.error("Failed to store notification record:",e),e}})}static getNotificationConfig(t){return _(this,null,function*(){try{const{data:e,error:i}=yield l.from("facility_notification_config").select("*").eq("facility_id",t).single();if(i&&i.code!=="PGRST116")throw new Error(`Failed to get notification config: ${i.message}`);return e?{facilityId:e.facility_id,regulatoryBodies:e.regulatory_bodies,notificationChannels:e.notification_channels,escalationLevels:e.escalation_levels,autoNotificationEnabled:e.auto_notification_enabled,notificationDelayMinutes:e.notification_delay_minutes}:{facilityId:t,regulatoryBodies:["FDA","CDC","State Health Department"],notificationChannels:["email","webhook"],escalationLevels:{low:["supervisor"],medium:["supervisor","manager"],high:["supervisor","manager","director"],critical:["supervisor","manager","director","executive"]},autoNotificationEnabled:!0,notificationDelayMinutes:30}}catch(e){return console.error("Error getting notification config:",e),{facilityId:t,regulatoryBodies:["FDA","CDC","State Health Department"],notificationChannels:["email","webhook"],escalationLevels:{low:["supervisor"],medium:["supervisor","manager"],high:["supervisor","manager","director"],critical:["supervisor","manager","director","executive"]},autoNotificationEnabled:!0,notificationDelayMinutes:30}}})}static getCurrentUserId(){return _(this,null,function*(){try{const{data:{user:t}}=yield l.auth.getUser();return t==null?void 0:t.id}catch(t){console.error("Error getting current user:",t);return}})}}h.MAX_RETRY_COUNT=3;class b{static generateNotificationSubject(t,e,i){return`[${t.toUpperCase()}] ${e==="regulatory"?"REGULATORY":"INTERNAL"} ALERT: BI Failure Incident ${i.incidentNumber}`}static generateNotificationBody(t,e,i,r){const a=i;return`
BI Failure Incident Report

Incident Number: ${a.incidentNumber}
Severity Level: ${t.toUpperCase()}
Failure Date: ${new Date(a.failureDate).toLocaleDateString()}
Affected Tools: ${a.affectedToolsCount}
Failure Reason: ${a.failureReason||"Not specified"}

${r||"Please review and take appropriate action."}

This is an automated notification from the BI Failure Management System.
    `.trim()}static createNotificationMessage(t,e,i,r,a,n,s,o=3){const u=`notification_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,m=this.generateNotificationSubject(i,r,a),E=this.generateNotificationBody(i,r,a,s);return{id:u,incidentId:t,facilityId:e,severity:i,messageType:r,recipients:n,subject:m,body:E,status:"pending",retryCount:0,maxRetries:o}}}var f=(d,t,e)=>new Promise((i,r)=>{var a=o=>{try{s(e.next(o))}catch(u){r(u)}},n=o=>{try{s(e.throw(o))}catch(u){r(u)}},s=o=>o.done?i(o.value):Promise.resolve(o.value).then(a,n);s((e=e.apply(d,t)).next())});class F{static sendRegulatoryNotification(t,e,i,r){return f(this,null,function*(){try{g.validateIncidentId(t),g.validateFacilityId(e);const a=yield h.getNotificationConfig(e);if(!a.autoNotificationEnabled)return!1;const n=b.createNotificationMessage(t,e,i,"regulatory",r,yield this.getDefaultRecipients());return v.isRegulatoryNotificationRequired(i,a)?(yield h.sendNotification(n),yield this.updateIncidentNotificationStatus(t,e,!0),!0):!1}catch(a){if(a instanceof Error&&a.name==="BIFailureError")throw a;return c.handleUnexpectedError(a,"send regulatory notification"),!1}})}static sendInternalNotification(t,e,i,r,a){return f(this,null,function*(){try{g.validateIncidentId(t),g.validateFacilityId(e);const n=yield this.getIncidentDetails(t,e),s=b.createNotificationMessage(t,e,i,"internal",n,r,a);return yield h.sendNotification(s),!0}catch(n){if(n instanceof Error&&n.name==="BIFailureError")throw n;return c.handleUnexpectedError(n,"send internal notification"),!1}})}static sendEscalationNotification(t,e,i){return f(this,null,function*(){try{g.validateIncidentId(t),g.validateFacilityId(e);const r=yield h.getNotificationConfig(e),a=v.getEscalationRecipients(i,r);if(a.length===0)return!1;const n=yield this.getIncidentDetails(t,e),s=b.createNotificationMessage(t,e,"high","escalation",n,a,`BI Failure incident ${n.incidentNumber} requires ${i} attention.`);return yield h.sendNotification(s),!0}catch(r){if(r instanceof Error&&r.name==="BIFailureError")throw r;return c.handleUnexpectedError(r,"send escalation notification"),!1}})}static scheduleDelayedNotification(t,e){return f(this,arguments,function*(i,r,a=this.DEFAULT_NOTIFICATION_DELAY){try{return yield v.scheduleDelayedNotification(i,r,a)}catch(n){if(n instanceof Error&&n.name==="BIFailureError")throw n;return c.handleUnexpectedError(n,"schedule delayed notification"),""}})}static getNotificationHistory(t){return f(this,null,function*(){try{g.validateIncidentId(t);const{data:e,error:i}=yield l.from("notifications").select("*").eq("incident_id",t).order("created_at",{ascending:!1});if(i){const r=i;throw new Error(`Failed to get notification history: ${r.message}`)}return e?(e||[]).map(r=>({id:r.id,incidentId:r.incident_id,facilityId:r.facility_id,severity:r.severity||"low",messageType:r.message_type||"internal",recipients:r.recipients||[],subject:r.subject,body:r.body,sentAt:r.sent_at||void 0,status:r.status||"pending",retryCount:r.retry_count,maxRetries:r.max_retries})):[]}catch(e){if(e instanceof Error&&e.name==="BIFailureError")throw e;return c.handleUnexpectedError(e,"get notification history"),[]}})}static retryFailedNotifications(t){return f(this,null,function*(){try{g.validateIncidentId(t);const e=yield this.getFailedNotifications(t);let i=0;for(const r of e)if(r.retryCount<r.maxRetries)try{yield h.sendNotification(r),i++,yield p.logNotificationAuditEvent(r.id,"retried",`Retry attempt ${r.retryCount+1}/${r.maxRetries}`,yield this.getCurrentUserId())}catch(a){yield p.logNotificationAuditEvent(r.id,"retry_failed",`Retry attempt ${r.retryCount+1} failed: ${a instanceof Error?a.message:"Unknown error"}`,yield this.getCurrentUserId())}return i}catch(e){if(e instanceof Error&&e.name==="BIFailureError")throw e;return c.handleUnexpectedError(e,"retry failed notifications"),0}})}static getIncidentDetails(t,e){return f(this,null,function*(){try{const{data:i,error:r}=yield l.from("bi_failure_incidents").select("*").eq("id",t).eq("facility_id",e).single();if(r){const n=r;throw new Error(`Failed to get incident details: ${n.message}`)}if(!i)throw new Error("Incident not found");const a=i;return{incidentNumber:a.incident_number,failureDate:a.failure_date,affectedToolsCount:a.affected_tools_count,failureReason:a.failure_reason||void 0}}catch(i){return{incidentNumber:`BI-FAIL-${t.substring(0,8)}`,failureDate:new Date().toISOString(),affectedToolsCount:0,failureReason:"Unknown"}}})}static getDefaultRecipients(){return f(this,null,function*(){try{const t=yield O.getCurrentFacilityId();if(!t)return["admin@facility.com","supervisor@facility.com"];const{data:e,error:i}=yield l.from("facility_staff").select("email").eq("facility_id",t).eq("is_active",!0).in("role",["admin","supervisor","manager"]);return i?["admin@facility.com","supervisor@facility.com"]:e?(e||[]).map(r=>r.email):["admin@facility.com","supervisor@facility.com"]}catch(t){return["admin@facility.com","supervisor@facility.com"]}})}static getFailedNotifications(t){return f(this,null,function*(){try{const{data:e,error:i}=yield l.from("notifications").select("*").eq("incident_id",t).eq("status","failed").lt("retry_count","max_retries");if(i){const r=i;throw new Error(`Failed to get failed notifications: ${r.message}`)}return e?(e||[]).map(r=>({id:r.id,incidentId:r.incident_id,facilityId:r.facility_id,severity:r.severity||"low",messageType:r.message_type||"internal",recipients:r.recipients||[],subject:r.subject,body:r.body,sentAt:r.sent_at||void 0,status:r.status||"pending",retryCount:r.retry_count,maxRetries:r.max_retries})):[]}catch(e){return[]}})}static updateIncidentNotificationStatus(t,e,i){return f(this,null,function*(){try{const r={regulatory_notification_sent:i,regulatory_notification_date:i?new Date().toISOString():null,updated_at:new Date().toISOString()},{error:a}=yield l.from("bi_failure_incidents").update(r).eq("id",t).eq("facility_id",e);a&&(global.__TESTING__||console.error("Failed to update incident notification status:",a))}catch(r){global.__TESTING__||console.error("Error updating incident notification status:",r)}})}static getCurrentUserId(){return f(this,null,function*(){try{const{data:{user:t}}=yield l.auth.getUser();return t==null?void 0:t.id}catch(t){return}})}}F.DEFAULT_NOTIFICATION_DELAY=30;F.MAX_RETRY_COUNT=3;export{F as BIFailureNotificationService};
