const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/js/main-Dcvo2fQ5.js","assets/js/utils-DSBVV_PW.js","assets/js/vendor-DoALFvsH.js","assets/js/login-C1ujRpW7.js","assets/js/data-73RVSc-N.js","assets/js/ui-DETUEJ2B.js","assets/js/errors-jP3Ij2gK.js","assets/css/main-xRcUIL95.css"])))=>i.map(i=>d[i]);
import{s as u,_ as w}from"./login-C1ujRpW7.js";import"./utils-DSBVV_PW.js";import"./vendor-DoALFvsH.js";import"./data-73RVSc-N.js";import"./ui-DETUEJ2B.js";var h=Object.defineProperty,v=Object.defineProperties,E=Object.getOwnPropertyDescriptors,z=Object.getOwnPropertySymbols,Q=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable,y=(d,e,t)=>e in d?h(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t,O=(d,e)=>{for(var t in e||(e={}))Q.call(e,t)&&y(d,t,e[t]);if(z)for(var t of z(e))P.call(e,t)&&y(d,t,e[t]);return d},U=(d,e)=>v(d,E(e)),l=(d,e,t)=>new Promise((r,s)=>{var i=c=>{try{a(t.next(c))}catch(n){s(n)}},o=c=>{try{a(t.throw(c))}catch(n){s(n)}},a=c=>c.done?r(c.value):Promise.resolve(c.value).then(i,o);a((t=t.apply(d,e)).next())});class C{static getQuizzesByCategory(e){return l(this,null,function*(){try{const{data:t,error:r}=yield u.from("knowledge_quizzes").select("*").eq("category_id",e).eq("is_active",!0).order("created_at",{ascending:!1});if(r)throw console.error("Error fetching quizzes:",r),new Error("Failed to fetch quizzes");return t?(t||[]).map(s=>{var i;return{id:s.id,title:s.title,description:s.description||((i=s.data)==null?void 0:i.description),category_id:s.category_id,facility_id:s.facility_id,passing_score:s.passing_score,time_limit_minutes:s.time_limit_minutes,is_active:s.is_active,created_at:s.created_at,updated_at:s.updated_at}}):[]}catch(t){return console.error("Error in getQuizzesByCategory:",t),[]}})}static getQuizWithQuestions(e){return l(this,null,function*(){try{const{data:t,error:r}=yield u.from("knowledge_quizzes").select("*").eq("id",e).eq("is_active",!0).single();if(r||!t)return console.error("Error fetching quiz:",r),null;const{data:s,error:i}=yield u.from("knowledge_quiz_questions").select("*").eq("quiz_id",e).eq("is_active",!0).order("question_order",{ascending:!0});if(i)return console.error("Error fetching quiz questions:",i),null;const o=t,a={id:o.id,title:o.title,description:o.description,category_id:o.category_id,facility_id:o.facility_id,passing_score:o.passing_score,time_limit_minutes:o.time_limit_minutes,is_active:o.is_active,created_at:o.created_at,updated_at:o.updated_at};if(!s)return null;const c=(s||[]).map(n=>({id:n.id,quiz_id:n.quiz_id,question_text:n.question_text,question_type:n.question_type||"multiple_choice",options:n.options||[],correct_answer:n.correct_answer||"",explanation:n.explanation,question_order:n.question_order,points:n.points,is_active:n.is_active,created_at:n.created_at,updated_at:n.updated_at}));return{quiz:a,questions:c}}catch(t){return console.error("Error in getQuizWithQuestions:",t),null}})}static startQuizAttempt(e,t){return l(this,null,function*(){try{const r=t||(yield this.getCurrentUserId());if(!r)throw new Error("User not authenticated");const s=yield this.getQuizWithQuestions(e);if(!s)throw new Error("Quiz not found or inactive");const{data:i}=yield u.from("knowledge_quiz_attempts").select("*").eq("user_id",r).eq("quiz_id",e).eq("status","started").single();if(i){const _=i;return{id:_.id,user_id:_.user_id,quiz_id:_.quiz_id,status:"started",score_percentage:_.score||0,total_questions:s.questions.length,correct_answers:0,started_at:_.started_at,completed_at:_.completed_at,time_spent_seconds:_.time_spent_minutes?_.time_spent_minutes*60:0,answers:_.answers}}const o={user_id:r,quiz_id:e,status:"started",score_percentage:0,total_questions:s.questions.length,correct_answers:0,started_at:new Date().toISOString()},{data:a,error:c}=yield u.from("knowledge_quiz_attempts").insert({user_id:o.user_id,quiz_id:o.quiz_id,started_at:o.started_at,answers:[]}).select().single();if(c)return console.error("Error starting quiz attempt:",c),null;if(!a)return null;const n=a;return{id:n.id,user_id:n.user_id,quiz_id:n.quiz_id,status:"started",score_percentage:0,total_questions:s.questions.length,correct_answers:0,started_at:n.started_at,completed_at:n.completed_at,time_spent_seconds:0,answers:n.answers}}catch(r){return console.error("Error in startQuizAttempt:",r),null}})}static submitQuizAttempt(e,t){return l(this,null,function*(){try{const{data:r,error:s}=yield u.from("knowledge_quiz_attempts").select("*").eq("id",e).single();if(s||!r)throw new Error("Quiz attempt not found");const i=r,o=yield this.getQuizWithQuestions(i.quiz_id);if(!o)throw new Error("Quiz not found");let a=0;const c=o.questions.length;for(const f of t){const q=o.questions.find(m=>m.id===f.question_id);q&&f.user_answer===q.correct_answer&&a++}const n=Math.round(a/c*100),_=n>=o.quiz.passing_score,p={status:"completed",score_percentage:n,correct_answers:a,completed_at:new Date().toISOString(),answers:t},{error:g}=yield u.from("knowledge_quiz_attempts").update({status:p.status,score_percentage:p.score_percentage,correct_answers:p.correct_answers,completed_at:p.completed_at,answers:p.answers}).eq("id",e);return g?(console.error("Error updating quiz attempt:",g),{success:!1,score:0,passed:!1}):{success:!0,score:n,passed:_}}catch(r){return console.error("Error in submitQuizAttempt:",r),{success:!1,score:0,passed:!1}}})}static getUserQuizAttempts(e){return l(this,null,function*(){try{const t=e||(yield this.getCurrentUserId());if(!t)throw new Error("User not authenticated");const{data:r,error:s}=yield u.from("knowledge_quiz_attempts").select("*").eq("user_id",t).order("started_at",{ascending:!1});return s?(console.error("Error fetching user quiz attempts:",s),[]):r?(r||[]).map(i=>({id:i.id,user_id:i.user_id,quiz_id:i.quiz_id,status:"started",score_percentage:i.score||0,total_questions:0,correct_answers:0,started_at:i.started_at,completed_at:i.completed_at,time_spent_seconds:i.time_spent_minutes?i.time_spent_minutes*60:0,answers:i.answers||[]})):[]}catch(t){return console.error("Error in getUserQuizAttempts:",t),[]}})}static getCurrentUserId(){return l(this,null,function*(){try{const{data:{user:e}}=yield u.auth.getUser();return(e==null?void 0:e.id)||null}catch(e){return console.error("Error getting current user:",e),null}})}static getAllQuizzes(){return l(this,null,function*(){try{const{data:e,error:t}=yield u.from("knowledge_quizzes").select("*").eq("is_active",!0).order("created_at",{ascending:!1});return t?(console.error("Error fetching all quizzes:",t),[]):e?(e||[]).map(r=>{var s;return{id:r.id,title:r.title,description:r.description||((s=r.data)==null?void 0:s.description),category_id:r.category_id,facility_id:r.facility_id,passing_score:r.passing_score,time_limit_minutes:r.time_limit_minutes,is_active:r.is_active,created_at:r.created_at,updated_at:r.updated_at}}):[]}catch(e){return console.error("Error in getAllQuizzes:",e),[]}})}static createQuiz(e){return l(this,null,function*(){try{if(!(yield this.getCurrentUserId()))throw new Error("User not authenticated");const{FacilityService:r}=yield w(()=>import("./main-Dcvo2fQ5.js").then(c=>c.k),__vite__mapDeps([0,1,2,3,4,5,6,7])),s=yield r.getCurrentFacilityId(),{data:i,error:o}=yield u.from("knowledge_quizzes").insert({title:e.title,description:e.description,category_id:e.category_id,facility_id:s,passing_score:e.passing_score,time_limit_minutes:e.time_limit_minutes,is_active:!0}).select().single();if(o)return console.error("Error creating quiz:",o),null;if(!i)return null;const a=i;return{id:a.id,title:a.title,description:a.description,category_id:a.category_id,facility_id:a.facility_id,passing_score:a.passing_score,time_limit_minutes:a.time_limit_minutes,is_active:a.is_active,created_at:a.created_at,updated_at:a.updated_at}}catch(t){return console.error("Error in createQuiz:",t),null}})}static updateQuiz(e,t){return l(this,null,function*(){try{const{data:r,error:s}=yield u.from("knowledge_quizzes").update(U(O({},t),{updated_at:new Date().toISOString()})).eq("id",e).select().single();if(s)return console.error("Error updating quiz:",s),null;if(!r)return null;const i=r;return{id:i.id,title:i.title,description:i.description,category_id:i.category_id,facility_id:i.facility_id,passing_score:i.passing_score,time_limit_minutes:i.time_limit_minutes,is_active:i.is_active,created_at:i.created_at,updated_at:i.updated_at}}catch(r){return console.error("Error in updateQuiz:",r),null}})}static deleteQuiz(e){return l(this,null,function*(){try{const{error:t}=yield u.from("knowledge_quizzes").delete().eq("id",e);return t?(console.error("Error deleting quiz:",t),!1):!0}catch(t){return console.error("Error in deleteQuiz:",t),!1}})}}export{C as QuizService};
