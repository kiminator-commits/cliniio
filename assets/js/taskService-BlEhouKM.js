import{s as h,t as m}from"./login-CScPvZaJ.js";import"./utils-5cl0BHpv.js";import"./vendor-DVtBqAv5.js";import"./data-Djiu4445.js";import"./ui-C2vLYFVP.js";var f=(p,e,s)=>new Promise((o,r)=>{var i=a=>{try{n(s.next(a))}catch(c){r(c)}},t=a=>{try{n(s.throw(a))}catch(c){r(c)}},n=a=>a.done?o(a.value):Promise.resolve(a.value).then(i,t);n((s=s.apply(p,e)).next())});class v{constructor(){this.cachedTasks=null,this.isLoading=!1,this.error=null,this.lastFetchTime=0,this.CACHE_DURATION=300*1e3,this.cachedUser=null,this.USER_CACHE_DURATION=120*1e3}getCachedUser(){return f(this,null,function*(){var e,s,o;const{data:{session:r}}=yield h.auth.getSession(),i=(s=(e=r==null?void 0:r.user)==null?void 0:e.app_metadata)==null?void 0:s.facility_id,t=(o=r==null?void 0:r.user)==null?void 0:o.id;if(!i)throw new Error("No authenticated facility ID found.");if(!t)throw new Error("No authenticated user ID found.");return{id:t,facility_id:i}})}fetchTasks(){return f(this,null,function*(){var e,s,o;const r=performance.now(),i=Date.now();if(this.cachedTasks&&i-this.lastFetchTime<this.CACHE_DURATION)return m()&&console.log(`[PERF] TaskService: Returning cached tasks in ${(performance.now()-r).toFixed(2)}ms`),this.cachedTasks;try{this.isLoading=!0,this.error=null;const{data:{session:t}}=yield h.auth.getSession(),n=(s=(e=t==null?void 0:t.user)==null?void 0:e.app_metadata)==null?void 0:s.facility_id,a=(o=t==null?void 0:t.user)==null?void 0:o.id;if(!n)throw new Error("No authenticated facility ID found.");if(!a)throw new Error("No authenticated user ID found.");const{data:c,error:l}=yield h.from("home_challenges").select("*").eq("facility_id",n).order("created_at",{ascending:!1});if(l)return console.error("Error fetching challenges:",l),this.error=l.message,[];const u=(c||[]).map(d=>({id:d.id,title:d.title,description:d.description||"",status:"pending",priority:"medium",due_date:void 0,created_at:d.created_at,updated_at:d.updated_at,user_id:a,facility_id:n,completed:!1})),{data:_}=yield h.from("home_challenge_completions").select("challenge_id").eq("user_id",a).eq("facility_id",n),y=new Set((_==null?void 0:_.map(d=>d.challenge_id))||[]);return u.forEach(d=>{d.completed=y.has(d.id)}),this.cachedTasks=u,this.lastFetchTime=i,m()&&console.log(`[PERF] TaskService: Fetched tasks in ${(performance.now()-r).toFixed(2)}ms`),u}catch(t){return this.error=t instanceof Error?t.message:"Failed to fetch tasks",console.error("TaskService fetch error:",t),[]}finally{this.isLoading=!1}})}getTasks(){return{tasks:this.cachedTasks||[],loading:this.isLoading,error:this.error}}updateTask(e){return f(this,null,function*(){var s,o,r;try{const{data:{session:i}}=yield h.auth.getSession(),t=(o=(s=i==null?void 0:i.user)==null?void 0:s.app_metadata)==null?void 0:o.facility_id,n=(r=i==null?void 0:i.user)==null?void 0:r.id;if(!t)throw new Error("No authenticated facility ID found.");if(!n)throw new Error("No authenticated user ID found.");const{data:a,error:c}=yield h.from("home_challenges").update({title:e.title,description:e.description,status:e.status,priority:e.priority,due_date:e.due_date,updated_at:new Date().toISOString()}).eq("id",e.id).eq("facility_id",t).select().single();if(c)throw new Error(`Failed to update task: ${c.message}`);const l=a;return this.cachedTasks&&(this.cachedTasks=this.cachedTasks.map(u=>u.id===e.id?l:u)),l}catch(i){throw console.error("Error updating task:",i),i}})}clearCache(){this.cachedTasks=null,this.cachedUser=null,this.lastFetchTime=0}setError(e){this.error=e}setLoading(e){this.isLoading=e}}const I=()=>new v,S=new v;export{I as createTaskService,S as taskService};
