import{s as p}from"./login-CtXU169Q.js";import"./utils-DSBVV_PW.js";import"./vendor-DoALFvsH.js";import"./data-73RVSc-N.js";import"./ui-DETUEJ2B.js";var E=Object.defineProperty,U=Object.defineProperties,O=Object.getOwnPropertyDescriptors,b=Object.getOwnPropertySymbols,R=Object.prototype.hasOwnProperty,z=Object.prototype.propertyIsEnumerable,S=(c,e,t)=>e in c?E(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t,$=(c,e)=>{for(var t in e||(e={}))R.call(e,t)&&S(c,t,e[t]);if(b)for(var t of b(e))z.call(e,t)&&S(c,t,e[t]);return c},D=(c,e)=>U(c,O(e));class N{calculateCoreLevel(e,t,r){const n=Math.min(e.totalPoints/100,50)*.4,o=Math.min(e.currentStreak/10,20)*.2,i=(e.totalTasks>0?e.completedTasks/e.totalTasks:0)*20*.2,s=(t.sterilization+t.inventory+t.environmental+t.knowledge)/4,l=Math.min(s/10,20)*.2,u=Math.min(r.filter(v=>v.unlocked).length*.5,10)*.1,d=n+o+i+l+u;return Math.max(1,Math.min(100,Math.floor(d)))}calculateLevelProgress(e,t){const r=this.getLevelThreshold(t),o=this.getLevelThreshold(t+1)-r,a=e-r;return Math.min(100,Math.max(0,a/o*100))}getLevelThreshold(e){return Math.pow(e,2)*500}getNextLevelThreshold(e){return this.getLevelThreshold(e+1)}getLevelName(e){return e>=90?"Legendary":e>=80?"Master":e>=70?"Expert":e>=60?"Advanced":e>=50?"Skilled":e>=40?"Competent":e>=30?"Proficient":e>=20?"Experienced":e>=10?"Novice":"Beginner"}getLevelColor(e){return e>=90?"#8B5CF6":e>=80?"#DC2626":e>=70?"#EA580C":e>=60?"#D97706":e>=50?"#059669":e>=40?"#0891B2":e>=30?"#2563EB":e>=20?"#7C3AED":e>=10?"#16A34A":"#6B7280"}getLevelBadge(e){return e>=90?"🏆":e>=80?"🥇":e>=70?"🥈":e>=60?"🥉":e>=50?"⭐":e>=40?"🌟":e>=30?"💎":e>=20?"🔮":e>=10?"🎯":"🌱"}getExperienceToNextLevel(e,t){const r=this.getNextLevelThreshold(t);return Math.max(0,r-e)}getTotalExperienceForLevel(e){return this.getLevelThreshold(e)}getLevelDistribution(e){const t=e.length;if(t===0)return{totalUsers:0,averageLevel:0,levelRanges:[],topLevel:0,medianLevel:0};const r=e.map(s=>s.level).sort((s,l)=>s-l),n=r.reduce((s,l)=>s+l,0)/t,o=Math.max(...r),a=r[Math.floor(t/2)],i=[{min:1,max:10,label:"Beginner (1-10)"},{min:11,max:20,label:"Novice (11-20)"},{min:21,max:30,label:"Experienced (21-30)"},{min:31,max:40,label:"Proficient (31-40)"},{min:41,max:50,label:"Competent (41-50)"},{min:51,max:60,label:"Skilled (51-60)"},{min:61,max:70,label:"Advanced (61-70)"},{min:71,max:80,label:"Expert (71-80)"},{min:81,max:90,label:"Master (81-90)"},{min:91,max:100,label:"Legendary (91-100)"}].map(s=>{const l=r.filter(u=>u>=s.min&&u<=s.max).length;return{range:s.label,count:l,percentage:l/t*100}});return{totalUsers:t,averageLevel:n,levelRanges:i,topLevel:o,medianLevel:a}}validateLevelData(e){const t=[];return e.coreLevel!==void 0&&(e.coreLevel<1||e.coreLevel>100)&&t.push("Core level must be between 1 and 100"),e.totalExperience!==void 0&&e.totalExperience<0&&t.push("Total experience cannot be negative"),e.levelProgress!==void 0&&(e.levelProgress<0||e.levelProgress>100)&&t.push("Level progress must be between 0 and 100"),e.nextLevelThreshold!==void 0&&e.nextLevelThreshold<0&&t.push("Next level threshold cannot be negative"),e.rank!==void 0&&e.rank<1&&t.push("Rank must be at least 1"),{isValid:t.length===0,errors:t}}getLevelMilestones(){return[{level:10,name:"First Steps",description:"Complete your first 10 levels",reward:"Unlock advanced features",threshold:this.getLevelThreshold(10)},{level:25,name:"Rising Star",description:"Reach level 25",reward:"Custom avatar options",threshold:this.getLevelThreshold(25)},{level:50,name:"Halfway Hero",description:"Reach the halfway point",reward:"Exclusive badge",threshold:this.getLevelThreshold(50)},{level:75,name:"Elite Performer",description:"Reach level 75",reward:"Premium features access",threshold:this.getLevelThreshold(75)},{level:100,name:"Legendary Status",description:"Reach the maximum level",reward:"Legendary status and recognition",threshold:this.getLevelThreshold(100)}]}hasReachedMilestone(e,t){return e>=t}getNextMilestone(e){const r=this.getLevelMilestones().find(o=>o.level>e);if(!r)return null;const n=Math.min(100,e/r.level*100);return D($({},r),{progress:n})}getLevelBonusMultiplier(e){return 1+e*.01}calculatePrestigeLevel(e){if(e<=100)return{prestigeLevel:0,prestigePoints:0,baseLevel:e};const t=Math.floor((e-100)/10)+1,r=(e-100)%10,n=e%100||100;return{prestigeLevel:t,prestigePoints:r,baseLevel:n}}}var k=(c,e,t)=>new Promise((r,n)=>{var o=s=>{try{i(t.next(s))}catch(l){n(l)}},a=s=>{try{i(t.throw(s))}catch(l){n(l)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(o,a);i((t=t.apply(c,e)).next())});class I{calculateSkillLevels(e,t){return k(this,null,function*(){try{const r=yield this.calculateSterilizationLevel(t),n=yield this.calculateInventoryLevel(t),o=yield this.calculateEnvironmentalLevel(t),a=yield this.calculateKnowledgeLevel(e),i=Math.round(r*.3+n*.25+o*.25+a*.2);return{sterilization:r,inventory:n,environmental:o,knowledge:a,overall:i}}catch(r){return console.error("Error calculating skill levels:",r),{sterilization:1,inventory:1,environmental:1,knowledge:1,overall:1}}})}calculateSterilizationLevel(e){return k(this,null,function*(){try{const{data:t}=yield p.from("sterilization_cycles").select("id, status, tools").eq("facility_id",e),{data:r}=yield p.from("bi_test_results").select("id, result").eq("facility_id",e);if(!t||!r)return 1;const n=t,o=r,a=(n==null?void 0:n.filter(g=>g.status==="active").length)||0,i=(n==null?void 0:n.length)||0,s=o&&o.length>0?o.filter(g=>g.result==="pass").length/o.length:0,l=(n==null?void 0:n.reduce((g,y)=>{var P;return g+(((P=y.tools)==null?void 0:P.length)||0)},0))||0,u=Math.min(a/Math.max(i,1)*40,40),d=s*30,v=Math.min(l/100*20,20),m=i>0?Math.min(a/i*10,10):0,h=u+d+v+m;return Math.max(1,Math.min(100,Math.round(h)))}catch(t){return console.error("Error calculating sterilization level:",t),1}})}calculateInventoryLevel(e){return k(this,null,function*(){try{const{data:t}=yield p.from("inventory_checks").select("id, accuracy, items_checked").eq("facility_id",e),{data:r}=yield p.from("inventory_orders").select("id, status, total_items").eq("facility_id",e);if(!t||!r)return 1;const n=t,o=r,a=n&&n.length>0?n.reduce((g,y)=>g+y.accuracy,0)/n.length:0,i=(n==null?void 0:n.reduce((g,y)=>g+y.items_checked,0))||0,s=(o==null?void 0:o.filter(g=>g.status==="active").length)||0,l=(o==null?void 0:o.length)||0,u=a*.4,d=Math.min(i/500*30,30),v=l>0?s/l*20:0,m=t&&t.length>0?Math.min(t.length/10,10):0,h=u+d+v+m;return Math.max(1,Math.min(100,Math.round(h)))}catch(t){return console.error("Error calculating inventory level:",t),1}})}calculateEnvironmentalLevel(e){return k(this,null,function*(){try{const{data:t}=yield p.from("cleaning_tasks").select("id, status, room_id, compliance_score").eq("facility_id",e);if(!t)return 1;const r=t,n=(r==null?void 0:r.filter(m=>m.status==="active").length)||0,o=(r==null?void 0:r.length)||0,a=r&&r.length>0?r.reduce((m,h)=>m+h.compliance_score,0)/r.length:0,i=new Set(r==null?void 0:r.map(m=>m.room_id)).size,s=o>0?n/o*40:0,l=a*.3,u=Math.min(i/20*20,20),d=o>0?Math.min(n/o*10,10):0,v=s+l+u+d;return Math.max(1,Math.min(100,Math.round(v)))}catch(t){return console.error("Error calculating environmental level:",t),1}})}calculateKnowledgeLevel(e){return k(this,null,function*(){try{const{data:t}=yield p.from("user_learning_progress").select("score, time_spent_minutes").eq("user_id",e),{data:r}=yield p.from("user_certifications").select("expiry_date").eq("user_id",e);if(!t||!r)return 1;const n=t,o=r,a=(n==null?void 0:n.length)||0,i=(n==null?void 0:n.reduce((h,g)=>h+g.time_spent_minutes,0))||0,s=(o==null?void 0:o.filter(h=>new Date(h.expiry_date)>new Date).length)||0,l=Math.min(a/20*40,40),u=Math.min(s/5*30,30),d=Math.min(i/1e3*20,20),v=s>0?10:0,m=l+u+d+v;return Math.max(1,Math.min(100,Math.round(m)))}catch(t){return console.error("Error calculating knowledge level:",t),1}})}getSkillLevelName(e){return e>=90?"Master":e>=80?"Expert":e>=70?"Advanced":e>=60?"Proficient":e>=50?"Competent":e>=40?"Skilled":e>=30?"Experienced":e>=20?"Developing":e>=10?"Novice":"Beginner"}getSkillLevelColor(e){return e>=90?"#8B5CF6":e>=80?"#DC2626":e>=70?"#EA580C":e>=60?"#D97706":e>=50?"#059669":e>=40?"#0891B2":e>=30?"#2563EB":e>=20?"#7C3AED":e>=10?"#16A34A":"#6B7280"}getSkillLevelIcon(e,t){const n={sterilization:["🧪","🔬","⚗️","🧬","💊"],inventory:["📦","📋","📊","🗂️","📈"],environmental:["🧽","🧴","🌿","✨","🏆"],knowledge:["📚","🎓","💡","🧠","🌟"]}[e],o=Math.min(Math.floor(t/20),n.length-1);return n[o]}calculateSkillImprovementRate(e,t){return{sterilization:e.sterilization-t.sterilization,inventory:e.inventory-t.inventory,environmental:e.environmental-t.environmental,knowledge:e.knowledge-t.knowledge,overall:e.overall-t.overall}}getSkillRecommendations(e){const t=[];return["sterilization","inventory","environmental","knowledge"].forEach(n=>{const o=e[n];let a="",i="low";o<20?(a=`Focus on ${n} basics to improve your foundation`,i="high"):o<40?(a=`Practice more ${n} tasks to reach intermediate level`,i="medium"):o<60?(a=`Continue ${n} practice to achieve proficiency`,i="medium"):o<80?(a=`Master advanced ${n} techniques`,i="low"):(a=`Maintain your expert ${n} level`,i="low"),t.push({skill:n,currentLevel:o,recommendation:a,priority:i})}),t.sort((n,o)=>{const a={high:3,medium:2,low:1};return a[o.priority]-a[n.priority]})}validateSkillLevels(e){const t=[];return["sterilization","inventory","environmental","knowledge","overall"].forEach(n=>{const o=e[n];o!==void 0&&(o<1||o>100)&&t.push(`${n} level must be between 1 and 100`)}),{isValid:t.length===0,errors:t}}getSkillLevelStatistics(e){if(e.length===0)return{averageLevels:{sterilization:0,inventory:0,environmental:0,knowledge:0,overall:0},highestLevels:{sterilization:0,inventory:0,environmental:0,knowledge:0,overall:0},lowestLevels:{sterilization:0,inventory:0,environmental:0,knowledge:0,overall:0},distribution:{sterilization:[],inventory:[],environmental:[],knowledge:[],overall:[]}};const t=["sterilization","inventory","environmental","knowledge","overall"],r={sterilization:0,inventory:0,environmental:0,knowledge:0,overall:0},n={sterilization:0,inventory:0,environmental:0,knowledge:0,overall:0},o={sterilization:100,inventory:100,environmental:100,knowledge:100,overall:100},a={sterilization:[],inventory:[],environmental:[],knowledge:[],overall:[]};return t.forEach(i=>{const s=e.map(m=>m[i]),l=s.reduce((m,h)=>m+h,0),u=Math.max(...s),d=Math.min(...s);r[i]=l/e.length,n[i]=u,o[i]=d;const v=[{min:1,max:20,label:"1-20"},{min:21,max:40,label:"21-40"},{min:41,max:60,label:"41-60"},{min:61,max:80,label:"61-80"},{min:81,max:100,label:"81-100"}];a[i]=v.map(m=>({range:m.label,count:s.filter(h=>h>=m.min&&h<=m.max).length}))}),{averageLevels:r,highestLevels:n,lowestLevels:o,distribution:a}}}var q=Object.defineProperty,B=Object.defineProperties,j=Object.getOwnPropertyDescriptors,T=Object.getOwnPropertySymbols,V=Object.prototype.hasOwnProperty,F=Object.prototype.propertyIsEnumerable,x=(c,e,t)=>e in c?q(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t,J=(c,e)=>{for(var t in e||(e={}))V.call(e,t)&&x(c,t,e[t]);if(T)for(var t of T(e))F.call(e,t)&&x(c,t,e[t]);return c},G=(c,e)=>B(c,j(e)),K=(c,e,t)=>new Promise((r,n)=>{var o=s=>{try{i(t.next(s))}catch(l){n(l)}},a=s=>{try{i(t.throw(s))}catch(l){n(l)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(o,a);i((t=t.apply(c,e)).next())});class H{getUserAchievements(){return K(this,null,function*(){try{return this.getDefaultAchievements()}catch(e){return console.error("Error getting achievements:",e),this.getDefaultAchievements()}})}getDefaultAchievements(){return[{id:"first_task",name:"First Steps",description:"Complete your first task",category:"general",points:10,unlocked:!1,icon:"🎯"},{id:"week_warrior",name:"Week Warrior",description:"Maintain a 7-day streak",category:"general",points:25,unlocked:!1,icon:"🔥"},{id:"sterilization_master",name:"Sterilization Master",description:"Complete 100 sterilization cycles",category:"sterilization",points:50,unlocked:!1,icon:"🧪"},{id:"inventory_expert",name:"Inventory Expert",description:"Achieve 95% inventory accuracy",category:"inventory",points:50,unlocked:!1,icon:"📦"},{id:"environmental_champion",name:"Environmental Champion",description:"Complete 50 environmental cleaning tasks",category:"environmental",points:40,unlocked:!1,icon:"🧽"},{id:"knowledge_seeker",name:"Knowledge Seeker",description:"Complete 10 learning modules",category:"knowledge",points:30,unlocked:!1,icon:"📚"},{id:"streak_master",name:"Streak Master",description:"Maintain a 30-day streak",category:"general",points:100,unlocked:!1,icon:"⚡"},{id:"perfectionist",name:"Perfectionist",description:"Achieve 100% completion rate for a week",category:"general",points:75,unlocked:!1,icon:"💎"}]}checkAchievementUnlock(e,t){if(!this.getDefaultAchievements().find(n=>n.id===e))return!1;switch(e){case"first_task":return t.totalTasks>=1;case"week_warrior":return t.currentStreak>=7;case"sterilization_master":return(t.sterilizationCycles||0)>=100;case"inventory_expert":return(t.inventoryAccuracy||0)>=95;case"environmental_champion":return(t.environmentalTasks||0)>=50;case"knowledge_seeker":return(t.learningModules||0)>=10;case"streak_master":return t.currentStreak>=30;case"perfectionist":return t.totalTasks>0&&t.completedTasks/t.totalTasks===1;default:return!1}}getNewlyUnlockedAchievements(e,t){const r=[];return this.getDefaultAchievements().forEach(o=>{var a;const i=((a=e.find(l=>l.id===o.id))==null?void 0:a.unlocked)||!1,s=this.checkAchievementUnlock(o.id,t);!i&&s&&r.push(G(J({},o),{unlocked:!0,unlockedAt:new Date}))}),r}getAchievementsByCategory(e,t){return e.filter(r=>r.category===t)}getUnlockedAchievements(e){return e.filter(t=>t.unlocked)}getLockedAchievements(e){return e.filter(t=>!t.unlocked)}getAchievementProgress(e,t){let r=0,n=0;switch(e){case"first_task":r=t.totalTasks,n=1;break;case"week_warrior":r=t.currentStreak,n=7;break;case"sterilization_master":r=t.sterilizationCycles||0,n=100;break;case"inventory_expert":r=t.inventoryAccuracy||0,n=95;break;case"environmental_champion":r=t.environmentalTasks||0,n=50;break;case"knowledge_seeker":r=t.learningModules||0,n=10;break;case"streak_master":r=t.currentStreak,n=30;break;case"perfectionist":r=t.totalTasks>0?Math.round(t.completedTasks/t.totalTasks*100):0,n=100;break;default:r=0,n=1}const o=n>0?Math.min(100,r/n*100):0,a=r>=n;return{current:r,target:n,progress:o,isComplete:a}}getAchievementStatistics(e){const t=e.length,r=e.filter(l=>l.unlocked).length,n=t-r,o=e.reduce((l,u)=>l+u.points,0),a=e.filter(l=>l.unlocked).reduce((l,u)=>l+u.points,0),i={};e.forEach(l=>{i[l.category]||(i[l.category]={total:0,unlocked:0,points:0}),i[l.category].total++,i[l.category].points+=l.points,l.unlocked&&i[l.category].unlocked++});const s=t>0?r/t*100:0;return{totalAchievements:t,unlockedAchievements:r,lockedAchievements:n,totalPoints:o,unlockedPoints:a,byCategory:i,completionRate:s}}getAchievementRecommendations(e,t){const r=this.getLockedAchievements(e),n=[];return r.forEach(o=>{const a=this.getAchievementProgress(o.id,t);let i="low",s="Unknown";a.progress>=80?(i="high",s="Very soon"):a.progress>=50?(i="medium",s="Soon"):a.progress>=20?(i="medium",s="Moderate effort needed"):(i="low",s="Long-term goal"),n.push({achievement:o,progress:a.progress,priority:i,estimatedTimeToUnlock:s})}),n.sort((o,a)=>{const i={high:3,medium:2,low:1};return i[o.priority]!==i[a.priority]?i[a.priority]-i[o.priority]:a.progress-o.progress})}validateAchievement(e){const t=[];return(!e.id||e.id.trim()==="")&&t.push("Achievement ID is required"),(!e.name||e.name.trim()==="")&&t.push("Achievement name is required"),(!e.description||e.description.trim()==="")&&t.push("Achievement description is required"),e.category?["sterilization","inventory","environmental","knowledge","general"].includes(e.category)||t.push(`Invalid category: ${e.category}`):t.push("Achievement category is required"),e.points!==void 0&&e.points<0&&t.push("Achievement points cannot be negative"),(!e.icon||e.icon.trim()==="")&&t.push("Achievement icon is required"),{isValid:t.length===0,errors:t}}getAchievementCategories(){return[{value:"general",label:"General",description:"General achievements and milestones",icon:"🏆"},{value:"sterilization",label:"Sterilization",description:"Sterilization-related achievements",icon:"🧪"},{value:"inventory",label:"Inventory",description:"Inventory management achievements",icon:"📦"},{value:"environmental",label:"Environmental",description:"Environmental cleaning achievements",icon:"🧽"},{value:"knowledge",label:"Knowledge",description:"Learning and knowledge achievements",icon:"📚"}]}exportAchievements(e){return JSON.stringify(e,null,2)}importAchievements(e){try{const t=JSON.parse(e);if(!Array.isArray(t))return{success:!1,achievements:[],errors:["Invalid format: expected array of achievements"]};const r=[],n=[];return t.forEach((o,a)=>{const i=this.validateAchievement(o);i.isValid?n.push(o):r.push(`Achievement ${a+1}: ${i.errors.join(", ")}`)}),{success:r.length===0,achievements:n,errors:r}}catch(t){return{success:!1,achievements:[],errors:["Invalid JSON format"]}}}}var _=(c,e,t)=>new Promise((r,n)=>{var o=s=>{try{i(t.next(s))}catch(l){n(l)}},a=s=>{try{i(t.throw(s))}catch(l){n(l)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(o,a);i((t=t.apply(c,e)).next())});class W{calculateUserRank(e,t){return _(this,null,function*(){try{const{data:r}=yield p.from("users").select("id, total_points").eq("facility_id",t).not("total_points","is",null);if(!r||r.length===0)return 1;const a=r.sort((i,s)=>(s.total_points||0)-(i.total_points||0)).findIndex(i=>i.id===e);return a===-1?r.length:a+1}catch(r){return console.error("Error calculating user rank:",r),1}})}calculateSkillRankings(){return _(this,null,function*(){try{return{sterilization:1,inventory:1,environmental:1,knowledge:1}}catch(e){return console.error("Error calculating skill rankings:",e),{sterilization:1,inventory:1,environmental:1,knowledge:1}}})}getFacilityLeaderboard(e,t=10){return _(this,null,function*(){try{const{data:r}=yield p.from("users").select("id, full_name, total_points").eq("facility_id",e).not("total_points","is",null).order("total_points",{ascending:!1}).limit(t);return r?r.map((n,o)=>({userId:n.id,userName:n.full_name||"Unknown User",rank:o+1,points:n.total_points||0,level:this.calculateLevelFromPoints(n.total_points||0)})):[]}catch(r){return console.error("Error getting facility leaderboard:",r),[]}})}getUserLeaderboardPosition(e,t){return _(this,null,function*(){try{const{data:r}=yield p.from("users").select("id, total_points").eq("facility_id",t).not("total_points","is",null);if(!r||r.length===0)return{rank:1,totalUsers:0,percentile:100,aboveUsers:0,belowUsers:0};const a=r.sort((d,v)=>(v.total_points||0)-(d.total_points||0)).findIndex(d=>d.id===e)+1,i=r.length,s=(i-a+1)/i*100,l=a-1,u=i-a;return{rank:a,totalUsers:i,percentile:s,aboveUsers:l,belowUsers:u}}catch(r){return console.error("Error getting user leaderboard position:",r),{rank:1,totalUsers:0,percentile:100,aboveUsers:0,belowUsers:0}}})}getSkillRankings(e,t,r=10){return _(this,null,function*(){try{return{skill:t,rankings:[]}}catch(n){return console.error("Error getting skill rankings:",n),{skill:t,rankings:[]}}})}getRankingStatistics(e){if(e.length===0)return{totalUsers:0,averagePoints:0,medianPoints:0,topPoints:0,bottomPoints:0,distribution:[]};const t=e.map(u=>u.points).sort((u,d)=>u-d),r=e.length,n=t.reduce((u,d)=>u+d,0)/r,o=t[Math.floor(r/2)],a=Math.max(...t),i=Math.min(...t),l=[{min:0,max:100,label:"0-100"},{min:101,max:500,label:"101-500"},{min:501,max:1e3,label:"501-1000"},{min:1001,max:2500,label:"1001-2500"},{min:2501,max:5e3,label:"2501-5000"},{min:5001,max:1/0,label:"5000+"}].map(u=>{const d=t.filter(v=>v>=u.min&&v<=u.max).length;return{range:u.label,count:d,percentage:d/r*100}});return{totalUsers:r,averagePoints:n,medianPoints:o,topPoints:a,bottomPoints:i,distribution:l}}getRankingTrends(e,t){const r=[];return e.forEach(n=>{const o=t.find(l=>l.userId===n.userId),a=(o==null?void 0:o.rank)||e.length+1,i=a-n.rank;let s="stable";i>0?s="up":i<0&&(s="down"),r.push({userId:n.userId,userName:n.userName,currentRank:n.rank,previousRank:a,rankChange:i,trend:s})}),r.sort((n,o)=>Math.abs(o.rankChange)-Math.abs(n.rankChange))}getRankingBadges(e){const t=[];return e===1?t.push({type:"rank",name:"Champion",description:"Ranked #1 in facility",icon:"🥇"}):e<=3?t.push({type:"rank",name:"Top Performer",description:"Ranked in top 3",icon:"🏆"}):e<=10?t.push({type:"rank",name:"Elite",description:"Ranked in top 10",icon:"⭐"}):e<=25&&t.push({type:"rank",name:"Advanced",description:"Ranked in top 25",icon:"🎯"}),t}calculateLevelFromPoints(e){return Math.max(1,Math.floor(Math.sqrt(e/500)))}getRankingCategories(){return[{value:"overall",label:"Overall",description:"Overall facility ranking",icon:"🏆"},{value:"sterilization",label:"Sterilization",description:"Sterilization skill ranking",icon:"🧪"},{value:"inventory",label:"Inventory",description:"Inventory management ranking",icon:"📦"},{value:"environmental",label:"Environmental",description:"Environmental cleaning ranking",icon:"🧽"},{value:"knowledge",label:"Knowledge",description:"Learning and knowledge ranking",icon:"📚"}]}validateRankingData(e){const t=[];return(!e.userId||e.userId.trim()==="")&&t.push("User ID is required"),(!e.userName||e.userName.trim()==="")&&t.push("User name is required"),e.rank!==void 0&&e.rank<1&&t.push("Rank must be at least 1"),e.points!==void 0&&e.points<0&&t.push("Points cannot be negative"),e.level!==void 0&&(e.level<1||e.level>100)&&t.push("Level must be between 1 and 100"),{isValid:t.length===0,errors:t}}exportRankings(e){return JSON.stringify(e,null,2)}importRankings(e){try{const t=JSON.parse(e);if(!Array.isArray(t))return{success:!1,rankings:[],errors:["Invalid format: expected array of rankings"]};const r=[],n=[];return t.forEach((o,a)=>{const i=this.validateRankingData(o);i.isValid?n.push(o):r.push(`Ranking ${a+1}: ${i.errors.join(", ")}`)}),{success:r.length===0,rankings:n,errors:r}}catch(t){return{success:!1,rankings:[],errors:["Invalid JSON format"]}}}}var Q=Object.defineProperty,X=Object.defineProperties,Y=Object.getOwnPropertyDescriptors,L=Object.getOwnPropertySymbols,Z=Object.prototype.hasOwnProperty,ee=Object.prototype.propertyIsEnumerable,M=(c,e,t)=>e in c?Q(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t,te=(c,e)=>{for(var t in e||(e={}))Z.call(e,t)&&M(c,t,e[t]);if(L)for(var t of L(e))ee.call(e,t)&&M(c,t,e[t]);return c},re=(c,e)=>X(c,Y(e)),f=(c,e,t)=>new Promise((r,n)=>{var o=s=>{try{i(t.next(s))}catch(l){n(l)}},a=s=>{try{i(t.throw(s))}catch(l){n(l)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(o,a);i((t=t.apply(c,e)).next())});class ne{getUserCumulativeStats(e){return f(this,null,function*(){try{const{data:t}=yield p.from("user_gamification_stats").select("*").eq("facility_id",e).single();if(!t)return{totalPoints:0,currentStreak:0,totalTasks:0,completedTasks:0};const r=t;return{totalPoints:r.total_points||0,currentStreak:r.current_streak||0,totalTasks:r.total_tasks||0,completedTasks:r.completed_tasks||0}}catch(t){return console.error("Error getting user stats:",t),{totalPoints:0,currentStreak:0,totalTasks:0,completedTasks:0}}})}updateUserStats(e,t){return f(this,null,function*(){try{const{error:r}=yield p.from("user_gamification_stats").upsert(re(te({facility_id:e},t),{updated_at:new Date().toISOString()}));if(r)throw r;return!0}catch(r){return console.error("Error updating user stats:",r),!1}})}addPoints(e,t,r){return f(this,null,function*(){try{const o=(yield this.getUserCumulativeStats(e)).totalPoints+t,a=yield this.updateUserStats(e,{totalPoints:o});return a&&r&&(yield this.logPointsActivity(e,t,r)),a}catch(n){return console.error("Error adding points:",n),!1}})}updateStreak(e,t=!0){return f(this,null,function*(){try{const r=yield this.getUserCumulativeStats(e),n=t?r.currentStreak+1:0;return yield this.updateUserStats(e,{currentStreak:n})}catch(r){return console.error("Error updating streak:",r),!1}})}completeTask(e,t=10){return f(this,null,function*(){try{const r=yield this.getUserCumulativeStats(e),n={completedTasks:r.completedTasks+1,totalPoints:r.totalPoints+t};return yield this.updateUserStats(e,n)}catch(r){return console.error("Error completing task:",r),!1}})}getFacilityMetrics(e){return f(this,null,function*(){try{const{data:t}=yield p.from("users").select("id, full_name, total_points").eq("facility_id",e).not("total_points","is",null);if(!t||t.length===0)return{totalUsers:0,averagePoints:0,averageLevel:0,totalTasksCompleted:0,averageStreak:0,topPerformer:{userId:"",userName:"",points:0},activityTrends:{daily:[],weekly:[],monthly:[]}};const r=t.length,n=t.reduce((l,u)=>l+(u.total_points||0),0),o=n/r,a=this.calculateAverageLevel(t.map(l=>l.total_points||0)),i=t.reduce((l,u)=>(u.total_points||0)>(l.total_points||0)?u:l),s=yield this.getActivityTrends(e);return{totalUsers:r,averagePoints:o,averageLevel:a,totalTasksCompleted:n/10,averageStreak:0,topPerformer:{userId:i.id,userName:i.full_name||"Unknown",points:i.total_points||0},activityTrends:s}}catch(t){return console.error("Error getting facility metrics:",t),{totalUsers:0,averagePoints:0,averageLevel:0,totalTasksCompleted:0,averageStreak:0,topPerformer:{userId:"",userName:"",points:0},activityTrends:{daily:[],weekly:[],monthly:[]}}}})}getUserPerformanceComparison(e,t){return f(this,null,function*(){try{const r=yield this.getUserCumulativeStats(t),n=yield this.getFacilityMetrics(t),o={totalPoints:n.averagePoints,currentStreak:n.averageStreak,totalTasks:n.totalTasksCompleted,completedTasks:n.totalTasksCompleted},{data:a}=yield p.from("users").select("id, total_points").eq("facility_id",t).not("total_points","is",null);if(!a||a.length===0)return{userStats:r,facilityAverage:o,percentile:100,rank:1,totalUsers:0};const l=a.sort((d,v)=>(v.total_points||0)-(d.total_points||0)).findIndex(d=>d.id===e)+1,u=(a.length-l+1)/a.length*100;return{userStats:r,facilityAverage:o,percentile:u,rank:l,totalUsers:a.length}}catch(r){return console.error("Error getting user performance comparison:",r),{userStats:{totalPoints:0,currentStreak:0,totalTasks:0,completedTasks:0},facilityAverage:{totalPoints:0,currentStreak:0,totalTasks:0,completedTasks:0},percentile:50,rank:1,totalUsers:0}}})}getActivityTrends(e){return f(this,null,function*(){return{daily:Array.from({length:7},()=>Math.floor(Math.random()*20)+5),weekly:Array.from({length:4},()=>Math.floor(Math.random()*100)+50),monthly:Array.from({length:12},()=>Math.floor(Math.random()*500)+200)}})}logPointsActivity(e,t,r){return f(this,null,function*(){try{console.log(`Points activity logged: ${t} points for ${r} (facility: ${e})`)}catch(n){console.error("Error logging points activity:",n)}})}calculateAverageLevel(e){const t=e.map(r=>Math.max(1,Math.floor(Math.sqrt(r/500))));return t.reduce((r,n)=>r+n,0)/t.length}getStatsSummary(e){const t=e.totalTasks>0?e.completedTasks/e.totalTasks*100:0,r=e.completedTasks>0?e.totalPoints/e.completedTasks:0;let n="new";e.currentStreak>0?n="active":e.totalTasks>0&&(n="broken");let o="needs_improvement";return t>=90?o="excellent":t>=75?o="good":t>=50&&(o="average"),{completionRate:t,averagePointsPerTask:r,streakStatus:n,performanceLevel:o}}getPerformanceRecommendations(e){const t=[];return(e.totalTasks>0?e.completedTasks/e.totalTasks*100:0)<50&&t.push({category:"Task Completion",recommendation:"Focus on completing more tasks to improve your completion rate",priority:"high"}),e.currentStreak<3&&t.push({category:"Consistency",recommendation:"Try to maintain a daily streak to build momentum",priority:"medium"}),e.totalPoints<100&&t.push({category:"Engagement",recommendation:"Complete more tasks to earn points and level up",priority:"medium"}),e.totalTasks===0&&t.push({category:"Getting Started",recommendation:"Start completing tasks to begin your gamification journey",priority:"high"}),t}validateStatsData(e){const t=[];return e.totalPoints!==void 0&&e.totalPoints<0&&t.push("Total points cannot be negative"),e.currentStreak!==void 0&&e.currentStreak<0&&t.push("Current streak cannot be negative"),e.totalTasks!==void 0&&e.totalTasks<0&&t.push("Total tasks cannot be negative"),e.completedTasks!==void 0&&e.completedTasks<0&&t.push("Completed tasks cannot be negative"),e.totalTasks!==void 0&&e.completedTasks!==void 0&&e.completedTasks>e.totalTasks&&t.push("Completed tasks cannot exceed total tasks"),{isValid:t.length===0,errors:t}}exportStatsData(e){return JSON.stringify(e,null,2)}importStatsData(e){try{const t=JSON.parse(e),r=this.validateStatsData(t);return{success:r.isValid,stats:r.isValid?t:null,errors:r.errors}}catch(t){return{success:!1,stats:null,errors:["Invalid JSON format"]}}}}var oe=(c,e,t)=>new Promise((r,n)=>{var o=s=>{try{i(t.next(s))}catch(l){n(l)}},a=s=>{try{i(t.throw(s))}catch(l){n(l)}},i=s=>s.done?r(s.value):Promise.resolve(s.value).then(o,a);i((t=t.apply(c,e)).next())});const w=new N,ie=new I,C=new H,A=new W,se=new ne;function ve(c,e){return oe(this,null,function*(){try{const t=yield se.getUserCumulativeStats(e),r=yield ie.calculateSkillLevels(c,e),n=yield C.getUserAchievements(),o=w.calculateCoreLevel(t,r,n),a=w.calculateLevelProgress(t.totalPoints,o),i=w.getNextLevelThreshold(o),s=yield A.calculateUserRank(c,e),l=yield A.calculateSkillRankings();return{coreLevel:o,skillLevels:r,achievements:n,totalExperience:t.totalPoints,levelProgress:a,nextLevelThreshold:i,rank:s,skillRankings:l}}catch(t){return console.error("Error calculating enhanced level:",t),ae()}})}function ae(){return{coreLevel:1,skillLevels:{sterilization:1,inventory:1,environmental:1,knowledge:1,overall:1},achievements:C.getDefaultAchievements(),totalExperience:0,levelProgress:0,nextLevelThreshold:w.getNextLevelThreshold(1),rank:1,skillRankings:{sterilization:1,inventory:1,environmental:1,knowledge:1}}}export{ve as calculateEnhancedLevel};
