const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/js/main-RuFFPtZZ.js","assets/js/utils-5cl0BHpv.js","assets/js/vendor-DVtBqAv5.js","assets/js/login-CScPvZaJ.js","assets/js/data-Djiu4445.js","assets/js/ui-C2vLYFVP.js","assets/js/errors-89nfNYWX.js","assets/css/main-Cx7hEqqr.css"])))=>i.map(i=>d[i]);
import{s as d,_ as C,l as p}from"./login-CScPvZaJ.js";import{C as I}from"./main-RuFFPtZZ.js";import{aiTimeSavingsService as P}from"./aiTimeSavingsService-BiMWeimX.js";import"./utils-5cl0BHpv.js";import"./vendor-DVtBqAv5.js";import"./data-Djiu4445.js";import"./ui-C2vLYFVP.js";import"./errors-89nfNYWX.js";function O(c){return c.toISOString().split("T")[0]}var A=(c,t,e)=>new Promise((a,n)=>{var o=i=>{try{r(e.next(i))}catch(s){n(s)}},l=i=>{try{r(e.throw(i))}catch(s){n(s)}},r=i=>i.done?a(i.value):Promise.resolve(i.value).then(o,l);r((e=e.apply(c,t)).next())});function E(c,t){return A(this,null,function*(){const{data:e}=yield d.from("performance_metrics").select("*").eq("date",c).eq("facility_id",t);return e||[]})}var q=(c,t,e)=>new Promise((a,n)=>{var o=i=>{try{r(e.next(i))}catch(s){n(s)}},l=i=>{try{r(e.throw(i))}catch(s){n(s)}},r=i=>i.done?a(i.value):Promise.resolve(i.value).then(o,l);r((e=e.apply(c,t)).next())});function z(){return q(this,null,function*(){try{const c=yield I.getAIImpactMetrics();return{monthly:c.costSavings.monthly,annual:c.costSavings.annual}}catch(c){return console.warn("Failed to get AI impact metrics for cost savings:",c),{monthly:0,annual:0}}})}var w=(c,t,e)=>new Promise((a,n)=>{var o=i=>{try{r(e.next(i))}catch(s){n(s)}},l=i=>{try{r(e.throw(i))}catch(s){n(s)}},r=i=>i.done?a(i.value):Promise.resolve(i.value).then(o,l);r((e=e.apply(c,t)).next())});function $(){return w(this,null,function*(){try{const c=yield z();return{monthly_cost_savings:c.monthly,annual_cost_savings:c.annual}}catch(c){return console.error("Error getting cost savings aggregates:",c),{monthly_cost_savings:0,annual_cost_savings:0}}})}function x(){return w(this,null,function*(){try{const{FacilityService:c}=yield C(()=>import("./main-RuFFPtZZ.js").then(l=>l.Z),__vite__mapDeps([0,1,2,3,4,5,6,7])),t=yield c.getCurrentFacilityId(),e=O(new Date);console.log("👥 getTeamPerformanceAggregates: Fetching for facility:",t,"date:",e);const a=yield E(e,t);console.log("👥 getTeamPerformanceAggregates: Daily metrics:",a);const n=a==null?void 0:a.find(l=>l.metric_type==="team_performance");console.log("👥 getTeamPerformanceAggregates: Team performance data:",n);const o={skills_score:(n==null?void 0:n.skills)||85,inventory_score:(n==null?void 0:n.inventory)||92,sterilization_score:(n==null?void 0:n.sterilization)||88};return console.log("👥 getTeamPerformanceAggregates: Returning:",o),o}catch(c){return console.error("Error getting team performance aggregates:",c),{skills_score:85,inventory_score:92,sterilization_score:88}}})}var g=(c,t,e)=>new Promise((a,n)=>{var o=i=>{try{r(e.next(i))}catch(s){n(s)}},l=i=>{try{r(e.throw(i))}catch(s){n(s)}},r=i=>i.done?a(i.value):Promise.resolve(i.value).then(o,l);r((e=e.apply(c,t)).next())});class R{constructor(){this.CACHE_DURATION=300*1e3,this.cache=new Map}isCacheValid(t){return Date.now()-t<this.CACHE_DURATION}getCachedData(t){const e=this.cache.get(t);return e&&this.isCacheValid(e.timestamp)?e.data:null}setCachedData(t,e){this.cache.set(t,{data:e,timestamp:Date.now()})}getOperationalTimeSavings(){return g(this,null,function*(){try{console.log("🔍 OperationalTimeSavingsService: Starting calculation...");const{FacilityService:t}=yield C(()=>import("./main-RuFFPtZZ.js").then(u=>u.Z),__vite__mapDeps([0,1,2,3,4,5,6,7])),e=yield t.getCurrentFacilityId();if(console.log("🏥 OperationalTimeSavingsService: Facility ID:",e),!e)return console.log("❌ OperationalTimeSavingsService: No facility ID, returning defaults"),{daily_time_saved:0,monthly_time_saved:0};const a=`operational-time-savings-${e}-${new Date().toISOString().split("T")[0]}`,n=this.getCachedData(a);if(n)return console.log("📊 OperationalTimeSavingsService: Using cached data:",n),n;console.log("🧮 OperationalTimeSavingsService: Calculating from multiple sources...");const[o,l,r]=yield Promise.all([this.calculateSterilizationTimeSavings(e),this.calculateTaskCompletionTimeSavings(e),this.calculateCleaningTimeSavings(e)]);console.log("📈 OperationalTimeSavingsService: Individual savings:",{sterilization:o,tasks:l,cleaning:r});const i=o.daily+l.daily+r.daily,s=o.monthly+l.monthly+r.monthly,m={daily_time_saved:Math.round(i),monthly_time_saved:Math.round(s)};return this.setCachedData(a,m),console.log("✅ OperationalTimeSavingsService: Final result:",m),m}catch(t){return console.error("❌ OperationalTimeSavingsService: Error calculating operational time savings:",t),{daily_time_saved:0,monthly_time_saved:0}}})}calculateSterilizationTimeSavings(t){return g(this,null,function*(){try{const e=new Date().toISOString().split("T")[0],a=new Date().toISOString().slice(0,7),{data:n}=yield d.from("sterilization_cycles").select("duration_minutes, end_time").eq("facility_id",t).eq("status","completed").gte("end_time",`${e}T00:00:00`).lt("end_time",`${e}T23:59:59`),{data:o}=yield d.from("sterilization_cycles").select("duration_minutes, end_time").eq("facility_id",t).eq("status","completed").gte("end_time",`${a}-01T00:00:00`).lt("end_time",`${a}-31T23:59:59`),l=(n||[]).reduce((i,s)=>{const u=s.duration_minutes||60;return i+Math.max(0,60-u)},0),r=(o||[]).reduce((i,s)=>{const u=s.duration_minutes||60;return i+Math.max(0,60-u)},0);return{daily:l,monthly:r}}catch(e){return p.error("OperationalTimeSavingsService: Error calculating sterilization savings:",e),{daily:0,monthly:0}}})}calculateTaskCompletionTimeSavings(t){return g(this,null,function*(){try{const e=new Date().toISOString().split("T")[0],a=new Date().toISOString().slice(0,7),{data:n}=yield d.from("home_daily_operations_tasks").select("estimated_duration, actual_duration").eq("facility_id",t).eq("completed",!0).gte("completed_at",`${e}T00:00:00`).lt("completed_at",`${e}T23:59:59`),{data:o}=yield d.from("home_daily_operations_tasks").select("estimated_duration, actual_duration").eq("facility_id",t).eq("completed",!0).gte("completed_at",`${a}-01T00:00:00`).lt("completed_at",`${a}-31T23:59:59`),l=(n||[]).reduce((i,s)=>{const m=s.estimated_duration||30,u=s.actual_duration||m;return i+Math.max(0,m-u)},0),r=(o||[]).reduce((i,s)=>{const m=s.estimated_duration||30,u=s.actual_duration||m;return i+Math.max(0,m-u)},0);return{daily:l,monthly:r}}catch(e){return p.error("OperationalTimeSavingsService: Error calculating task completion savings:",e),{daily:0,monthly:0}}})}calculateCleaningTimeSavings(t){return g(this,null,function*(){try{return{daily:45,monthly:1350}}catch(e){return p.error("OperationalTimeSavingsService: Error calculating cleaning savings:",e),{daily:0,monthly:0}}})}clearCache(){this.cache.clear()}}const b=new R;var h=(c,t,e)=>new Promise((a,n)=>{var o=i=>{try{r(e.next(i))}catch(s){n(s)}},l=i=>{try{r(e.throw(i))}catch(s){n(s)}},r=i=>i.done?a(i.value):Promise.resolve(i.value).then(o,l);r((e=e.apply(c,t)).next())});class F{constructor(){this.cache=new Map,this.CACHE_TTL=300*1e3}isCacheValid(t){return Date.now()-t<this.CACHE_TTL}getCachedData(t){const e=this.cache.get(t);return e&&this.isCacheValid(e.timestamp)?e.data:null}setCachedData(t,e){this.cache.set(t,{data:e,timestamp:Date.now()})}clearCache(){this.cache.clear()}getCacheStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())}}getHomeMetrics(){return h(this,null,function*(){try{const t=new Date().toISOString().split("T")[0],e=`home-metrics-${t}`,a=this.getCachedData(e);if(a)return a;const{data:{user:n}}=yield d.auth.getUser();if(!n)throw new Error("User not authenticated");const{data:o,error:l}=yield d.from("users").select("facility_id").eq("id",n.id).single();if(l)return console.warn("Failed to fetch user profile, using default facility:",l),this.getDefaultMetrics();const r=(o==null?void 0:o.facility_id)||"550e8400-e29b-41d4-a716-446655440000";console.log("🏠 HomeMetricsService: Fetching metrics for facility:",r);const[i,s,m,u,T,D]=yield Promise.allSettled([b.getOperationalTimeSavings(),P.getAITimeSavings(),$(),x(),this.getDailyMetrics(t,r),this.getGamificationStats(t,r)]),_=i.status==="fulfilled"?i.value:{daily_time_saved:0,monthly_time_saved:0},f=s.status==="fulfilled"?s.value:{daily_time_saved:0,monthly_time_saved:0},S=m.status==="fulfilled"?m.value:{monthly_cost_savings:0,annual_cost_savings:0},y=u.status==="fulfilled"?u.value:{skills_score:0,inventory_score:0,sterilization_score:0},k=T.status==="fulfilled"?T.value:[],v=D.status==="fulfilled"?D.value:[];console.log("📊 HomeMetricsService: Received operational time savings:",_),console.log("📊 HomeMetricsService: Received AI time savings:",f),console.log("📊 HomeMetricsService: Received cost savings:",S),console.log("📊 HomeMetricsService: Received team performance:",y);const M={timeSaved:{daily:_.daily_time_saved,monthly:_.monthly_time_saved},aiTimeSaved:{daily:f.daily_time_saved,monthly:f.monthly_time_saved},costSavings:{monthly:S.monthly_cost_savings,annual:S.annual_cost_savings},aiEfficiency:{timeSavings:this.extractAIEfficiency(k,"time_savings"),proactiveMgmt:this.extractAIEfficiency(k,"proactive_mgmt")},teamPerformance:{skills:y.skills_score,inventory:y.inventory_score,sterilization:y.sterilization_score},gamificationStats:{totalTasks:this.calculateTotalTasks(v),completedTasks:this.calculateCompletedTasks(v),perfectDays:this.calculatePerfectDays(v),currentStreak:this.calculateCurrentStreak(v),bestStreak:this.calculateBestStreak(v)}};return this.setCachedData(e,M),M}catch(t){return console.warn("Failed to fetch home metrics, using defaults:",t),this.getDefaultMetrics()}})}getDailyMetrics(t,e){return h(this,null,function*(){const{data:a}=yield d.from("performance_metrics").select("*").eq("date",t).eq("facility_id",e);return a||[]})}getMonthlyMetrics(t,e){return h(this,null,function*(){const{data:a}=yield d.from("performance_metrics").select("*").like("month",t).eq("facility_id",e);return a||[]})}getGamificationStats(t,e){return h(this,null,function*(){const{data:a}=yield d.from("user_gamification_stats").select("*").eq("date",t).eq("facility_id",e).limit(10);return a||[]})}extractTimeSaved(t,e){const a=t.find(n=>n.metric_type==="time_saved");return e==="daily"?(a==null?void 0:a.daily_time_saved)||0:(a==null?void 0:a.monthly_time_saved)||0}extractCostSavings(t,e){const a=t.find(n=>n.metric_type==="cost_savings");return e==="monthly"?(a==null?void 0:a.monthly_cost_savings)||0:(a==null?void 0:a.annual_cost_savings)||0}extractAIEfficiency(t,e){const a=t.find(n=>n.metric_type==="ai_efficiency");return(a==null?void 0:a[e])||0}extractTeamPerformance(t,e){const a=t.find(n=>n.metric_type==="team_performance");return(a==null?void 0:a[e])||0}calculateTotalTasks(t){return t.reduce((e,a)=>e+(a.total_tasks||0),0)}calculateCompletedTasks(t){return t.reduce((e,a)=>e+(a.completed_tasks||0),0)}calculatePerfectDays(t){return t.filter(e=>(e.completed_tasks||0)===(e.total_tasks||0)).length}calculateCurrentStreak(t){return t.reduce((e,a)=>Math.max(e,a.current_streak||0),0)}calculateBestStreak(t){return t.reduce((e,a)=>Math.max(e,a.best_streak||0),0)}getDefaultMetrics(){return{timeSaved:{daily:0,monthly:0},aiTimeSaved:{daily:0,monthly:0},costSavings:{monthly:0,annual:0},aiEfficiency:{timeSavings:0,proactiveMgmt:0},teamPerformance:{skills:0,inventory:0,sterilization:0},gamificationStats:{totalTasks:0,completedTasks:0,perfectDays:0,currentStreak:0,bestStreak:0}}}}const Z=new F;export{Z as homeMetricsService};
