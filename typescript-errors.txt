src/components/Inventory/TableRow.tsx(111,20): error TS2551: Property 'isP2Status' does not exist on type 'InventoryItem'. Did you mean 'p2Status'?
src/components/Inventory/forms/LocationPicker.tsx(205,53): error TS2339: Property 'department' does not exist on type '{ name: string; id: string; }'.
src/components/Inventory/forms/LocationPicker.tsx(206,41): error TS2339: Property 'floor' does not exist on type '{ name: string; id: string; }'.
src/components/Inventory/modals/InventoryModals.tsx(30,5): error TS2339: Property 'isCloned' does not exist on type '{ handleFormChange: (field: string, value: string) => void; toggleSection: (section: keyof ExpandedSections) => void; handleSaveItem: () => Promise<void>; handleDeleteItem: () => void; handleEditItem: (item: InventoryItem) => void; handleAddItem: () => void; handleCloneItem: (item: InventoryItem) => void; handleCloneCurrentForm: () => void; openAddModal: () => void; handleTrackItem: (itemId: string, doctor: string) => void; handleSearchChange: (term: string) => void; handleOpenTrackModal: () => void; handleOpenUploadBarcodeModal: () => void; handleOpenScanModal: () => void; toggleFavorite: (itemId: string) => void; searchQuery: string; favorites: string[]; trackedItems: Set<string>; trackingData: Map<string, { doctor: string; timestamp: string; }>; showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; formData: InventoryFormData; isEditMode: boolean; expandedSections: ExpandedSections; openEditModal: (itemData: InventoryFormData) => void; openTrackModal: () => void; openUploadBarcodeModal: () => void; openScanModal: () => void; closeAddModal: () => void; closeTrackModal: () => void; closeUploadBarcodeModal: () => void; closeScanModal: () => void; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; setExpandedSections: (sections: ExpandedSections) => void; }'.
src/components/ModalContainer.tsx(65,24): error TS2339: Property 'userRank' does not exist on type 'any[]'.
src/components/ModalContainer.tsx(67,20): error TS2339: Property 'users' does not exist on type 'any[]'.
src/components/Settings/RoomForm.tsx(92,14): error TS2345: Argument of type '{ name: string; department: string; floor: string; barcode: string; gpsCoordinates: { latitude: number; longitude: number; accuracy?: number; } | null; }' is not assignable to parameter of type 'Partial<Room>'.
  Types of property 'gpsCoordinates' are incompatible.
    Property 'lastUpdated' is missing in type '{ latitude: number; longitude: number; accuracy?: number; }' but required in type '{ latitude: number; longitude: number; accuracy?: number; lastUpdated: string; }'.
src/components/Sterilization/BIFailureResolution/hooks/useQuarantineData.ts(25,3): error TS2322: Type '{ lastPassedDate: Date; affectedCycles: any; affectedTools: any[]; totalToolsAffected: number; totalCyclesAffected: any; totalSterilizationEvents: any; toolsUsedMultipleTimes: number; uniqueOperators: unknown[]; dateRange: { start: Date; end: Date; }; toolsByCategory: any; hasCurrentCycleAffected: boolean; }' is not assignable to type 'QuarantineData'.
  Types of property 'uniqueOperators' are incompatible.
    Type 'unknown[]' is not assignable to type 'string[]'.
      Type 'unknown' is not assignable to type 'string'.
src/components/Sterilization/PatientExposureReport.tsx(109,17): error TS2345: Argument of type '{ incidentNumber: string; exposureSummary: { totalPatientsExposed: number; highRiskPatients: number; mediumRiskPatients: number; lowRiskPatients: number; }; riskBreakdown: { high: number; medium: number; low: number; }; exposureDetails: { patientId: string; riskLevel: string; exposureDate: string; procedures: string[]; }[]; recommendations: string[]; generatedAt: string; generatedBy: string; }' is not assignable to parameter of type 'SetStateAction<ExposureReport>'.
  Type '{ incidentNumber: string; exposureSummary: { totalPatientsExposed: number; highRiskPatients: number; mediumRiskPatients: number; lowRiskPatients: number; }; riskBreakdown: { high: number; medium: number; low: number; }; exposureDetails: { patientId: string; riskLevel: string; exposureDate: string; procedures: string[]; }[]; recommendations: string[]; generatedAt: string; generatedBy: string; }' is missing the following properties from type 'ExposureReport': totalRoomsAffected, roomDetails
src/components/Sterilization/workflows/DirtyWorkflow/hooks/useDirtyWorkflowState.ts(17,6): error TS2352: Conversion of type 'Window & typeof globalThis' to type '{ toast: { success: (msg: string) => void; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'toast' is missing in type 'Window & typeof globalThis' but required in type '{ toast: { success: (msg: string) => void; }; }'.
src/components/Sterilization/workflows/hooks/useDirtyWorkflow.ts(14,6): error TS2352: Conversion of type 'Window & typeof globalThis' to type '{ toast: { error: (msg: string) => void; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'toast' is missing in type 'Window & typeof globalThis' but required in type '{ toast: { error: (msg: string) => void; }; }'.
src/examples/supabaseMockExample.ts(218,5): error TS2352: Conversion of type 'MockSupabaseClient' to type '{ channel: (name: string) => { on: (event: string, config: unknown, callback: (payload: unknown) => void) => { subscribe: () => { unsubscribe: () => void; }; }; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'channel' is missing in type 'MockSupabaseClient' but required in type '{ channel: (name: string) => { on: (event: string, config: unknown, callback: (payload: unknown) => void) => { subscribe: () => { unsubscribe: () => void; }; }; }; }'.
src/examples/supabaseMockExample.ts(260,5): error TS2352: Conversion of type 'MockSupabaseClient' to type '{ storage: { from: (bucket: string) => { upload: (path: string, file: Blob) => Promise<{ data: unknown; error: unknown; }>; }; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'storage' is missing in type 'MockSupabaseClient' but required in type '{ storage: { from: (bucket: string) => { upload: (path: string, file: Blob) => Promise<{ data: unknown; error: unknown; }>; }; }; }'.
src/examples/supabaseMockExample.ts(283,5): error TS2352: Conversion of type 'MockSupabaseClient' to type '{ storage: { from: (bucket: string) => { getPublicUrl: (path: string) => { data: { publicUrl: string; }; }; }; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'storage' is missing in type 'MockSupabaseClient' but required in type '{ storage: { from: (bucket: string) => { getPublicUrl: (path: string) => { data: { publicUrl: string; }; }; }; }; }'.
src/examples/supabaseMockExample.ts(298,5): error TS2352: Conversion of type 'MockSupabaseClient' to type '{ storage: { from: (bucket: string) => { download: (path: string) => Promise<{ data: unknown; error: unknown; }>; }; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'storage' is missing in type 'MockSupabaseClient' but required in type '{ storage: { from: (bucket: string) => { download: (path: string) => Promise<{ data: unknown; error: unknown; }>; }; }; }'.
src/hooks/inventory/useInventoryFormSubmission.ts(76,49): error TS2345: Argument of type '{ id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: any; expiration_date: any; data: { warranty: string; notes: string; purchaseDate: string; lastServiced: string; }; }' is not assignable to parameter of type 'Omit<InventoryItem, "id" | "lastUpdated">'.
  Type '{ id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: any; expiration_date: any; data: { warranty: string; notes: string; purchaseDate: string; lastServiced: string; }; }' is missing the following properties from type 'Omit<InventoryItem, "id" | "lastUpdated">': tool_id, supplier, cost, vendor, and 23 more.
src/hooks/inventory/useInventoryModals.ts(72,13): error TS2740: Type '{ name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: null; expiration_date: null; data: Json; }' is missing the following properties from type 'Omit<InventoryItem, "id" | "lastUpdated">': tool_id, supplier, cost, vendor, and 23 more.
src/hooks/inventory/useInventoryModals.ts(289,30): error TS2304: Cannot find name 'convertItemToFormData'.
src/hooks/inventory/useInventoryModals.ts(305,18): error TS2551: Property 'setEditMode' does not exist on type '{ showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; formData: InventoryFormData; isEditMode: boolean; expandedSections: ExpandedSections; openAddModal: () => void; openEditModal: (itemData: InventoryFormData) => void; openTrackModal: () => void; openUploadBarcodeModal: () => void; openScanModal: () => void; closeAddModal: () => void; closeTrackModal: () => void; closeUploadBarcodeModal: () => void; closeScanModal: () => void; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; setExpandedSections: (sections: ExpandedSections) => void; }'. Did you mean 'isEditMode'?
src/hooks/inventory/useInventoryModals.ts(332,16): error TS2551: Property 'setEditMode' does not exist on type '{ showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; formData: InventoryFormData; isEditMode: boolean; expandedSections: ExpandedSections; openAddModal: () => void; openEditModal: (itemData: InventoryFormData) => void; openTrackModal: () => void; openUploadBarcodeModal: () => void; openScanModal: () => void; closeAddModal: () => void; closeTrackModal: () => void; closeUploadBarcodeModal: () => void; closeScanModal: () => void; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; setExpandedSections: (sections: ExpandedSections) => void; }'. Did you mean 'isEditMode'?
src/hooks/inventory/useInventoryModals.ts(333,16): error TS2339: Property 'setIsCloned' does not exist on type '{ showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; formData: InventoryFormData; isEditMode: boolean; expandedSections: ExpandedSections; openAddModal: () => void; openEditModal: (itemData: InventoryFormData) => void; openTrackModal: () => void; openUploadBarcodeModal: () => void; openScanModal: () => void; closeAddModal: () => void; closeTrackModal: () => void; closeUploadBarcodeModal: () => void; closeScanModal: () => void; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; setExpandedSections: (sections: ExpandedSections) => void; }'.
src/hooks/useBackgroundCacheRefresh.ts(30,7): error TS7030: Not all code paths return a value.
src/hooks/useCentralizedInventoryData.ts(303,19): error TS7030: Not all code paths return a value.
src/hooks/useContentAutosave.ts(88,30): error TS7030: Not all code paths return a value.
src/hooks/useHomeDataLoader.ts(250,19): error TS2352: Conversion of type 'any[]' to type '{ status?: string; values?: { userRank: number; totalUsers: number; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Types of property 'values' are incompatible.
    Type '() => ArrayIterator<any>' is not comparable to type '{ userRank: number; totalUsers: number; }'.
src/hooks/useHomeDataLoader.ts(256,19): error TS2352: Conversion of type 'any[]' to type '{ status?: string; values?: { userRank: number; totalUsers: number; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Types of property 'values' are incompatible.
    Type '() => ArrayIterator<any>' is not comparable to type '{ userRank: number; totalUsers: number; }'.
src/hooks/useHomeDataLoader.ts(262,23): error TS2352: Conversion of type 'any[]' to type '{ status?: string; values?: { userRank: number; totalUsers: number; }; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Types of property 'values' are incompatible.
    Type '() => ArrayIterator<any>' is not comparable to type '{ userRank: number; totalUsers: number; }'.
src/hooks/useHomeDataLoader.ts(355,26): error TS2352: Conversion of type 'AIImpactMetrics' to type 'Record<string, unknown>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Index signature for type 'string' is missing in type 'AIImpactMetrics'.
src/hooks/useInventoryActions.ts(170,53): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/hooks/useInventoryActions.ts(174,53): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/hooks/useInventoryActions.ts(178,53): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/hooks/useInventoryActions.ts(182,53): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/hooks/useInventoryRealtimeUpdates.ts(15,13): error TS7030: Not all code paths return a value.
src/hooks/useInventoryRealtimeUpdates.ts(18,7): error TS7030: Not all code paths return a value.
src/hooks/useInventoryUpload.ts(9,31): error TS7030: Not all code paths return a value.
src/hooks/useLeaderboard.ts(28,26): error TS2345: Argument of type 'any[]' is not assignable to parameter of type 'SetStateAction<LeaderboardData>'.
src/hooks/usePerformanceMonitor.ts(75,19): error TS7030: Not all code paths return a value.
src/hooks/useSecureAuth.ts(134,7): error TS2448: Block-scoped variable 'startTokenValidation' used before its declaration.
src/lib/supabaseMockIntegration.ts(281,9): error TS2352: Conversion of type '() => Promise<{ data: { user: unknown; }; error: unknown; }>' to type '{ mockResolvedValue: (value: () => Promise<{ data: { user: unknown; }; error: unknown; }>) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/lib/supabaseMockIntegration.ts(293,9): error TS2352: Conversion of type '() => Promise<{ data: { session: unknown; }; error: unknown; }>' to type '{ mockResolvedValue: (value: () => Promise<{ data: { session: unknown; }; error: unknown; }>) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/lib/supabaseMockIntegration.ts(305,9): error TS2352: Conversion of type '(credentials: { email: string; password: string; }) => Promise<{ data: unknown; error: unknown; }>' to type '{ mockResolvedValue: (value: (credentials: { email: string; password: string; }) => Promise<{ data: unknown; error: unknown; }>) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/lib/supabaseMockIntegration.ts(317,9): error TS2352: Conversion of type '(credentials: { email: string; password: string; }) => Promise<{ data: unknown; error: unknown; }>' to type '{ mockResolvedValue: (value: (credentials: { email: string; password: string; }) => Promise<{ data: unknown; error: unknown; }>) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/lib/supabaseMockIntegration.ts(329,9): error TS2352: Conversion of type '() => Promise<{ error: unknown; }>' to type '{ mockResolvedValue: (value: () => Promise<{ error: unknown; }>) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/lib/supabaseMockIntegration.ts(340,7): error TS2352: Conversion of type '(table: string) => MockTableBuilder' to type '{ mockImplementation: (fn: <T extends keyof Database["public"]["Tables"]>(table: T) => MockTableBuilder) => void; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
src/pages/ContentBuilder/components/AccessibilityEnhancements.tsx(86,36): error TS7030: Not all code paths return a value.
src/pages/ContentBuilder/components/AccessibilityEnhancements.tsx(538,45): error TS7030: Not all code paths return a value.
src/pages/ContentBuilder/components/SimpleContentEditor.tsx(367,11): error TS2322: Type '(sections: PathwaySection[], items: PathwayItem[]) => void' is not assignable to type '(sections: import("/workspace/src/pages/ContentBuilder/components/LearningPathwayBuilder.types").PathwaySection[], items: import("/workspace/src/pages/ContentBuilder/components/LearningPathwayBuilder.types").PathwayItem[]) => void'.
  Types of parameters 'items' and 'items' are incompatible.
    Type 'import("/workspace/src/pages/ContentBuilder/components/LearningPathwayBuilder.types").PathwayItem[]' is not assignable to type 'PathwayItem[]'.
      Type 'import("/workspace/src/pages/ContentBuilder/components/LearningPathwayBuilder.types").PathwayItem' is not assignable to type 'PathwayItem'.
        'string' index signatures are incompatible.
          Type 'string | number | boolean | { description?: string; }' is not assignable to type 'string | number | boolean'.
            Type '{ description?: string; }' is not assignable to type 'string | number | boolean'.
src/pages/EnvironmentalClean/components/ui/CleaningChecklists.tsx(100,44): error TS2322: Type '(tab: ActiveTab) => void' is not assignable to type '(tab: string) => void'.
  Types of parameters 'tab' and 'tab' are incompatible.
    Type 'string' is not assignable to type 'ActiveTab'.
src/pages/EnvironmentalClean/components/ui/CleaningChecklists.tsx(123,11): error TS2322: Type '(tab: ActiveTab) => void' is not assignable to type '(tab: string) => void'.
  Types of parameters 'tab' and 'tab' are incompatible.
    Type 'string' is not assignable to type 'ActiveTab'.
src/pages/EnvironmentalClean/components/ui/CleaningChecklists.tsx(126,11): error TS2322: Type '(sds: import("/workspace/src/pages/EnvironmentalClean/components/ui/types/cleaningChecklists").SDSSheet) => void' is not assignable to type '(sds: SDSSheet) => void'.
  Types of parameters 'sds' and 'sds' are incompatible.
    Type 'SDSSheet' is not assignable to type 'import("/workspace/src/pages/EnvironmentalClean/components/ui/types/cleaningChecklists").SDSSheet'.
      Property 'lastUpdated' is optional in type 'SDSSheet' but required in type 'SDSSheet'.
src/pages/EnvironmentalClean/hooks/useEnvironmentalCleanRealtime.ts(149,7): error TS7030: Not all code paths return a value.
src/pages/EnvironmentalClean/utils/keyboardNavigation.tsx(63,45): error TS7030: Not all code paths return a value.
src/pages/Intelligence/tabs/InsightsTab.tsx(87,15): error TS2322: Type 'unknown' is not assignable to type 'ReactNode'.
src/pages/Intelligence/tabs/InsightsTab.tsx(93,15): error TS2322: Type 'unknown' is not assignable to type 'ReactNode'.
src/pages/Intelligence/tabs/InsightsTab.tsx(105,15): error TS2322: Type 'unknown' is not assignable to type 'ReactNode'.
src/pages/Inventory/components/ScanModalActions.tsx(38,30): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/pages/Inventory/components/ScanModalActions.tsx(58,32): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/pages/Inventory/hooks/useScanModalLogic.ts(64,30): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/pages/Inventory/services/export/formatting.ts(186,14): error TS18047: 'value' is possibly 'null'.
src/pages/Inventory/services/export/streaming.ts(239,14): error TS18047: 'value' is possibly 'null'.
src/pages/Inventory/services/inventoryActionHandlers.ts(225,7): error TS2352: Conversion of type 'InventorySingleResponse[]' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'InventorySingleResponse' is missing the following properties from type 'InventoryItem': id, facility_id, name, quantity, and 35 more.
src/pages/Inventory/services/inventoryActionHandlers.ts(274,10): error TS2352: Conversion of type 'InventoryResponse' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'InventoryResponse' is missing the following properties from type 'InventoryItem[]': length, pop, push, concat, and 35 more.
src/pages/Inventory/services/inventoryActionHandlers.ts(281,7): error TS2352: Conversion of type 'InventoryResponse' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'InventoryResponse' is missing the following properties from type 'InventoryItem[]': length, pop, push, concat, and 35 more.
src/pages/Inventory/services/inventoryActionHandlers.ts(307,19): error TS2352: Conversion of type 'InventoryResponse' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'InventoryResponse' is missing the following properties from type 'InventoryItem[]': length, pop, push, concat, and 35 more.
src/pages/Inventory/services/inventoryActionService.ts(108,5): error TS2739: Type 'ImportResult' is missing the following properties from type 'ImportResult': failedCount, skippedCount, warnings, fileName
src/pages/Inventory/services/inventoryActionService.ts(108,50): error TS2345: Argument of type '(result: import("/workspace/src/pages/Inventory/services/inventoryImportService").ImportResult) => void' is not assignable to parameter of type '(result: ImportResult) => void'.
  Types of parameters 'result' and 'result' are incompatible.
    Type 'ImportResult' is missing the following properties from type 'ImportResult': failedCount, skippedCount, warnings, fileName
src/pages/Inventory/services/inventoryImportService.ts(291,15): error TS2740: Type '{ id: string; name: string; item: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { vendor: string; purchaseDate: string; warranty: string; maintenanceSchedule: string; lastServiced: string; nextDue: string; serviceProvider: string; assignedTo: string; notes: string; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/pages/Inventory/services/inventoryImportService.ts(412,42): error TS2339: Property 'purchaseDate' does not exist on type 'Json'.
  Property 'purchaseDate' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(413,38): error TS2339: Property 'warranty' does not exist on type 'Json'.
  Property 'warranty' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(415,42): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(416,37): error TS2339: Property 'nextDue' does not exist on type 'Json'.
  Property 'nextDue' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(417,45): error TS2339: Property 'serviceProvider' does not exist on type 'Json'.
  Property 'serviceProvider' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(418,40): error TS2339: Property 'assignedTo' does not exist on type 'Json'.
  Property 'assignedTo' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(419,35): error TS2339: Property 'notes' does not exist on type 'Json'.
  Property 'notes' does not exist on type 'string'.
src/pages/Inventory/services/inventoryImportService.ts(429,49): error TS2345: Argument of type '{ name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { vendor: string; purchaseDate: string; warranty: string; maintenanceSchedule: string; lastServiced: string; nextDue: string; serviceProvider: string; assignedTo: string; notes: string; }; }' is not assignable to parameter of type 'Omit<InventoryItem, "id" | "lastUpdated">'.
  Type '{ name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; facility_id: string; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { vendor: string; purchaseDate: string; warranty: string; maintenanceSchedule: string; lastServiced: string; nextDue: string; serviceProvider: string; assignedTo: string; notes: string; }; }' is missing the following properties from type 'Omit<InventoryItem, "id" | "lastUpdated">': tool_id, supplier, cost, vendor, and 23 more.
src/pages/Inventory/services/inventoryImportService.ts(530,34): error TS2339: Property 'find' does not exist on type 'InventoryResponse'.
src/pages/Inventory/services/inventoryScheduledExportService.ts(247,9): error TS2345: Argument of type 'InventoryResponse' is not assignable to parameter of type 'InventoryItem[]'.
  Type 'InventoryResponse' is missing the following properties from type 'InventoryItem[]': length, pop, push, concat, and 35 more.
src/pages/Inventory/services/inventoryScheduledExportService.ts(255,9): error TS2345: Argument of type 'InventoryResponse' is not assignable to parameter of type 'InventoryItem[]'.
  Type 'InventoryResponse' is missing the following properties from type 'InventoryItem[]': length, pop, push, concat, and 35 more.
src/pages/Inventory/services/scanInventoryModalHandlers.ts(75,11): error TS2322: Type '{ name: string; category: string; location: string; quantity: number; facility_id: string; created_at: string; updated_at: string; reorder_point: number; supplier: string; cost: number; expiration_date: any; unit_cost: number; data: { barcode: string; status: string; cost: number; vendor: string; purchaseDate: string; warranty: string; description: string; tags: any[]; notes: string; lastMaintenance: any; nextMaintenance: any; assignedTo: any; department: string; condition: string; priority: string; supplier: string; reorderPoint: number; maxQuantity: number; unit: string; isTracked: false; isFavorite: false; isArchived: false; createdAt: string; updatedAt: string; }; }[]' is not assignable to type 'Omit<InventoryItem, "id" | "lastUpdated">[]'.
  Type '{ name: string; category: string; location: string; quantity: number; facility_id: string; created_at: string; updated_at: string; reorder_point: number; supplier: string; cost: number; expiration_date: any; unit_cost: number; data: { barcode: string; status: string; cost: number; vendor: string; purchaseDate: string; warranty: string; description: string; tags: any[]; notes: string; lastMaintenance: any; nextMaintenance: any; assignedTo: any; department: string; condition: string; priority: string; supplier: string; reorderPoint: number; maxQuantity: number; unit: string; isTracked: false; isFavorite: false; isArchived: false; createdAt: string; updatedAt: string; }; }' is missing the following properties from type 'Omit<InventoryItem, "id" | "lastUpdated">': status, tool_id, vendor, warranty, and 22 more.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(305,7): error TS2344: Type 'unknown' does not satisfy the constraint 'GenericSchema'.
  Type '{}' is missing the following properties from type 'GenericSchema': Tables, Views, Functions
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(315,5): error TS2344: Type 'unknown' does not satisfy the constraint 'GenericSchema'.
  Type '{}' is missing the following properties from type 'GenericSchema': Tables, Views, Functions
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(323,22): error TS2589: Type instantiation is excessively deep and possibly infinite.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(329,22): error TS2589: Type instantiation is excessively deep and possibly infinite.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(332,22): error TS2589: Type instantiation is excessively deep and possibly infinite.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(335,22): error TS2589: Type instantiation is excessively deep and possibly infinite.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(338,22): error TS2589: Type instantiation is excessively deep and possibly infinite.
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(356,7): error TS2344: Type 'unknown' does not satisfy the constraint 'GenericSchema'.
  Type '{}' is missing the following properties from type 'GenericSchema': Tables, Views, Functions
src/pages/KnowledgeHub/services/providers/KHSearchProvider.ts(366,5): error TS2344: Type 'unknown' does not satisfy the constraint 'GenericSchema'.
  Type '{}' is missing the following properties from type 'GenericSchema': Tables, Views, Functions
src/providers/GlobalBIFailureProvider.tsx(145,47): error TS2339: Property 'getCurrentFacilityId' does not exist on type '{ createIncident(incidentData: Record<string, unknown>): Promise<{ error: string; data?: undefined; } | { data: any; error?: undefined; }>; resolveIncident(incidentId: string, resolution: string): Promise<{ error: string; data?: undefined; } | { data: any; error?: undefined; }>; fetchActivityLogs(limit?: number): Promise<any[]>; identifyExposureWindowTools(windowStart: string, windowEnd: string): Promise<{ id: any; name: any; last_used_at: any; status: any; }[]>; getActiveIncidents(facilityId: string): Promise<any[]>; getAnalyticsSummary(facilityId: string, timeRange: string): Promise<{ totalIncidents: number; resolvedIncidents: number; averageResolutionTime: number; facilityId: string; timeRange: string; }>; sendRegulatoryNotification(incidentId: string, notificationType: string): Promise<{ success: boolean; message: string; }>; generatePatientExposureReport(incidentId: string): Promise<{ incidentNumber: string; exposureSummary: { totalPatientsExposed: number; highRiskPatients: number; mediumRiskPatients: number; lowRiskPatients: number; }; riskBreakdown: { high: number; medium: number; low: number; }; exposureDetails: { patientId: string; riskLevel: string; exposureDate: string; procedures: string[]; }[]; recommendations: string[]; generatedAt: string; generatedBy: string; }>; generateIncidentNumber(facilityId: string): Promise<string>; subscribeToBIFailureUpdates(facilityId: string): Promise<void>; }'.
src/providers/GlobalBIFailureProvider.tsx(162,32): error TS2339: Property 'initializeBIFailureState' does not exist on type '{ createIncident(incidentData: Record<string, unknown>): Promise<{ error: string; data?: undefined; } | { data: any; error?: undefined; }>; resolveIncident(incidentId: string, resolution: string): Promise<{ error: string; data?: undefined; } | { data: any; error?: undefined; }>; fetchActivityLogs(limit?: number): Promise<any[]>; identifyExposureWindowTools(windowStart: string, windowEnd: string): Promise<{ id: any; name: any; last_used_at: any; status: any; }[]>; getActiveIncidents(facilityId: string): Promise<any[]>; getAnalyticsSummary(facilityId: string, timeRange: string): Promise<{ totalIncidents: number; resolvedIncidents: number; averageResolutionTime: number; facilityId: string; timeRange: string; }>; sendRegulatoryNotification(incidentId: string, notificationType: string): Promise<{ success: boolean; message: string; }>; generatePatientExposureReport(incidentId: string): Promise<{ incidentNumber: string; exposureSummary: { totalPatientsExposed: number; highRiskPatients: number; mediumRiskPatients: number; lowRiskPatients: number; }; riskBreakdown: { high: number; medium: number; low: number; }; exposureDetails: { patientId: string; riskLevel: string; exposureDate: string; procedures: string[]; }[]; recommendations: string[]; generatedAt: string; generatedBy: string; }>; generateIncidentNumber(facilityId: string): Promise<string>; subscribeToBIFailureUpdates(facilityId: string): Promise<void>; }'.
src/providers/GlobalBIFailureProvider.tsx(172,45): error TS2339: Property 'unsubscribe' does not exist on type 'Promise<void>'.
src/services/PerformanceAlertingService.ts(281,7): error TS2322: Type 'string[]' is not assignable to type 'Record<string, string>'.
  Index signature for type 'string' is missing in type 'string[]'.
src/services/PerformanceMonitoringIntegration.ts(56,7): error TS2352: Conversion of type 'PerformanceMonitor' to type '{ getSystemHealthSync?: () => unknown; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'getSystemHealthSync' is private in type 'PerformanceMonitor' but not in type '{ getSystemHealthSync?: () => unknown; }'.
src/services/_core/ServicePerformanceDecorator.ts(192,17): error TS2304: Cannot find name 'T'.
src/services/_core/ServicePerformanceDecorator.ts(193,36): error TS2304: Cannot find name 'T'.
src/services/_core/ServiceValidationTest.ts(238,9): error TS2554: Expected 2 arguments, but got 3.
src/services/_core/realtimeManager.ts(15,9): error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '"postgres_changes"' is not assignable to parameter of type '"system"'.
src/services/adminTaskConfigService.ts(303,36): error TS2339: Property 'select' does not exist on type 'unknown'.
src/services/ai/AIRequestBatcher.ts(209,21): error TS2345: Argument of type 'unknown' is not assignable to parameter of type 'T | PromiseLike<T>'.
src/services/ai/AIRequestQueue.ts(192,22): error TS2339: Property 'success' does not exist on type 'unknown'.
src/services/ai/AIRequestQueue.ts(193,28): error TS2339: Property 'data' does not exist on type 'unknown'.
src/services/ai/AIRequestQueue.ts(195,37): error TS2339: Property 'error' does not exist on type 'unknown'.
src/services/ai/aiSettings/AISettingsModelProvider.ts(76,43): error TS2345: Argument of type 'Record<string, unknown>' is not assignable to parameter of type 'SterilizationAISettings'.
  Type 'Record<string, unknown>' is missing the following properties from type 'SterilizationAISettings': facility_id, ai_enabled, ai_version, computer_vision_enabled, and 40 more.
src/services/ai/aiSettings/AISettingsPerformanceProvider.ts(328,24): error TS2339: Property 'dataSharingEnabled' does not exist on type '{ dataAnonymization: boolean; thirdPartyPermissions: boolean; complianceMonitoring: boolean; auditTrail: boolean; dataRetention: boolean; encryption: boolean; accessControl: boolean; privacyCompliance: boolean; }'.
src/services/ai/assistantContextBuilder.ts(7,13): error TS2304: Cannot find name 'intelligenceDataService'.
src/services/ai/environmentalAI/analytics.ts(111,31): error TS2339: Property 'cleaning_type' does not exist on type 'CleaningSessionRow'.
src/services/ai/environmentalAI/analytics.ts(113,18): error TS2339: Property 'started_time' does not exist on type 'CleaningSessionRow'.
src/services/ai/environmentalAI/analytics.ts(114,18): error TS2339: Property 'completed_time' does not exist on type 'CleaningSessionRow'.
src/services/ai/environmentalAI/analytics.ts(116,31): error TS2339: Property 'quality_score' does not exist on type 'CleaningSessionRow'.
src/services/ai/inventoryAI/costAnalyticsService.ts(120,35): error TS2345: Argument of type 'InventoryItem[]' is not assignable to parameter of type '{ [key: string]: unknown; category?: string; }[]'.
  Type 'InventoryItem' is not assignable to type '{ [key: string]: unknown; category?: string; }'.
    Index signature for type 'string' is missing in type 'InventoryItem'.
src/services/ai/inventoryAI/costAnalyticsService.ts(121,39): error TS2345: Argument of type 'InventoryItem[]' is not assignable to parameter of type '{ [key: string]: unknown; quantity?: number; data?: { min_quantity?: number; }; }[]'.
  Type 'InventoryItem' is not assignable to type '{ [key: string]: unknown; quantity?: number; data?: { min_quantity?: number; }; }'.
    Types of property 'data' are incompatible.
      Type 'Json' is not assignable to type '{ min_quantity?: number; }'.
        Type 'string' has no properties in common with type '{ min_quantity?: number; }'.
src/services/ai/inventoryAI/costAnalyticsService.ts(122,41): error TS2345: Argument of type 'InventoryItem[]' is not assignable to parameter of type '{ [key: string]: unknown; value?: number; }[]'.
  Type 'InventoryItem' is not assignable to type '{ [key: string]: unknown; value?: number; }'.
    Index signature for type 'string' is missing in type 'InventoryItem'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(42,17): error TS2352: Conversion of type 'DemandForecastingResult' to type 'Record<string, unknown>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Index signature for type 'string' is missing in type 'DemandForecastingResult'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(127,9): error TS2769: No overload matches this call.
  Overload 1 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => value is unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(transaction: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => value is unknown'.
      Types of parameters 'transaction' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
  Overload 2 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(transaction: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => unknown'.
      Types of parameters 'transaction' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(134,9): error TS2345: Argument of type '(a: { created_at?: string; [key: string]: unknown; }, b: { created_at?: string; [key: string]: unknown; }) => number' is not assignable to parameter of type '(a: unknown, b: unknown) => number'.
  Types of parameters 'a' and 'a' are incompatible.
    Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
      Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(162,9): error TS2769: No overload matches this call.
  Overload 1 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => value is unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(maintenance: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => value is unknown'.
      Types of parameters 'maintenance' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
  Overload 2 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(maintenance: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => unknown'.
      Types of parameters 'maintenance' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(169,9): error TS2345: Argument of type '(a: { created_at?: string; [key: string]: unknown; }, b: { created_at?: string; [key: string]: unknown; }) => number' is not assignable to parameter of type '(a: unknown, b: unknown) => number'.
  Types of parameters 'a' and 'a' are incompatible.
    Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
      Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(196,9): error TS2769: No overload matches this call.
  Overload 1 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => value is unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(cost: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => value is unknown'.
      Types of parameters 'cost' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
  Overload 2 of 2, '(predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any): unknown[]', gave the following error.
    Argument of type '(cost: { created_at?: string; [key: string]: unknown; }) => boolean' is not assignable to parameter of type '(value: unknown, index: number, array: unknown[]) => unknown'.
      Types of parameters 'cost' and 'value' are incompatible.
        Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
          Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/forecastingWorkflowService.ts(202,9): error TS2345: Argument of type '(a: { created_at?: string; [key: string]: unknown; }, b: { created_at?: string; [key: string]: unknown; }) => number' is not assignable to parameter of type '(a: unknown, b: unknown) => number'.
  Types of parameters 'a' and 'a' are incompatible.
    Type 'unknown' is not assignable to type '{ [key: string]: unknown; created_at?: string; }'.
      Index signature for type 'string' is missing in type '{}'.
src/services/ai/inventoryAI/riskAnalysisService.ts(49,22): error TS2352: Conversion of type 'AIImageProcessingResult' to type 'Record<string, unknown>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Index signature for type 'string' is missing in type 'AIImageProcessingResult'.
src/services/ai/inventoryAI/riskAnalysisService.ts(105,22): error TS2352: Conversion of type 'AIImageProcessingResult' to type 'Record<string, unknown>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Index signature for type 'string' is missing in type 'AIImageProcessingResult'.
src/services/ai/inventoryAIService.ts(73,5): error TS2740: Type 'InventoryAISettings' is missing the following properties from type 'InventoryAISettings': ai_enabled, ai_version, computer_vision_enabled, barcode_scanning_enabled, and 36 more.
src/services/ai/learningAI/analytics.ts(99,13): error TS2322: Type 'PersonalizedRecommendationRow' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'PersonalizedRecommendationRow'.
src/services/ai/learningAI/analytics.ts(126,13): error TS2322: Type 'SkillGapAnalysisRow' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'SkillGapAnalysisRow'.
src/services/ai/learningAI/analytics.ts(152,13): error TS2322: Type 'LearningPathOptimizationRow' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'LearningPathOptimizationRow'.
src/services/ai/learningAI/analytics.ts(180,13): error TS2322: Type 'PerformancePredictionRow' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'PerformancePredictionRow'.
src/services/ai/learningAI/analytics.ts(218,59): error TS2345: Argument of type 'LearningSessionRow' is not assignable to parameter of type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'LearningSessionRow'.
src/services/ai/learningAI/evaluationService.ts(58,9): error TS2353: Object literal may only specify known properties, and 'performance_factors' does not exist in type 'Partial<PerformancePredictionRow>'.
src/services/ai/learningAI/provider.ts(31,5): error TS2322: Type 'AIPersonalizedRecommendationResult' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'AIPersonalizedRecommendationResult'.
src/services/ai/learningAI/provider.ts(36,5): error TS2322: Type 'AISkillGapAnalysisResult' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'AISkillGapAnalysisResult'.
src/services/ai/learningAI/provider.ts(43,5): error TS2322: Type 'AILearningPathOptimizationResult' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'AILearningPathOptimizationResult'.
src/services/ai/learningAI/provider.ts(48,5): error TS2322: Type 'AIPerformancePredictionResult' is not assignable to type 'Record<string, unknown>'.
  Index signature for type 'string' is missing in type 'AIPerformancePredictionResult'.
src/services/ai/providers/AIGapScannerProvider.ts(400,35): error TS2339: Property 'min_quantity' does not exist on type 'Json'.
  Property 'min_quantity' does not exist on type 'string'.
src/services/ai/sterilization/analyticsServices.ts(220,9): error TS2739: Type '{ id: string; type: "efficiency_improvement"; title: string; description: string; confidence: number; priority: "medium"; actionable: true; recommendations: string[]; data: { currentEfficiency: number; potentialEfficiency: number; }; created_at: string; facility_id: string; }' is missing the following properties from type 'SterilizationAIInsight': severity, category, timestamp
src/services/ai/sterilization/analyticsServices.ts(261,9): error TS2739: Type '{ id: string; type: "maintenance_prediction"; title: string; description: string; confidence: number; priority: "high"; actionable: true; recommendations: string[]; data: { equipmentCount: number; daysUntilMaintenance: number; }; created_at: string; facility_id: string; }' is missing the following properties from type 'SterilizationAIInsight': severity, category, timestamp
src/services/ai/sterilization/settingsManager.ts(5,34): error TS2307: Cannot find module '@/services/audit/AuditLogger' or its corresponding type declarations.
src/services/ai/sterilization/settingsManager.ts(7,70): error TS2339: Property 'sterilization_ai_settings' does not exist on type '{ activity_feed: { Row: { activity_description: string; activity_title: string; activity_type: string; created_at: string; facility_id: string; id: string; metadata: Json; module: string; related_record_id: string; related_record_type: string; updated_at: string; user_id: string; }; Insert: { activity_description?: string; activity_title?: string; activity_type?: string; created_at?: string; facility_id?: string; id: string; metadata?: Json; module?: string; related_record_id?: string; related_record_type?: string; updated_at?: string; user_id?: string; }; Update: { activity_description?: string; activity_title?: string; activity_type?: string; created_at?: string; facility_id?: string; id?: string; metadata?: Json; module?: string; related_record_id?: string; related_record_type?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; ai_challenge_completions: { Row: { challenge_id: string; challenge_type: string; completed_at: string; created_at: string; data: Json; facility_id: string; id: string; rewards: Json; score: number; time_taken_ms: number; updated_at: string; user_id: string; }; Insert: { challenge_id?: string; challenge_type?: string; completed_at?: string; created_at?: string; data?: Json; facility_id?: string; id: string; rewards?: Json; score?: number; time_taken_ms?: number; updated_at?: string; user_id?: string; }; Update: { challenge_id?: string; challenge_type?: string; completed_at?: string; created_at?: string; data?: Json; facility_id?: string; id?: string; rewards?: Json; score?: number; time_taken_ms?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; ai_content_recommendations: { Row: { ai_confidence_score: number; ai_model_version: string; algorithm_used: string; click_count: number; click_through_rate: number; completion_count: number; completion_rate: number; confidence_level: number; content_context: Json; content_id: string; content_metadata: Json; created_at: string; display_count: number; expires_at: string; facility_id: string; feature_vector: Json; id: string; is_clicked: boolean; is_completed: boolean; is_displayed: boolean; last_ai_analysis: string; learning_context: string; model_version: string; reasoning: string; recommendation_algorithm: string; recommendation_reason: string; recommendation_score: number; recommendation_timing: string; recommendation_type: string; tags: string[]; updated_at: string; user_context: Json; user_feedback: string; user_feedback_rating: number; user_id: string; }; Insert: { ai_confidence_score?: number; ai_model_version?: string; algorithm_used?: string; click_count?: number; click_through_rate?: number; completion_count?: number; completion_rate?: number; confidence_level?: number; content_context?: Json; content_id?: string; content_metadata?: Json; created_at?: string; display_count?: number; expires_at?: string; facility_id?: string; feature_vector?: Json; id: string; is_clicked?: boolean; is_completed?: boolean; is_displayed?: boolean; last_ai_analysis?: string; learning_context?: string; model_version?: string; reasoning?: string; recommendation_algorithm?: string; recommendation_reason?: string; recommendation_score?: number; recommendation_timing?: string; recommendation_type?: string; tags?: string[]; updated_at?: string; user_context?: Json; user_feedback?: string; user_feedback_rating?: number; user_id?: string; }; Update: { ai_confidence_score?: number; ai_model_version?: string; algorithm_used?: string; click_count?: number; click_through_rate?: number; completion_count?: number; completion_rate?: number; confidence_level?: number; content_context?: Json; content_id?: string; content_metadata?: Json; created_at?: string; display_count?: number; expires_at?: string; facility_id?: string; feature_vector?: Json; id?: string; is_clicked?: boolean; is_completed?: boolean; is_displayed?: boolean; last_ai_analysis?: string; learning_context?: string; model_version?: string; reasoning?: string; recommendation_algorithm?: string; recommendation_reason?: string; recommendation_score?: number; recommendation_timing?: string; recommendation_type?: string; tags?: string[]; updated_at?: string; user_context?: Json; user_feedback?: string; user_feedback_rating?: number; user_id?: string; }; Relationships: []; }; ai_learning_analytics: { Row: { attention_metrics: Json; comprehension_indicators: Json; confidence_metrics: Json; content_items_accessed: string[]; created_at: string; difficulty_assessment: Json; engagement_score: number; facility_id: string; id: string; knowledge_gaps_identified: string[]; learning_path_progress: Json; learning_patterns: Json; model_predictions: Json; recommendation_effectiveness: Json; retention_indicators: Json; session_duration_minutes: number; session_end: string; session_id: string; session_start: string; skill_progression: Json; updated_at: string; user_id: string; }; Insert: { attention_metrics?: Json; comprehension_indicators?: Json; confidence_metrics?: Json; content_items_accessed?: string[]; created_at?: string; difficulty_assessment?: Json; engagement_score?: number; facility_id?: string; id: string; knowledge_gaps_identified?: string[]; learning_path_progress?: Json; learning_patterns?: Json; model_predictions?: Json; recommendation_effectiveness?: Json; retention_indicators?: Json; session_duration_minutes?: number; session_end?: string; session_id?: string; session_start?: string; skill_progression?: Json; updated_at?: string; user_id?: string; }; Update: { attention_metrics?: Json; comprehension_indicators?: Json; confidence_metrics?: Json; content_items_accessed?: string[]; created_at?: string; difficulty_assessment?: Json; engagement_score?: number; facility_id?: string; id?: string; knowledge_gaps_identified?: string[]; learning_path_progress?: Json; learning_patterns?: Json; model_predictions?: Json; recommendation_effectiveness?: Json; retention_indicators?: Json; session_duration_minutes?: number; session_end?: string; session_id?: string; session_start?: string; skill_progression?: Json; updated_at?: string; user_id?: string; }; Relationships: []; }; ai_learning_insights: { Row: { ai_confidence_score: number; avoided_content_types: string[]; completion_rate_by_category: Json; content_affinity_scores: Json; content_interaction_patterns: Json; created_at: string; difficulty_progression: Json; facility_id: string; id: string; knowledge_retention_rate: number; last_ai_analysis: string; learning_efficiency_score: number; learning_preferences: Json; learning_recommendations: Json; model_version: string; next_learning_milestone: string; optimal_study_duration: number; preferred_content_categories: string[]; skill_gaps: string[]; study_patterns: Json; updated_at: string; user_id: string; }; Insert: { ai_confidence_score?: number; avoided_content_types?: string[]; completion_rate_by_category?: Json; content_affinity_scores?: Json; content_interaction_patterns?: Json; created_at?: string; difficulty_progression?: Json; facility_id?: string; id: string; knowledge_retention_rate?: number; last_ai_analysis?: string; learning_efficiency_score?: number; learning_preferences?: Json; learning_recommendations?: Json; model_version?: string; next_learning_milestone?: string; optimal_study_duration?: number; preferred_content_categories?: string[]; skill_gaps?: string[]; study_patterns?: Json; updated_at?: string; user_id?: string; }; Update: { ai_confidence_score?: number; avoided_content_types?: string[]; completion_rate_by_category?: Json; content_affinity_scores?: Json; content_interaction_patterns?: Json; created_at?: string; difficulty_progression?: Json; facility_id?: string; id?: string; knowledge_retention_rate?: number; last_ai_analysis?: string; learning_efficiency_score?: number; learning_preferences?: Json; learning_recommendations?: Json; model_version?: string; next_learning_milestone?: string; optimal_study_duration?: number; preferred_content_categories?: string[]; skill_gaps?: string[]; study_patterns?: Json; updated_at?: string; user_id?: string; }; Relationships: []; }; ai_task_performance: { Row: { accuracy_score: number; completed_at: string; completion_time_ms: number; created_at: string; data: Json; facility_id: string; id: string; metadata: Json; task_id: string; task_type: string; updated_at: string; user_id: string; user_satisfaction: number; }; Insert: { accuracy_score?: number; completed_at?: string; completion_time_ms?: number; created_at?: string; data?: Json; facility_id?: string; id: string; metadata?: Json; task_id?: string; task_type?: string; updated_at?: string; user_id?: string; user_satisfaction?: number; }; Update: { accuracy_score?: number; completed_at?: string; completion_time_ms?: number; created_at?: string; data?: Json; facility_id?: string; id?: string; metadata?: Json; task_id?: string; task_type?: string; updated_at?: string; user_id?: string; user_satisfaction?: number; }; Relationships: []; }; audit_logs: { Row: { action: string; created_at: string; facility_id: string; id: string; ip_address: unknown; metadata: Json; module: string; new_values: Json; old_values: Json; record_id: string; session_id: string; table_name: string; updated_at: string; user_agent: string; user_id: string; }; Insert: { action?: string; created_at?: string; facility_id?: string; id: string; ip_address?: unknown; metadata?: Json; module?: string; new_values?: Json; old_values?: Json; record_id?: string; session_id?: string; table_name?: string; updated_at?: string; user_agent?: string; user_id?: string; }; Update: { action?: string; created_at?: string; facility_id?: string; id?: string; ip_address?: unknown; metadata?: Json; module?: string; new_values?: Json; old_values?: Json; record_id?: string; session_id?: string; table_name?: string; updated_at?: string; user_agent?: string; user_id?: string; }; Relationships: []; }; autoclave_equipment: { Row: { created_at: string; facility_id: string; id: string; location: string; model: string; name: string; serial_number: string; status: string; updated_at: string; }; Insert: { created_at?: string; facility_id?: string; id: string; location?: string; model?: string; name?: string; serial_number?: string; status?: string; updated_at?: string; }; Update: { created_at?: string; facility_id?: string; id?: string; location?: string; model?: string; name?: string; serial_number?: string; status?: string; updated_at?: string; }; Relationships: []; }; autoclave_receipts: { Row: { autoclave_id: string; created_at: string; id: string; receipt_number: string; }; Insert: { autoclave_id?: string; created_at?: string; id?: string; receipt_number: string; }; Update: { autoclave_id?: string; created_at?: string; id?: string; receipt_number?: string; }; Relationships: []; }; autoclaves: { Row: { created_at: string; facility_id: string; id: string; model: string; name: string; serial_number: string; }; Insert: { created_at?: string; facility_id?: string; id?: string; model?: string; name: string; serial_number?: string; }; Update: { created_at?: string; facility_id?: string; id?: string; model?: string; name?: string; serial_number?: string; }; Relationships: []; }; barcode_counts: { Row: { code: string; count: number; created_at: string; id: string; }; Insert: { code: string; count?: number; created_at?: string; id?: string; }; Update: { code?: string; count?: number; created_at?: string; id?: string; }; Relationships: []; }; bi_activity_log: { Row: { activity_type: string; created_at: string; description: string; facility_id: string; id: string; status: string; updated_at: string; user_id: string; }; Insert: { activity_type: string; created_at?: string; description?: string; facility_id: string; id?: string; status?: string; updated_at?: string; user_id?: string; }; Update: { activity_type?: string; created_at?: string; description?: string; facility_id?: string; id?: string; status?: string; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "bi_activity_log_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; bi_failure_incidents: { Row: { created_at: string; cycle_id: string; description: string; detected_at: string; facility_id: string; failure_reason: string; id: string; incident_type: string; metadata: Json; resolved_at: string; severity: string; status: string; updated_at: string; user_id: string; }; Insert: { created_at?: string; cycle_id?: string; description?: string; detected_at?: string; facility_id: string; failure_reason?: string; id?: string; incident_type: string; metadata?: Json; resolved_at?: string; severity: string; status: string; updated_at?: string; user_id?: string; }; Update: { created_at?: string; cycle_id?: string; description?: string; detected_at?: string; facility_id?: string; failure_reason?: string; id?: string; incident_type?: string; metadata?: Json; resolved_at?: string; severity?: string; status?: string; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "bi_failure_incidents_cycle_id_fkey"; columns: ["cycle_id"]; isOneToOne: false; referencedRelation: "sterilization_cycles"; referencedColumns: ["id"]; }, { foreignKeyName: "bi_failure_incidents_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }, { foreignKeyName: "bi_failure_incidents_user_id_fkey"; columns: ["user_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; bi_test_kits: { Row: { barcode: string; cost: number; created_at: string; created_by: string; expiry_date: string; facility_id: string; id: string; incubation_temperature_celsius: number; incubation_time_minutes: number; location: string; lot_number: string; manufacturer: string; max_quantity: number; min_quantity: number; name: string; notes: string; quantity: number; serial_number: string; status: string; supplier: string; updated_at: string; updated_by: string; }; Insert: { barcode?: string; cost?: number; created_at?: string; created_by?: string; expiry_date?: string; facility_id?: string; id: string; incubation_temperature_celsius?: number; incubation_time_minutes?: number; location?: string; lot_number?: string; manufacturer?: string; max_quantity?: number; min_quantity?: number; name?: string; notes?: string; quantity?: number; serial_number?: string; status?: string; supplier?: string; updated_at?: string; updated_by?: string; }; Update: { barcode?: string; cost?: number; created_at?: string; created_by?: string; expiry_date?: string; facility_id?: string; id?: string; incubation_temperature_celsius?: number; incubation_time_minutes?: number; location?: string; lot_number?: string; manufacturer?: string; max_quantity?: number; min_quantity?: number; name?: string; notes?: string; quantity?: number; serial_number?: string; status?: string; supplier?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; bi_test_results: { Row: { audit_signature: string; bi_expiry_date: string; bi_lot_number: string; compliance_notes: string; created_at: string; cycle_id: string; facility_id: string; failure_reason: string; id: string; incubation_temperature_celsius: number; incubation_time_minutes: number; operator_id: string; result: string; skip_reason: string; status: string; test_conditions: Json; test_date: string; test_number: string; updated_at: string; }; Insert: { audit_signature?: string; bi_expiry_date?: string; bi_lot_number?: string; compliance_notes?: string; created_at?: string; cycle_id?: string; facility_id?: string; failure_reason?: string; id: string; incubation_temperature_celsius?: number; incubation_time_minutes?: number; operator_id?: string; result?: string; skip_reason?: string; status?: string; test_conditions?: Json; test_date?: string; test_number?: string; updated_at?: string; }; Update: { audit_signature?: string; bi_expiry_date?: string; bi_lot_number?: string; compliance_notes?: string; created_at?: string; cycle_id?: string; facility_id?: string; failure_reason?: string; id?: string; incubation_temperature_celsius?: number; incubation_time_minutes?: number; operator_id?: string; result?: string; skip_reason?: string; status?: string; test_conditions?: Json; test_date?: string; test_number?: string; updated_at?: string; }; Relationships: []; }; biological_indicator_tests: { Row: { created_at: string; facility_id: string; id: string; notes: string; result: string; test_date: string; }; Insert: { created_at?: string; facility_id?: string; id?: string; notes?: string; result?: string; test_date?: string; }; Update: { created_at?: string; facility_id?: string; id?: string; notes?: string; result?: string; test_date?: string; }; Relationships: []; }; biological_indicators: { Row: { created_at: string; data: Json; facility_id: string; id: string; result: string; updated_at: string; }; Insert: { created_at?: string; data?: Json; facility_id?: string; id: string; result?: string; updated_at?: string; }; Update: { created_at?: string; data?: Json; facility_id?: string; id?: string; result?: string; updated_at?: string; }; Relationships: []; }; certifications: { Row: { created_at: string; description: string; id: string; is_active: boolean; issuing_organization: string; name: string; updated_at: string; user_id: string; valid_until: string; validity_period_months: number; }; Insert: { created_at?: string; description?: string; id: string; is_active?: boolean; issuing_organization?: string; name?: string; updated_at?: string; user_id?: string; valid_until?: string; validity_period_months?: number; }; Update: { created_at?: string; description?: string; id?: string; is_active?: boolean; issuing_organization?: string; name?: string; updated_at?: string; user_id?: string; valid_until?: string; validity_period_months?: number; }; Relationships: []; }; cleaning_tasks: { Row: { compliance_score: number; created_at: string; description: string; facility_id: string; id: string; room_id: string; status: string; updated_at: string; user_id: string; }; Insert: { compliance_score?: number; created_at?: string; description?: string; facility_id?: string; id: string; room_id?: string; status?: string; updated_at?: string; user_id?: string; }; Update: { compliance_score?: number; created_at?: string; description?: string; facility_id?: string; id?: string; room_id?: string; status?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; courses: { Row: { archived_at: string; author_id: string; content: Json; content_type: string; created_at: string; department: string; description: string; difficulty_level: string; domain: string; estimated_duration_minutes: number; facility_id: string; id: string; is_active: boolean; is_repeat: boolean; learning_objectives: string[]; media: Json; points: number; prerequisites: string[]; published_at: string; status: string; tags: string[]; title: string; updated_at: string; }; Insert: { archived_at?: string; author_id?: string; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; estimated_duration_minutes?: number; facility_id?: string; id: string; is_active?: boolean; is_repeat?: boolean; learning_objectives?: string[]; media?: Json; points?: number; prerequisites?: string[]; published_at?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; }; Update: { archived_at?: string; author_id?: string; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; estimated_duration_minutes?: number; facility_id?: string; id?: string; is_active?: boolean; is_repeat?: boolean; learning_objectives?: string[]; media?: Json; points?: number; prerequisites?: string[]; published_at?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "courses_author_id_fkey"; columns: ["author_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }, { foreignKeyName: "courses_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; email_alert_queue: { Row: { body: string; created_at: string; id: string; recipient_email: string; status: string; subject: string; }; Insert: { body: string; created_at?: string; id?: string; recipient_email: string; status?: string; subject: string; }; Update: { body?: string; created_at?: string; id?: string; recipient_email?: string; status?: string; subject?: string; }; Relationships: []; }; environmental_cleaning_predefined_tasks: { Row: { category_id: string; compliance_requirements: string[]; created_at: string; created_by: string; estimated_duration_minutes: number; facility_id: string; id: string; is_active: boolean; is_required: boolean; quality_checkpoints: string[]; required_equipment: string[]; required_supplies: string[]; safety_notes: string; task_description: string; task_name: string; task_order: number; updated_at: string; updated_by: string; }; Insert: { category_id?: string; compliance_requirements?: string[]; created_at?: string; created_by?: string; estimated_duration_minutes?: number; facility_id?: string; id: string; is_active?: boolean; is_required?: boolean; quality_checkpoints?: string[]; required_equipment?: string[]; required_supplies?: string[]; safety_notes?: string; task_description?: string; task_name?: string; task_order?: number; updated_at?: string; updated_by?: string; }; Update: { category_id?: string; compliance_requirements?: string[]; created_at?: string; created_by?: string; estimated_duration_minutes?: number; facility_id?: string; id?: string; is_active?: boolean; is_required?: boolean; quality_checkpoints?: string[]; required_equipment?: string[]; required_supplies?: string[]; safety_notes?: string; task_description?: string; task_name?: string; task_order?: number; updated_at?: string; updated_by?: string; }; Relationships: []; }; environmental_cleaning_task_categories: { Row: { color: string; created_at: string; created_by: string; description: string; facility_id: string; icon: string; id: string; is_active: boolean; name: string; sort_order: number; updated_at: string; updated_by: string; }; Insert: { color?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon?: string; id: string; is_active?: boolean; name?: string; sort_order?: number; updated_at?: string; updated_by?: string; }; Update: { color?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon?: string; id?: string; is_active?: boolean; name?: string; sort_order?: number; updated_at?: string; updated_by?: string; }; Relationships: []; }; environmental_cleaning_task_details: { Row: { completed_at: string; completed_by: string; compliance_verified: boolean; created_at: string; created_by: string; duration_minutes: number; end_time: string; environmental_clean_id: string; facility_id: string; id: string; is_completed: boolean; is_required: boolean; notes: string; photos: Json; quality_score: number; start_time: string; task_description: string; task_name: string; task_order: number; updated_at: string; updated_by: string; verified_at: string; verified_by: string; }; Insert: { completed_at?: string; completed_by?: string; compliance_verified?: boolean; created_at?: string; created_by?: string; duration_minutes?: number; end_time?: string; environmental_clean_id?: string; facility_id?: string; id: string; is_completed?: boolean; is_required?: boolean; notes?: string; photos?: Json; quality_score?: number; start_time?: string; task_description?: string; task_name?: string; task_order?: number; updated_at?: string; updated_by?: string; verified_at?: string; verified_by?: string; }; Update: { completed_at?: string; completed_by?: string; compliance_verified?: boolean; created_at?: string; created_by?: string; duration_minutes?: number; end_time?: string; environmental_clean_id?: string; facility_id?: string; id?: string; is_completed?: boolean; is_required?: boolean; notes?: string; photos?: Json; quality_score?: number; start_time?: string; task_description?: string; task_name?: string; task_order?: number; updated_at?: string; updated_by?: string; verified_at?: string; verified_by?: string; }; Relationships: []; }; environmental_cleans_enhanced: { Row: { checklist_items: Json; cleaner_id: string; cleaning_type: string; completed_items: Json; completed_time: string; compliance_notes: string; compliance_score: number; corrective_actions: Json; created_at: string; created_by: string; equipment_used: Json; facility_id: string; failed_items: Json; id: string; inventory_usage: Json; notes: string; photos: Json; quality_issues: Json; quality_score: number; room_id: string; room_name: string; scheduled_time: string; started_time: string; status: string; supervisor_notes: string; supervisor_review_at: string; supervisor_review_by: string; supplies_consumed: Json; task_completion_details: Json; task_durations: Json; task_end_times: Json; task_start_times: Json; updated_at: string; updated_by: string; user_activities: Json; verified_at: string; verified_by: string; }; Insert: { checklist_items?: Json; cleaner_id?: string; cleaning_type?: string; completed_items?: Json; completed_time?: string; compliance_notes?: string; compliance_score?: number; corrective_actions?: Json; created_at?: string; created_by?: string; equipment_used?: Json; facility_id?: string; failed_items?: Json; id: string; inventory_usage?: Json; notes?: string; photos?: Json; quality_issues?: Json; quality_score?: number; room_id?: string; room_name?: string; scheduled_time?: string; started_time?: string; status?: string; supervisor_notes?: string; supervisor_review_at?: string; supervisor_review_by?: string; supplies_consumed?: Json; task_completion_details?: Json; task_durations?: Json; task_end_times?: Json; task_start_times?: Json; updated_at?: string; updated_by?: string; user_activities?: Json; verified_at?: string; verified_by?: string; }; Update: { checklist_items?: Json; cleaner_id?: string; cleaning_type?: string; completed_items?: Json; completed_time?: string; compliance_notes?: string; compliance_score?: number; corrective_actions?: Json; created_at?: string; created_by?: string; equipment_used?: Json; facility_id?: string; failed_items?: Json; id?: string; inventory_usage?: Json; notes?: string; photos?: Json; quality_issues?: Json; quality_score?: number; room_id?: string; room_name?: string; scheduled_time?: string; started_time?: string; status?: string; supervisor_notes?: string; supervisor_review_at?: string; supervisor_review_by?: string; supplies_consumed?: Json; task_completion_details?: Json; task_durations?: Json; task_end_times?: Json; task_start_times?: Json; updated_at?: string; updated_by?: string; user_activities?: Json; verified_at?: string; verified_by?: string; }; Relationships: []; }; equipment_maintenance: { Row: { completed_date: string; cost: number; created_at: string; created_by: string; description: string; equipment_id: string; facility_id: string; id: string; maintenance_type: string; scheduled_date: string; status: string; technician: string; updated_at: string; updated_by: string; }; Insert: { completed_date?: string; cost?: number; created_at?: string; created_by?: string; description?: string; equipment_id?: string; facility_id?: string; id: string; maintenance_type?: string; scheduled_date?: string; status?: string; technician?: string; updated_at?: string; updated_by?: string; }; Update: { completed_date?: string; cost?: number; created_at?: string; created_by?: string; description?: string; equipment_id?: string; facility_id?: string; id?: string; maintenance_type?: string; scheduled_date?: string; status?: string; technician?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; error_logs: { Row: { context: Json; created_at: string; id: string; message: string; stack_trace: string; }; Insert: { context?: Json; created_at?: string; id?: string; message: string; stack_trace?: string; }; Update: { context?: Json; created_at?: string; id?: string; message?: string; stack_trace?: string; }; Relationships: []; }; error_reports: { Row: { context: string; created_at: string; created_by: string; error_message: string; error_stack: string; facility_id: string; id: string; metadata: Json; updated_at: string; updated_by: string; user_agent: string; user_id: string; }; Insert: { context?: string; created_at?: string; created_by?: string; error_message?: string; error_stack?: string; facility_id?: string; id: string; metadata?: Json; updated_at?: string; updated_by?: string; user_agent?: string; user_id?: string; }; Update: { context?: string; created_at?: string; created_by?: string; error_message?: string; error_stack?: string; facility_id?: string; id?: string; metadata?: Json; updated_at?: string; updated_by?: string; user_agent?: string; user_id?: string; }; Relationships: []; }; facilities: { Row: { address: Json; contact_info: Json; created_at: string; created_by: string; hourly_rate: number; id: string; is_active: boolean; name: string; settings: Json; staff_count: number; subscription_tier: string; type: string; updated_at: string; updated_by: string; }; Insert: { address?: Json; contact_info?: Json; created_at?: string; created_by?: string; hourly_rate?: number; id: string; is_active?: boolean; name?: string; settings?: Json; staff_count?: number; subscription_tier?: string; type?: string; updated_at?: string; updated_by?: string; }; Update: { address?: Json; contact_info?: Json; created_at?: string; created_by?: string; hourly_rate?: number; id?: string; is_active?: boolean; name?: string; settings?: Json; staff_count?: number; subscription_tier?: string; type?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; facility_compliance_settings: { Row: { allow_overrides: boolean; created_at: string; enforce_bi: boolean; enforce_ci: boolean; facility_id: string; id: string; updated_at: string; }; Insert: { allow_overrides?: boolean; created_at?: string; enforce_bi?: boolean; enforce_ci?: boolean; facility_id: string; id?: string; updated_at?: string; }; Update: { allow_overrides?: boolean; created_at?: string; enforce_bi?: boolean; enforce_ci?: boolean; facility_id?: string; id?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "facility_compliance_settings_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; facility_notification_config: { Row: { auto_notification_enabled: boolean; created_at: string; created_by: string; email_service_config: Json; escalation_levels: Json; facility_id: string; id: string; notification_channels: string[]; notification_delay_minutes: number; regulatory_bodies: string[]; sms_service_config: Json; updated_at: string; updated_by: string; webhook_service_config: Json; }; Insert: { auto_notification_enabled?: boolean; created_at?: string; created_by?: string; email_service_config?: Json; escalation_levels?: Json; facility_id?: string; id: string; notification_channels?: string[]; notification_delay_minutes?: number; regulatory_bodies?: string[]; sms_service_config?: Json; updated_at?: string; updated_by?: string; webhook_service_config?: Json; }; Update: { auto_notification_enabled?: boolean; created_at?: string; created_by?: string; email_service_config?: Json; escalation_levels?: Json; facility_id?: string; id?: string; notification_channels?: string[]; notification_delay_minutes?: number; regulatory_bodies?: string[]; sms_service_config?: Json; updated_at?: string; updated_by?: string; webhook_service_config?: Json; }; Relationships: []; }; facility_office_hours: { Row: { created_at: string; created_by: string; end_hour: number; facility_id: string; id: string; open_holidays: boolean; start_hour: number; timezone: string; updated_at: string; updated_by: string; working_days: Json; }; Insert: { created_at?: string; created_by?: string; end_hour?: number; facility_id?: string; id: string; open_holidays?: boolean; start_hour?: number; timezone?: string; updated_at?: string; updated_by?: string; working_days?: Json; }; Update: { created_at?: string; created_by?: string; end_hour?: number; facility_id?: string; id?: string; open_holidays?: boolean; start_hour?: number; timezone?: string; updated_at?: string; updated_by?: string; working_days?: Json; }; Relationships: []; }; home_challenge_completions: { Row: { challenge_id: string; completed_at: string; created_at: string; created_by: string; facility_id: string; id: string; points_earned: number; updated_at: string; updated_by: string; user_id: string; }; Insert: { challenge_id?: string; completed_at?: string; created_at?: string; created_by?: string; facility_id?: string; id: string; points_earned?: number; updated_at?: string; updated_by?: string; user_id?: string; }; Update: { challenge_id?: string; completed_at?: string; created_at?: string; created_by?: string; facility_id?: string; id?: string; points_earned?: number; updated_at?: string; updated_by?: string; user_id?: string; }; Relationships: []; }; home_challenges: { Row: { category: string; created_at: string; created_by: string; description: string; difficulty: string; facility_id: string; id: string; is_active: boolean; points: number; time_estimate: string; title: string; updated_at: string; updated_by: string; }; Insert: { category?: string; created_at?: string; created_by?: string; description?: string; difficulty?: string; facility_id?: string; id: string; is_active?: boolean; points?: number; time_estimate?: string; title?: string; updated_at?: string; updated_by?: string; }; Update: { category?: string; created_at?: string; created_by?: string; description?: string; difficulty?: string; facility_id?: string; id?: string; is_active?: boolean; points?: number; time_estimate?: string; title?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; home_daily_operations_tasks: { Row: { actual_duration: number; assigned_to: string; category: string; completed: boolean; completed_at: string; completed_by: string; created_at: string; created_by: string; description: string; due_date: string; estimated_duration: number; facility_id: string; id: string; points: number; priority: string; status: string; title: string; type: string; updated_at: string; updated_by: string; }; Insert: { actual_duration?: number; assigned_to?: string; category?: string; completed?: boolean; completed_at?: string; completed_by?: string; created_at?: string; created_by?: string; description?: string; due_date?: string; estimated_duration?: number; facility_id?: string; id: string; points?: number; priority?: string; status?: string; title?: string; type?: string; updated_at?: string; updated_by?: string; }; Update: { actual_duration?: number; assigned_to?: string; category?: string; completed?: boolean; completed_at?: string; completed_by?: string; created_at?: string; created_by?: string; description?: string; due_date?: string; estimated_duration?: number; facility_id?: string; id?: string; points?: number; priority?: string; status?: string; title?: string; type?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; inventory_ai_barcode_analysis: { Row: { analysis_result: Json; created_at: string; id: string; item_id: string; }; Insert: { analysis_result?: Json; created_at?: string; id?: string; item_id?: string; }; Update: { analysis_result?: Json; created_at?: string; id?: string; item_id?: string; }; Relationships: []; }; inventory_ai_settings: { Row: { ai_confidence_threshold: number; ai_data_retention_days: number; ai_enabled: boolean; ai_model_training: boolean; ai_version: string; anomaly_detection_enabled: boolean; audit_trail_enhancement_enabled: boolean; auto_classification_enabled: boolean; auto_optimization_enabled: boolean; azure_computer_vision_key_encrypted: string; barcode_scanning_enabled: boolean; compliance_monitoring_enabled: boolean; computer_vision_enabled: boolean; cost_optimization_enabled: boolean; created_at: string; created_by: string; cycle_optimization_enabled: boolean; damage_detection_enabled: boolean; data_sharing_enabled: boolean; demand_forecasting_enabled: boolean; encrypted_data_transmission: boolean; error_prevention_enabled: boolean; facility_id: string; google_vision_api_key_encrypted: string; id: string; image_recognition_enabled: boolean; intelligent_workflow_enabled: boolean; inventory_counting_enabled: boolean; local_ai_processing_enabled: boolean; maintenance_prediction_enabled: boolean; multi_format_barcode_support: boolean; openai_api_key_encrypted: string; performance_monitoring: boolean; predictive_analytics_enabled: boolean; predictive_maintenance_enabled: boolean; quality_assessment_enabled: boolean; quality_assurance_enabled: boolean; real_time_monitoring_enabled: boolean; real_time_processing_enabled: boolean; resource_optimization: boolean; risk_assessment_enabled: boolean; scanner_intelligence_enabled: boolean; seasonal_analysis_enabled: boolean; smart_categorization_enabled: boolean; smart_form_filling_enabled: boolean; smart_notifications_enabled: boolean; smart_validation_enabled: boolean; updated_at: string; updated_by: string; }; Insert: { ai_confidence_threshold?: number; ai_data_retention_days?: number; ai_enabled?: boolean; ai_model_training?: boolean; ai_version?: string; anomaly_detection_enabled?: boolean; audit_trail_enhancement_enabled?: boolean; auto_classification_enabled?: boolean; auto_optimization_enabled?: boolean; azure_computer_vision_key_encrypted?: string; barcode_scanning_enabled?: boolean; compliance_monitoring_enabled?: boolean; computer_vision_enabled?: boolean; cost_optimization_enabled?: boolean; created_at?: string; created_by?: string; cycle_optimization_enabled?: boolean; damage_detection_enabled?: boolean; data_sharing_enabled?: boolean; demand_forecasting_enabled?: boolean; encrypted_data_transmission?: boolean; error_prevention_enabled?: boolean; facility_id?: string; google_vision_api_key_encrypted?: string; id: string; image_recognition_enabled?: boolean; intelligent_workflow_enabled?: boolean; inventory_counting_enabled?: boolean; local_ai_processing_enabled?: boolean; maintenance_prediction_enabled?: boolean; multi_format_barcode_support?: boolean; openai_api_key_encrypted?: string; performance_monitoring?: boolean; predictive_analytics_enabled?: boolean; predictive_maintenance_enabled?: boolean; quality_assessment_enabled?: boolean; quality_assurance_enabled?: boolean; real_time_monitoring_enabled?: boolean; real_time_processing_enabled?: boolean; resource_optimization?: boolean; risk_assessment_enabled?: boolean; scanner_intelligence_enabled?: boolean; seasonal_analysis_enabled?: boolean; smart_categorization_enabled?: boolean; smart_form_filling_enabled?: boolean; smart_notifications_enabled?: boolean; smart_validation_enabled?: boolean; updated_at?: string; updated_by?: string; }; Update: { ai_confidence_threshold?: number; ai_data_retention_days?: number; ai_enabled?: boolean; ai_model_training?: boolean; ai_version?: string; anomaly_detection_enabled?: boolean; audit_trail_enhancement_enabled?: boolean; auto_classification_enabled?: boolean; auto_optimization_enabled?: boolean; azure_computer_vision_key_encrypted?: string; barcode_scanning_enabled?: boolean; compliance_monitoring_enabled?: boolean; computer_vision_enabled?: boolean; cost_optimization_enabled?: boolean; created_at?: string; created_by?: string; cycle_optimization_enabled?: boolean; damage_detection_enabled?: boolean; data_sharing_enabled?: boolean; demand_forecasting_enabled?: boolean; encrypted_data_transmission?: boolean; error_prevention_enabled?: boolean; facility_id?: string; google_vision_api_key_encrypted?: string; id?: string; image_recognition_enabled?: boolean; intelligent_workflow_enabled?: boolean; inventory_counting_enabled?: boolean; local_ai_processing_enabled?: boolean; maintenance_prediction_enabled?: boolean; multi_format_barcode_support?: boolean; openai_api_key_encrypted?: string; performance_monitoring?: boolean; predictive_analytics_enabled?: boolean; predictive_maintenance_enabled?: boolean; quality_assessment_enabled?: boolean; quality_assurance_enabled?: boolean; real_time_monitoring_enabled?: boolean; real_time_processing_enabled?: boolean; resource_optimization?: boolean; risk_assessment_enabled?: boolean; scanner_intelligence_enabled?: boolean; seasonal_analysis_enabled?: boolean; smart_categorization_enabled?: boolean; smart_form_filling_enabled?: boolean; smart_notifications_enabled?: boolean; smart_validation_enabled?: boolean; updated_at?: string; updated_by?: string; }; Relationships: []; }; inventory_checks: { Row: { accuracy: number; created_at: string; data: Json; facility_id: string; id: string; items_checked: number; updated_at: string; user_id: string; }; Insert: { accuracy?: number; created_at?: string; data?: Json; facility_id?: string; id: string; items_checked?: number; updated_at?: string; user_id?: string; }; Update: { accuracy?: number; created_at?: string; data?: Json; facility_id?: string; id?: string; items_checked?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; inventory_items: { Row: { category: string; created_at: string; data: Json; expiration_date: string; facility_id: string; id: string; name: string; quantity: number; reorder_point: number; unit_cost: number; updated_at: string; }; Insert: { category?: string; created_at?: string; data?: Json; expiration_date?: string; facility_id?: string; id: string; name?: string; quantity?: number; reorder_point?: number; unit_cost?: number; updated_at?: string; }; Update: { category?: string; created_at?: string; data?: Json; expiration_date?: string; facility_id?: string; id?: string; name?: string; quantity?: number; reorder_point?: number; unit_cost?: number; updated_at?: string; }; Relationships: []; }; inventory_orders: { Row: { created_at: string; data: Json; facility_id: string; id: string; status: string; total_items: number; updated_at: string; user_id: string; }; Insert: { created_at?: string; data?: Json; facility_id?: string; id: string; status?: string; total_items?: number; updated_at?: string; user_id?: string; }; Update: { created_at?: string; data?: Json; facility_id?: string; id?: string; status?: string; total_items?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; knowledge_article_ratings: { Row: { article_id: string; created_at: string; id: string; rating: number; review: string; updated_at: string; user_id: string; }; Insert: { article_id?: string; created_at?: string; id: string; rating?: number; review?: string; updated_at?: string; user_id?: string; }; Update: { article_id?: string; created_at?: string; id?: string; rating?: number; review?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; knowledge_article_views: { Row: { article_id: string; created_at: string; id: string; ip_address: unknown; session_id: string; updated_at: string; user_agent: string; user_id: string; view_duration_seconds: number; }; Insert: { article_id?: string; created_at?: string; id: string; ip_address?: unknown; session_id?: string; updated_at?: string; user_agent?: string; user_id?: string; view_duration_seconds?: number; }; Update: { article_id?: string; created_at?: string; id?: string; ip_address?: unknown; session_id?: string; updated_at?: string; user_agent?: string; user_id?: string; view_duration_seconds?: number; }; Relationships: []; }; knowledge_articles: { Row: { allow_comments: boolean; author_id: string; category_id: string; content: string; created_at: string; created_by: string; difficulty_level: string; editor_id: string; facility_id: string; featured: boolean; id: string; last_modified_at: string; published_at: string; reading_time_minutes: number; seo_description: string; seo_keywords: string[]; seo_title: string; status: string; summary: string; tags: string[]; title: string; updated_at: string; updated_by: string; version: number; visibility: string; }; Insert: { allow_comments?: boolean; author_id?: string; category_id?: string; content?: string; created_at?: string; created_by?: string; difficulty_level?: string; editor_id?: string; facility_id?: string; featured?: boolean; id: string; last_modified_at?: string; published_at?: string; reading_time_minutes?: number; seo_description?: string; seo_keywords?: string[]; seo_title?: string; status?: string; summary?: string; tags?: string[]; title?: string; updated_at?: string; updated_by?: string; version?: number; visibility?: string; }; Update: { allow_comments?: boolean; author_id?: string; category_id?: string; content?: string; created_at?: string; created_by?: string; difficulty_level?: string; editor_id?: string; facility_id?: string; featured?: boolean; id?: string; last_modified_at?: string; published_at?: string; reading_time_minutes?: number; seo_description?: string; seo_keywords?: string[]; seo_title?: string; status?: string; summary?: string; tags?: string[]; title?: string; updated_at?: string; updated_by?: string; version?: number; visibility?: string; }; Relationships: []; }; knowledge_bookmarks: { Row: { article_id: string; created_at: string; folder_name: string; id: string; notes: string; updated_at: string; user_id: string; }; Insert: { article_id?: string; created_at?: string; folder_name?: string; id: string; notes?: string; updated_at?: string; user_id?: string; }; Update: { article_id?: string; created_at?: string; folder_name?: string; id?: string; notes?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; knowledge_categories: { Row: { color: string; created_at: string; created_by: string; description: string; facility_id: string; icon: string; id: string; is_active: boolean; name: string; parent_category_id: string; sort_order: number; updated_at: string; updated_by: string; }; Insert: { color?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon?: string; id: string; is_active?: boolean; name?: string; parent_category_id?: string; sort_order?: number; updated_at?: string; updated_by?: string; }; Update: { color?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon?: string; id?: string; is_active?: boolean; name?: string; parent_category_id?: string; sort_order?: number; updated_at?: string; updated_by?: string; }; Relationships: []; }; knowledge_hub_content: { Row: { category: string; content_type: string; created_at: string; created_by: string; department: string; description: string; difficulty_level: string; domain: string; due_date: string; estimated_duration: number; facility_id: string; id: string; is_active: boolean; mandatory_repeat: boolean; passing_score: number; progress: number; repeat_settings: Json; status: string; tags: string[]; title: string; type: string; updated_at: string; updated_by: string; }; Insert: { category?: string; content_type?: string; created_at?: string; created_by?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; due_date?: string; estimated_duration?: number; facility_id?: string; id: string; is_active?: boolean; mandatory_repeat?: boolean; passing_score?: number; progress?: number; repeat_settings?: Json; status?: string; tags?: string[]; title?: string; type?: string; updated_at?: string; updated_by?: string; }; Update: { category?: string; content_type?: string; created_at?: string; created_by?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; due_date?: string; estimated_duration?: number; facility_id?: string; id?: string; is_active?: boolean; mandatory_repeat?: boolean; passing_score?: number; progress?: number; repeat_settings?: Json; status?: string; tags?: string[]; title?: string; type?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; knowledge_hub_user_progress: { Row: { assigned_at: string; attempts_count: number; completed_at: string; content_id: string; content_type: string; created_at: string; due_date: string; id: string; is_repeat: boolean; last_accessed: string; last_completed_at: string; metadata: Json; notes: string; progress_percentage: number; repeat_count: number; score: number; started_at: string; status: string; time_spent: number; updated_at: string; user_id: string; }; Insert: { assigned_at?: string; attempts_count?: number; completed_at?: string; content_id?: string; content_type?: string; created_at?: string; due_date?: string; id: string; is_repeat?: boolean; last_accessed?: string; last_completed_at?: string; metadata?: Json; notes?: string; progress_percentage?: number; repeat_count?: number; score?: number; started_at?: string; status?: string; time_spent?: number; updated_at?: string; user_id?: string; }; Update: { assigned_at?: string; attempts_count?: number; completed_at?: string; content_id?: string; content_type?: string; created_at?: string; due_date?: string; id?: string; is_repeat?: boolean; last_accessed?: string; last_completed_at?: string; metadata?: Json; notes?: string; progress_percentage?: number; repeat_count?: number; score?: number; started_at?: string; status?: string; time_spent?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; knowledge_learning_paths: { Row: { category_id: string; created_at: string; created_by: string; description: string; difficulty_level: string; estimated_duration_hours: number; facility_id: string; featured: boolean; id: string; is_active: boolean; title: string; updated_at: string; updated_by: string; }; Insert: { category_id?: string; created_at?: string; created_by?: string; description?: string; difficulty_level?: string; estimated_duration_hours?: number; facility_id?: string; featured?: boolean; id: string; is_active?: boolean; title?: string; updated_at?: string; updated_by?: string; }; Update: { category_id?: string; created_at?: string; created_by?: string; description?: string; difficulty_level?: string; estimated_duration_hours?: number; facility_id?: string; featured?: boolean; id?: string; is_active?: boolean; title?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; knowledge_quiz_attempts: { Row: { answers: Json; attempt_number: number; completed_at: string; earned_points: number; id: string; quiz_id: string; score_percentage: number; started_at: string; status: string; time_taken_minutes: number; total_points: number; updated_at: string; user_id: string; }; Insert: { answers?: Json; attempt_number?: number; completed_at?: string; earned_points?: number; id: string; quiz_id?: string; score_percentage?: number; started_at?: string; status?: string; time_taken_minutes?: number; total_points?: number; updated_at?: string; user_id?: string; }; Update: { answers?: Json; attempt_number?: number; completed_at?: string; earned_points?: number; id?: string; quiz_id?: string; score_percentage?: number; started_at?: string; status?: string; time_taken_minutes?: number; total_points?: number; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "knowledge_quiz_attempts_quiz_id_fkey"; columns: ["quiz_id"]; isOneToOne: false; referencedRelation: "knowledge_quizzes"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_quiz_attempts_user_id_fkey"; columns: ["user_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; knowledge_quizzes: { Row: { category_id: string; created_at: string; created_by: string; description: string; difficulty_level: string; facility_id: string; id: string; is_active: boolean; max_attempts: number; passing_score_percentage: number; time_limit_minutes: number; title: string; updated_at: string; updated_by: string; }; Insert: { category_id?: string; created_at?: string; created_by?: string; description?: string; difficulty_level?: string; facility_id?: string; id: string; is_active?: boolean; max_attempts?: number; passing_score_percentage?: number; time_limit_minutes?: number; title?: string; updated_at?: string; updated_by?: string; }; Update: { category_id?: string; created_at?: string; created_by?: string; description?: string; difficulty_level?: string; facility_id?: string; id?: string; is_active?: boolean; max_attempts?: number; passing_score_percentage?: number; time_limit_minutes?: number; title?: string; updated_at?: string; updated_by?: string; }; Relationships: [{ foreignKeyName: "knowledge_quizzes_category_id_fkey"; columns: ["category_id"]; isOneToOne: false; referencedRelation: "knowledge_categories"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_quizzes_created_by_fkey"; columns: ["created_by"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_quizzes_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_quizzes_updated_by_fkey"; columns: ["updated_by"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; knowledge_user_progress: { Row: { article_id: string; completed_at: string; completion_percentage: number; created_at: string; id: string; learning_path_id: string; notes: string; progress_status: string; started_at: string; step_id: string; time_spent_minutes: number; updated_at: string; user_id: string; }; Insert: { article_id?: string; completed_at?: string; completion_percentage?: number; created_at?: string; id: string; learning_path_id?: string; notes?: string; progress_status?: string; started_at?: string; step_id?: string; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Update: { article_id?: string; completed_at?: string; completion_percentage?: number; created_at?: string; id?: string; learning_path_id?: string; notes?: string; progress_status?: string; started_at?: string; step_id?: string; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "knowledge_user_progress_article_id_fkey"; columns: ["article_id"]; isOneToOne: false; referencedRelation: "courses"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_user_progress_learning_path_id_fkey"; columns: ["learning_path_id"]; isOneToOne: false; referencedRelation: "learning_pathways"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_user_progress_step_id_fkey"; columns: ["step_id"]; isOneToOne: false; referencedRelation: "learning_modules"; referencedColumns: ["id"]; }, { foreignKeyName: "knowledge_user_progress_user_id_fkey"; columns: ["user_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; learning_modules: { Row: { content_url: string; created_at: string; description: string; difficulty_level: string; estimated_duration_minutes: number; id: string; is_active: boolean; module_type: string; score: number; time_spent: number; title: string; updated_at: string; user_id: string; }; Insert: { content_url?: string; created_at?: string; description?: string; difficulty_level?: string; estimated_duration_minutes?: number; id: string; is_active?: boolean; module_type?: string; score?: number; time_spent?: number; title?: string; updated_at?: string; user_id?: string; }; Update: { content_url?: string; created_at?: string; description?: string; difficulty_level?: string; estimated_duration_minutes?: number; id?: string; is_active?: boolean; module_type?: string; score?: number; time_spent?: number; title?: string; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "learning_modules_user_id_fkey"; columns: ["user_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; learning_pathways: { Row: { allow_parallel: boolean; archived_at: string; author_id: string; completion_threshold: number; created_at: string; department: string; description: string; difficulty_level: string; domain: string; estimated_total_duration_minutes: number; id: string; is_active: boolean; is_sequential: boolean; media: Json; pathway_items: Json; points: number; prerequisites: Json; published_at: string; status: string; tags: string[]; target_audience: string[]; title: string; total_items: number; updated_at: string; }; Insert: { allow_parallel?: boolean; archived_at?: string; author_id?: string; completion_threshold?: number; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; estimated_total_duration_minutes?: number; id: string; is_active?: boolean; is_sequential?: boolean; media?: Json; pathway_items?: Json; points?: number; prerequisites?: Json; published_at?: string; status?: string; tags?: string[]; target_audience?: string[]; title?: string; total_items?: number; updated_at?: string; }; Update: { allow_parallel?: boolean; archived_at?: string; author_id?: string; completion_threshold?: number; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; estimated_total_duration_minutes?: number; id?: string; is_active?: boolean; is_sequential?: boolean; media?: Json; pathway_items?: Json; points?: number; prerequisites?: Json; published_at?: string; status?: string; tags?: string[]; target_audience?: string[]; title?: string; total_items?: number; updated_at?: string; }; Relationships: [{ foreignKeyName: "learning_pathways_author_id_fkey"; columns: ["author_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; login_attempts: { Row: { attempted_at: string; created_at: string; email: string; id: string; ip_address: string; success: boolean; updated_at: string; user_agent: string; }; Insert: { attempted_at?: string; created_at?: string; email?: string; id: string; ip_address?: string; success?: boolean; updated_at?: string; user_agent?: string; }; Update: { attempted_at?: string; created_at?: string; email?: string; id?: string; ip_address?: string; success?: boolean; updated_at?: string; user_agent?: string; }; Relationships: []; }; monitoring_events: { Row: { action: string; category: string; created_at: string; facility_id: string; id: string; level: string; message: string; metadata: Json; updated_at: string; user_id: string; }; Insert: { action?: string; category?: string; created_at?: string; facility_id?: string; id: string; level?: string; message?: string; metadata?: Json; updated_at?: string; user_id?: string; }; Update: { action?: string; category?: string; created_at?: string; facility_id?: string; id?: string; level?: string; message?: string; metadata?: Json; updated_at?: string; user_id?: string; }; Relationships: []; }; monitoring_performance_metrics: { Row: { created_at: string; facility_id: string; id: string; metric_name: string; metric_value: number; recorded_at: string; updated_at: string; }; Insert: { created_at?: string; facility_id: string; id?: string; metric_name: string; metric_value?: number; recorded_at?: string; updated_at?: string; }; Update: { created_at?: string; facility_id?: string; id?: string; metric_name?: string; metric_value?: number; recorded_at?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "monitoring_performance_metrics_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; notifications: { Row: { action_data: Json; action_url: string; created_at: string; expires_at: string; facility_id: string; id: string; is_read: boolean; message: string; module: string; notification_type: string; read_at: string; severity: string; title: string; updated_at: string; user_id: string; }; Insert: { action_data?: Json; action_url?: string; created_at?: string; expires_at?: string; facility_id?: string; id: string; is_read?: boolean; message?: string; module?: string; notification_type?: string; read_at?: string; severity?: string; title?: string; updated_at?: string; user_id?: string; }; Update: { action_data?: Json; action_url?: string; created_at?: string; expires_at?: string; facility_id?: string; id?: string; is_read?: boolean; message?: string; module?: string; notification_type?: string; read_at?: string; severity?: string; title?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; office_closures: { Row: { closure_date: string; closure_type: string; created_at: string; created_by: string; description: string; facility_id: string; id: string; is_recurring: boolean; recurring_pattern: Json; updated_at: string; }; Insert: { closure_date?: string; closure_type?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; id: string; is_recurring?: boolean; recurring_pattern?: Json; updated_at?: string; }; Update: { closure_date?: string; closure_type?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; id?: string; is_recurring?: boolean; recurring_pattern?: Json; updated_at?: string; }; Relationships: []; }; performance_metrics: { Row: { created_at: string; date: string; facility_id: string; id: string; metric_name: string; metric_value: number; month: string; updated_at: string; user_id: string; }; Insert: { created_at?: string; date?: string; facility_id?: string; id: string; metric_name?: string; metric_value?: number; month?: string; updated_at?: string; user_id?: string; }; Update: { created_at?: string; date?: string; facility_id?: string; id?: string; metric_name?: string; metric_value?: number; month?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; policies: { Row: { archived_at: string; author_id: string; compliance_required: boolean; content: Json; content_type: string; created_at: string; department: string; description: string; domain: string; effective_date: string; estimated_read_time_minutes: number; id: string; is_active: boolean; is_repeat: boolean; media: Json; points: number; policy_number: string; published_at: string; review_date: string; status: string; tags: string[]; title: string; updated_at: string; version: string; }; Insert: { archived_at?: string; author_id?: string; compliance_required?: boolean; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; domain?: string; effective_date?: string; estimated_read_time_minutes?: number; id: string; is_active?: boolean; is_repeat?: boolean; media?: Json; points?: number; policy_number?: string; published_at?: string; review_date?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; version?: string; }; Update: { archived_at?: string; author_id?: string; compliance_required?: boolean; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; domain?: string; effective_date?: string; estimated_read_time_minutes?: number; id?: string; is_active?: boolean; is_repeat?: boolean; media?: Json; points?: number; policy_number?: string; published_at?: string; review_date?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; version?: string; }; Relationships: [{ foreignKeyName: "policies_author_id_fkey"; columns: ["author_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; procedures: { Row: { archived_at: string; author_id: string; content: Json; content_type: string; created_at: string; department: string; description: string; difficulty_level: string; domain: string; equipment_required: string[]; estimated_duration_minutes: number; id: string; is_active: boolean; is_repeat: boolean; materials_required: string[]; media: Json; points: number; procedure_number: string; published_at: string; safety_level: string; status: string; tags: string[]; title: string; updated_at: string; version: string; }; Insert: { archived_at?: string; author_id?: string; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; equipment_required?: string[]; estimated_duration_minutes?: number; id: string; is_active?: boolean; is_repeat?: boolean; materials_required?: string[]; media?: Json; points?: number; procedure_number?: string; published_at?: string; safety_level?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; version?: string; }; Update: { archived_at?: string; author_id?: string; content?: Json; content_type?: string; created_at?: string; department?: string; description?: string; difficulty_level?: string; domain?: string; equipment_required?: string[]; estimated_duration_minutes?: number; id?: string; is_active?: boolean; is_repeat?: boolean; materials_required?: string[]; media?: Json; points?: number; procedure_number?: string; published_at?: string; safety_level?: string; status?: string; tags?: string[]; title?: string; updated_at?: string; version?: string; }; Relationships: [{ foreignKeyName: "procedures_author_id_fkey"; columns: ["author_id"]; isOneToOne: false; referencedRelation: "users"; referencedColumns: ["id"]; }]; }; product_feedback: { Row: { assigned_to: string; browser_info: Json; contact_email: string; created_at: string; description: string; estimated_effort: string; facility_id: string; id: string; internal_notes: string; page_url: string; priority: string; resolution_notes: string; status: string; target_version: string; title: string; type: string; updated_at: string; user_agent: string; user_id: string; }; Insert: { assigned_to?: string; browser_info?: Json; contact_email?: string; created_at?: string; description: string; estimated_effort?: string; facility_id?: string; id?: string; internal_notes?: string; page_url?: string; priority?: string; resolution_notes?: string; status?: string; target_version?: string; title: string; type: string; updated_at?: string; user_agent?: string; user_id?: string; }; Update: { assigned_to?: string; browser_info?: Json; contact_email?: string; created_at?: string; description?: string; estimated_effort?: string; facility_id?: string; id?: string; internal_notes?: string; page_url?: string; priority?: string; resolution_notes?: string; status?: string; target_version?: string; title?: string; type?: string; updated_at?: string; user_agent?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "product_feedback_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; quality_incidents: { Row: { cost_impact: number; created_at: string; description: string; facility_id: string; id: string; incident_type: string; metadata: Json; reported_by: string; resolved_at: string; severity: string; status: string; updated_at: string; user_id: string; }; Insert: { cost_impact?: number; created_at?: string; description?: string; facility_id?: string; id?: string; incident_type?: string; metadata?: Json; reported_by?: string; resolved_at?: string; severity?: string; status?: string; updated_at?: string; user_id?: string; }; Update: { cost_impact?: number; created_at?: string; description?: string; facility_id?: string; id?: string; incident_type?: string; metadata?: Json; reported_by?: string; resolved_at?: string; severity?: string; status?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; quick_actions: { Row: { action_color: string; action_icon: string; action_name: string; action_target: string; action_type: string; created_at: string; facility_id: string; id: string; is_active: boolean; position: number; updated_at: string; user_id: string; }; Insert: { action_color?: string; action_icon?: string; action_name?: string; action_target?: string; action_type?: string; created_at?: string; facility_id?: string; id?: string; is_active?: boolean; position?: number; updated_at?: string; user_id?: string; }; Update: { action_color?: string; action_icon?: string; action_name?: string; action_target?: string; action_type?: string; created_at?: string; facility_id?: string; id?: string; is_active?: boolean; position?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; realtime_subscriptions: { Row: { channel: string; id: string; subscribed_at: string; user_id: string; }; Insert: { channel: string; id?: string; subscribed_at?: string; user_id?: string; }; Update: { channel?: string; id?: string; subscribed_at?: string; user_id?: string; }; Relationships: []; }; rooms: { Row: { barcode: string; building: string; capacity: number; created_at: string; created_by: string; department: string; floor: string; id: string; is_active: boolean; name: string; room_type: string; updated_at: string; updated_by: string; }; Insert: { barcode?: string; building?: string; capacity?: number; created_at?: string; created_by?: string; department?: string; floor?: string; id?: string; is_active?: boolean; name?: string; room_type?: string; updated_at?: string; updated_by?: string; }; Update: { barcode?: string; building?: string; capacity?: number; created_at?: string; created_by?: string; department?: string; floor?: string; id?: string; is_active?: boolean; name?: string; room_type?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; sds_chemical_recommendations: { Row: { ai_confidence_score: number; ai_reasoning: string; assigned_to: string; category: string; chemical_name: string; completed_at: string; created_at: string; estimated_time_to_create: number; facility_id: string; gap_analysis_id: string; id: string; manufacturer: string; priority: string; reason: string; risk_level: string; status: string; suggested_action: string; updated_at: string; user_notes: string; user_rating: number; }; Insert: { ai_confidence_score?: number; ai_reasoning?: string; assigned_to?: string; category?: string; chemical_name?: string; completed_at?: string; created_at?: string; estimated_time_to_create?: number; facility_id?: string; gap_analysis_id?: string; id?: string; manufacturer?: string; priority?: string; reason?: string; risk_level?: string; status?: string; suggested_action?: string; updated_at?: string; user_notes?: string; user_rating?: number; }; Update: { ai_confidence_score?: number; ai_reasoning?: string; assigned_to?: string; category?: string; chemical_name?: string; completed_at?: string; created_at?: string; estimated_time_to_create?: number; facility_id?: string; gap_analysis_id?: string; id?: string; manufacturer?: string; priority?: string; reason?: string; risk_level?: string; status?: string; suggested_action?: string; updated_at?: string; user_notes?: string; user_rating?: number; }; Relationships: []; }; sds_gap_analysis: { Row: { ai_insights: Json; analysis_date: string; analysis_type: string; compliance_score: number; coverage_percentage: number; created_at: string; estimated_total_time: number; existing_sds_sheets: number; facility_id: string; high_priority_missing: number; id: string; inventory_snapshot: Json; library_snapshot: Json; low_priority_missing: number; medium_priority_missing: number; missing_sds_sheets: number; recommendations: Json; total_chemicals: number; }; Insert: { ai_insights?: Json; analysis_date?: string; analysis_type?: string; compliance_score?: number; coverage_percentage?: number; created_at?: string; estimated_total_time?: number; existing_sds_sheets?: number; facility_id?: string; high_priority_missing?: number; id?: string; inventory_snapshot?: Json; library_snapshot?: Json; low_priority_missing?: number; medium_priority_missing?: number; missing_sds_sheets?: number; recommendations?: Json; total_chemicals?: number; }; Update: { ai_insights?: Json; analysis_date?: string; analysis_type?: string; compliance_score?: number; coverage_percentage?: number; created_at?: string; estimated_total_time?: number; existing_sds_sheets?: number; facility_id?: string; high_priority_missing?: number; id?: string; inventory_snapshot?: Json; library_snapshot?: Json; low_priority_missing?: number; medium_priority_missing?: number; missing_sds_sheets?: number; recommendations?: Json; total_chemicals?: number; }; Relationships: []; }; sds_sheets: { Row: { acute_effects: string[]; ai_confidence_score: number; ai_recommendations: Json; appearance: string; aquatic_toxicity: string; bioaccumulation: string; biodegradability: string; boiling_point: string; carcinogenicity: string; cas_number: string; chemical_name: string; chronic_effects: string[]; conditions_to_avoid: string[]; created_at: string; created_by: string; decomposition_products: string[]; density: string; description: string; disposal_methods: string[]; dot_classification: string; emergency_procedures: string[]; engineering_controls: string[]; environmental_hazards: string[]; epa_regulations: string[]; exposure_limits: string[]; extinguishing_media: string[]; facility_id: string; first_aid_eye_contact: string; first_aid_ingestion: string; first_aid_inhalation: string; first_aid_skin_contact: string; ghs_classification: string[]; health_hazards: string[]; id: string; incompatible_materials: string[]; last_ai_analysis: string; melting_point: string; molecular_formula: string; molecular_weight: number; monitoring_methods: string[]; notes: string; odor: string; osha_hazards: string[]; packing_group: string; pdf_file_path: string; pdf_file_size: number; pdf_uploaded_at: string; personal_protection: string[]; physical_hazards: string[]; priority: string; proper_shipping_name: string; protective_equipment: string[]; reference_list: string[]; reproductive_toxicity: string; revision_date: string; risk_level: string; safe_handling: string[]; solubility: string; special_hazards: string[]; stability: string; status: string; storage_requirements: string[]; title: string; transport_hazard_class: string; un_number: string; updated_at: string; updated_by: string; ventilation_requirements: string; version: string; }; Insert: { acute_effects?: string[]; ai_confidence_score?: number; ai_recommendations?: Json; appearance?: string; aquatic_toxicity?: string; bioaccumulation?: string; biodegradability?: string; boiling_point?: string; carcinogenicity?: string; cas_number?: string; chemical_name?: string; chronic_effects?: string[]; conditions_to_avoid?: string[]; created_at?: string; created_by?: string; decomposition_products?: string[]; density?: string; description?: string; disposal_methods?: string[]; dot_classification?: string; emergency_procedures?: string[]; engineering_controls?: string[]; environmental_hazards?: string[]; epa_regulations?: string[]; exposure_limits?: string[]; extinguishing_media?: string[]; facility_id?: string; first_aid_eye_contact?: string; first_aid_ingestion?: string; first_aid_inhalation?: string; first_aid_skin_contact?: string; ghs_classification?: string[]; health_hazards?: string[]; id?: string; incompatible_materials?: string[]; last_ai_analysis?: string; melting_point?: string; molecular_formula?: string; molecular_weight?: number; monitoring_methods?: string[]; notes?: string; odor?: string; osha_hazards?: string[]; packing_group?: string; pdf_file_path?: string; pdf_file_size?: number; pdf_uploaded_at?: string; personal_protection?: string[]; physical_hazards?: string[]; priority?: string; proper_shipping_name?: string; protective_equipment?: string[]; reference_list?: string[]; reproductive_toxicity?: string; revision_date?: string; risk_level?: string; safe_handling?: string[]; solubility?: string; special_hazards?: string[]; stability?: string; status?: string; storage_requirements?: string[]; title?: string; transport_hazard_class?: string; un_number?: string; updated_at?: string; updated_by?: string; ventilation_requirements?: string; version?: string; }; Update: { acute_effects?: string[]; ai_confidence_score?: number; ai_recommendations?: Json; appearance?: string; aquatic_toxicity?: string; bioaccumulation?: string; biodegradability?: string; boiling_point?: string; carcinogenicity?: string; cas_number?: string; chemical_name?: string; chronic_effects?: string[]; conditions_to_avoid?: string[]; created_at?: string; created_by?: string; decomposition_products?: string[]; density?: string; description?: string; disposal_methods?: string[]; dot_classification?: string; emergency_procedures?: string[]; engineering_controls?: string[]; environmental_hazards?: string[]; epa_regulations?: string[]; exposure_limits?: string[]; extinguishing_media?: string[]; facility_id?: string; first_aid_eye_contact?: string; first_aid_ingestion?: string; first_aid_inhalation?: string; first_aid_skin_contact?: string; ghs_classification?: string[]; health_hazards?: string[]; id?: string; incompatible_materials?: string[]; last_ai_analysis?: string; melting_point?: string; molecular_formula?: string; molecular_weight?: number; monitoring_methods?: string[]; notes?: string; odor?: string; osha_hazards?: string[]; packing_group?: string; pdf_file_path?: string; pdf_file_size?: number; pdf_uploaded_at?: string; personal_protection?: string[]; physical_hazards?: string[]; priority?: string; proper_shipping_name?: string; protective_equipment?: string[]; reference_list?: string[]; reproductive_toxicity?: string; revision_date?: string; risk_level?: string; safe_handling?: string[]; solubility?: string; special_hazards?: string[]; stability?: string; status?: string; storage_requirements?: string[]; title?: string; transport_hazard_class?: string; un_number?: string; updated_at?: string; updated_by?: string; ventilation_requirements?: string; version?: string; }; Relationships: []; }; status_types: { Row: { alert_level: string; auto_transition: boolean; category: string; color: string; created_at: string; created_by: string; description: string; facility_id: string; icon: string; id: string; is_core: boolean; is_published: boolean; name: string; requires_verification: boolean; sort_order: number; transition_to: string; updated_at: string; updated_by: string; }; Insert: { alert_level?: string; auto_transition?: boolean; category?: string; color: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon: string; id?: string; is_core?: boolean; is_published?: boolean; name: string; requires_verification?: boolean; sort_order?: number; transition_to?: string; updated_at?: string; updated_by?: string; }; Update: { alert_level?: string; auto_transition?: boolean; category?: string; color?: string; created_at?: string; created_by?: string; description?: string; facility_id?: string; icon?: string; id?: string; is_core?: boolean; is_published?: boolean; name?: string; requires_verification?: boolean; sort_order?: number; transition_to?: string; updated_at?: string; updated_by?: string; }; Relationships: [{ foreignKeyName: "status_types_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; sterilization_batches: { Row: { batch_name: string; batch_type: string; chemical_indicator_added: boolean; completed_at: string; created_at: string; cycle_id: string; facility_id: string; id: string; notes: string; package_count: number; package_id: string; package_size: string; package_type: string; packaged_at: string; packaged_by: string; priority: string; requested_by: string; requested_for: string; status: string; total_items: number; updated_at: string; }; Insert: { batch_name?: string; batch_type?: string; chemical_indicator_added?: boolean; completed_at?: string; created_at?: string; cycle_id?: string; facility_id?: string; id: string; notes?: string; package_count?: number; package_id?: string; package_size?: string; package_type?: string; packaged_at?: string; packaged_by?: string; priority?: string; requested_by?: string; requested_for?: string; status?: string; total_items?: number; updated_at?: string; }; Update: { batch_name?: string; batch_type?: string; chemical_indicator_added?: boolean; completed_at?: string; created_at?: string; cycle_id?: string; facility_id?: string; id?: string; notes?: string; package_count?: number; package_id?: string; package_size?: string; package_type?: string; packaged_at?: string; packaged_by?: string; priority?: string; requested_by?: string; requested_for?: string; status?: string; total_items?: number; updated_at?: string; }; Relationships: []; }; sterilization_cycle_tools: { Row: { created_at: string; cycle_id: string; facility_id: string; id: string; status: string; tool_id: string; updated_at: string; }; Insert: { created_at?: string; cycle_id: string; facility_id: string; id?: string; status?: string; tool_id: string; updated_at?: string; }; Update: { created_at?: string; cycle_id?: string; facility_id?: string; id?: string; status?: string; tool_id?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "sterilization_cycle_tools_cycle_id_fkey"; columns: ["cycle_id"]; isOneToOne: false; referencedRelation: "sterilization_cycles"; referencedColumns: ["id"]; }, { foreignKeyName: "sterilization_cycle_tools_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }, { foreignKeyName: "sterilization_cycle_tools_tool_id_fkey"; columns: ["tool_id"]; isOneToOne: false; referencedRelation: "tools"; referencedColumns: ["id"]; }]; }; sterilization_cycles: { Row: { autoclave_id: string; created_at: string; cycle_number: string; cycle_time: number; cycle_type: string; duration_minutes: number; end_time: string; facility_id: string; id: string; notes: string; operator_id: string; parameters: Json; pressure_psi: number; results: Json; start_time: string; status: string; temperature_celsius: number; tool_batch_id: string; tools: Json; updated_at: string; }; Insert: { autoclave_id?: string; created_at?: string; cycle_number?: string; cycle_time?: number; cycle_type?: string; duration_minutes?: number; end_time?: string; facility_id?: string; id: string; notes?: string; operator_id?: string; parameters?: Json; pressure_psi?: number; results?: Json; start_time?: string; status?: string; temperature_celsius?: number; tool_batch_id?: string; tools?: Json; updated_at?: string; }; Update: { autoclave_id?: string; created_at?: string; cycle_number?: string; cycle_time?: number; cycle_type?: string; duration_minutes?: number; end_time?: string; facility_id?: string; id?: string; notes?: string; operator_id?: string; parameters?: Json; pressure_psi?: number; results?: Json; start_time?: string; status?: string; temperature_celsius?: number; tool_batch_id?: string; tools?: Json; updated_at?: string; }; Relationships: [{ foreignKeyName: "sterilization_cycles_autoclave_id_fkey"; columns: ["autoclave_id"]; isOneToOne: false; referencedRelation: "autoclave_equipment"; referencedColumns: ["id"]; }, { foreignKeyName: "sterilization_cycles_tool_batch_id_fkey"; columns: ["tool_batch_id"]; isOneToOne: false; referencedRelation: "tool_batches"; referencedColumns: ["id"]; }]; }; sterilization_events: { Row: { created_at: string; event_type: string; facility_id: string; id: string; notes: string; occurred_at: string; session_id: string; updated_at: string; }; Insert: { created_at?: string; event_type: string; facility_id: string; id?: string; notes?: string; occurred_at?: string; session_id: string; updated_at?: string; }; Update: { created_at?: string; event_type?: string; facility_id?: string; id?: string; notes?: string; occurred_at?: string; session_id?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "sterilization_events_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }, { foreignKeyName: "sterilization_events_session_id_fkey"; columns: ["session_id"]; isOneToOne: false; referencedRelation: "sterilization_sessions"; referencedColumns: ["id"]; }]; }; sterilization_sessions: { Row: { created_at: string; cycle_id: string; end_time: string; facility_id: string; id: string; start_time: string; status: string; updated_at: string; }; Insert: { created_at?: string; cycle_id?: string; end_time?: string; facility_id: string; id?: string; start_time: string; status: string; updated_at?: string; }; Update: { created_at?: string; cycle_id?: string; end_time?: string; facility_id?: string; id?: string; start_time?: string; status?: string; updated_at?: string; }; Relationships: [{ foreignKeyName: "sterilization_sessions_cycle_id_fkey"; columns: ["cycle_id"]; isOneToOne: false; referencedRelation: "sterilization_cycles"; referencedColumns: ["id"]; }, { foreignKeyName: "sterilization_sessions_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; sterilization_tools: { Row: { barcode: string; created_at: string; current_cycle_id: string; facility_id: string; gps_accuracy: number; id: string; last_sterilized: string; latitude: number; location: string; location_timestamp: string; longitude: number; maintenance_due_date: string; manufacturer: string; metadata: Json; model: string; notes: string; serial_number: string; status: string; sterilization_count: number; tool_name: string; tool_type: string; updated_at: string; }; Insert: { barcode?: string; created_at?: string; current_cycle_id?: string; facility_id?: string; gps_accuracy?: number; id?: string; last_sterilized?: string; latitude?: number; location?: string; location_timestamp?: string; longitude?: number; maintenance_due_date?: string; manufacturer?: string; metadata?: Json; model?: string; notes?: string; serial_number?: string; status?: string; sterilization_count?: number; tool_name?: string; tool_type?: string; updated_at?: string; }; Update: { barcode?: string; created_at?: string; current_cycle_id?: string; facility_id?: string; gps_accuracy?: number; id?: string; last_sterilized?: string; latitude?: number; location?: string; location_timestamp?: string; longitude?: number; maintenance_due_date?: string; manufacturer?: string; metadata?: Json; model?: string; notes?: string; serial_number?: string; status?: string; sterilization_count?: number; tool_name?: string; tool_type?: string; updated_at?: string; }; Relationships: []; }; supplier_performance: { Row: { category: string; cost_trend: string; created_at: string; delivery_time_days: number; facility_id: string; id: string; last_order_date: string; performance_score: number; quality_rating: number; supplier_name: string; total_orders: number; updated_at: string; }; Insert: { category?: string; cost_trend?: string; created_at?: string; delivery_time_days?: number; facility_id?: string; id: string; last_order_date?: string; performance_score?: number; quality_rating?: number; supplier_name?: string; total_orders?: number; updated_at?: string; }; Update: { category?: string; cost_trend?: string; created_at?: string; delivery_time_days?: number; facility_id?: string; id?: string; last_order_date?: string; performance_score?: number; quality_rating?: number; supplier_name?: string; total_orders?: number; updated_at?: string; }; Relationships: []; }; tool_batches: { Row: { category: string; created_at: string; description: string; facility_id: string; id: string; name: string; status: string; }; Insert: { category?: string; created_at?: string; description?: string; facility_id?: string; id: string; name?: string; status?: string; }; Update: { category?: string; created_at?: string; description?: string; facility_id?: string; id?: string; name?: string; status?: string; }; Relationships: [{ foreignKeyName: "tool_batches_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; tools: { Row: { barcode: string; created_at: string; current_cycle_id: string; current_phase: string; facility_id: string; gps_accuracy: number; id: string; last_sterilized: string; latitude: number; location: string; location_timestamp: string; longitude: number; maintenance_due_date: string; manufacturer: string; metadata: Json; model: string; notes: string; priority: number; serial_number: string; status: "active" | "dirty" | "clean" | "problem" | "new_barcode"; sterilization_count: number; tool_name: string; tool_type: string; updated_at: string; updated_by: string; }; Insert: { barcode?: string; created_at?: string; current_cycle_id: string; current_phase?: string; facility_id: string; gps_accuracy?: number; id: string; last_sterilized?: string; latitude?: number; location?: string; location_timestamp?: string; longitude?: number; maintenance_due_date?: string; manufacturer?: string; metadata?: Json; model?: string; notes?: string; priority?: number; serial_number?: string; status?: "active" | "dirty" | "clean" | "problem" | "new_barcode"; sterilization_count?: number; tool_name?: string; tool_type?: string; updated_at?: string; updated_by?: string; }; Update: { barcode?: string; created_at?: string; current_cycle_id?: string; current_phase?: string; facility_id?: string; gps_accuracy?: number; id?: string; last_sterilized?: string; latitude?: number; location?: string; location_timestamp?: string; longitude?: number; maintenance_due_date?: string; manufacturer?: string; metadata?: Json; model?: string; notes?: string; priority?: number; serial_number?: string; status?: "active" | "dirty" | "clean" | "problem" | "new_barcode"; sterilization_count?: number; tool_name?: string; tool_type?: string; updated_at?: string; updated_by?: string; }; Relationships: []; }; user_certifications: { Row: { certification_name: string; created_at: string; expiry_date: string; id: string; issued_at: string; updated_at: string; user_id: string; }; Insert: { certification_name?: string; created_at?: string; expiry_date?: string; id: string; issued_at?: string; updated_at?: string; user_id?: string; }; Update: { certification_name?: string; created_at?: string; expiry_date?: string; id?: string; issued_at?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; user_facilities: { Row: { created_at: string; facility_id: string; id: string; role: string; updated_at: string; user_id: string; }; Insert: { created_at?: string; facility_id: string; id?: string; role?: string; updated_at?: string; user_id: string; }; Update: { created_at?: string; facility_id?: string; id?: string; role?: string; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "user_facilities_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; user_gamification_stats: { Row: { best_streak: number; completed_tasks: number; created_at: string; current_streak: number; date: string; facility_id: string; id: string; total_points: number; total_tasks: number; updated_at: string; user_id: string; }; Insert: { best_streak?: number; completed_tasks?: number; created_at?: string; current_streak?: number; date?: string; facility_id?: string; id: string; total_points?: number; total_tasks?: number; updated_at?: string; user_id?: string; }; Update: { best_streak?: number; completed_tasks?: number; created_at?: string; current_streak?: number; date?: string; facility_id?: string; id?: string; total_points?: number; total_tasks?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; user_learning_progress: { Row: { created_at: string; id: string; module_name: string; progress: number; score: number; time_spent_minutes: number; updated_at: string; user_id: string; }; Insert: { created_at?: string; id: string; module_name?: string; progress?: number; score?: number; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Update: { created_at?: string; id?: string; module_name?: string; progress?: number; score?: number; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; user_preferences: { Row: { created_at: string; facility_id: string; id: string; is_global: boolean; preference_key: string; preference_type: string; preference_value: Json; updated_at: string; user_id: string; }; Insert: { created_at?: string; facility_id?: string; id: string; is_global?: boolean; preference_key?: string; preference_type?: string; preference_value?: Json; updated_at?: string; user_id?: string; }; Update: { created_at?: string; facility_id?: string; id?: string; is_global?: boolean; preference_key?: string; preference_type?: string; preference_value?: Json; updated_at?: string; user_id?: string; }; Relationships: []; }; user_progress: { Row: { assigned_at: string; attempts_count: number; completed_at: string; content_id: string; content_type: string; created_at: string; due_date: string; id: string; is_repeat: boolean; last_completed_at: string; learning_pathway_id: string; metadata: Json; notes: string; progress_percentage: number; repeat_count: number; score: number; started_at: string; status: string; time_spent_minutes: number; updated_at: string; user_id: string; }; Insert: { assigned_at?: string; attempts_count?: number; completed_at?: string; content_id?: string; content_type?: string; created_at?: string; due_date?: string; id: string; is_repeat?: boolean; last_completed_at?: string; learning_pathway_id?: string; metadata?: Json; notes?: string; progress_percentage?: number; repeat_count?: number; score?: number; started_at?: string; status?: string; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Update: { assigned_at?: string; attempts_count?: number; completed_at?: string; content_id?: string; content_type?: string; created_at?: string; due_date?: string; id?: string; is_repeat?: boolean; last_completed_at?: string; learning_pathway_id?: string; metadata?: Json; notes?: string; progress_percentage?: number; repeat_count?: number; score?: number; started_at?: string; status?: string; time_spent_minutes?: number; updated_at?: string; user_id?: string; }; Relationships: []; }; user_roles: { Row: { created_at: string; facility_id: string; id: string; role: string; updated_at: string; user_id: string; }; Insert: { created_at?: string; facility_id: string; id?: string; role: string; updated_at?: string; user_id: string; }; Update: { created_at?: string; facility_id?: string; id?: string; role?: string; updated_at?: string; user_id?: string; }; Relationships: [{ foreignKeyName: "user_roles_facility_id_fkey"; columns: ["facility_id"]; isOneToOne: false; referencedRelation: "facilities"; referencedColumns: ["id"]; }]; }; user_security_settings: { Row: { created_at: string; id: string; inactive_timeout: number; remember_me_duration: number; require_reauth_for_sensitive: boolean; session_timeout: number; two_factor_enabled: boolean; updated_at: string; user_id: string; }; Insert: { created_at?: string; id: string; inactive_timeout?: number; remember_me_duration?: number; require_reauth_for_sensitive?: boolean; session_timeout?: number; two_factor_enabled?: boolean; updated_at?: string; user_id?: string; }; Update: { created_at?: string; id?: string; inactive_timeout?: number; remember_me_duration?: number; require_reauth_for_sensitive?: boolean; session_timeout?: number; two_factor_enabled?: boolean; updated_at?: string; user_id?: string; }; Relationships: []; }; user_sessions: { Row: { created_at: string; device_info: Json; id: string; ip_address: unknown; is_active: boolean; last_activity: string; login_time: string; logout_time: string; session_token: string; updated_at: string; user_agent: string; user_id: string; }; Insert: { created_at?: string; device_info?: Json; id: string; ip_address?: unknown; is_active?: boolean; last_activity?: string; login_time?: string; logout_time?: string; session_token?: string; updated_at?: string; user_agent?: string; user_id?: string; }; Update: { created_at?: string; device_info?: Json; id?: string; ip_address?: unknown; is_active?: boolean; last_activity?: string; login_time?: string; logout_time?: string; session_token?: string; updated_at?: string; user_agent?: string; user_id?: string; }; Relationships: []; }; user_training_records: { Row: { completion_date: string; completion_status: string; created_at: string; expiry_date: string; facility_id: string; id: string; notes: string; score: number; training_type: string; updated_at: string; user_id: string; }; Insert: { completion_date?: string; completion_status?: string; created_at?: string; expiry_date?: string; facility_id?: string; id: string; notes?: string; score?: number; training_type?: string; updated_at?: string; user_id?: string; }; Update: { completion_date?: string; completion_status?: string; created_at?: string; expiry_date?: string; facility_id?: string; id?: string; notes?: string; score?: number; training_type?: string; updated_at?: string; user_id?: string; }; Relationships: []; }; users: { Row: { active_sessions: number; avatar_url: string; bio: string; created_at: string; date_of_birth: string; department: string; email: string; emergency_contact: Json; facility_id: string; first_name: string; full_name: string; id: string; is_active: boolean; last_login: string; last_name: string; mobile_shortcuts: Json; phone: string; position: string; preferences: Json; preferred_language: string; role: string; timezone: string; total_points: number; updated_at: string; work_schedule: Json; }; Insert: { active_sessions?: number; avatar_url?: string; bio?: string; created_at?: string; date_of_birth?: string; department?: string; email?: string; emergency_contact?: Json; facility_id: string; first_name?: string; full_name?: string; id: string; is_active?: boolean; last_login?: string; last_name?: string; mobile_shortcuts?: Json; phone?: string; position?: string; preferences?: Json; preferred_language?: string; role?: string; timezone?: string; total_points?: number; updated_at?: string; work_schedule?: Json; }; Update: { active_sessions?: number; avatar_url?: string; bio?: string; created_at?: string; date_of_birth?: string; department?: string; email?: string; emergency_contact?: Json; facility_id?: string; first_name?: string; full_name?: string; id?: string; is_active?: boolean; last_login?: string; last_name?: string; mobile_shortcuts?: Json; phone?: string; position?: string; preferences?: Json; preferred_language?: string; role?: string; timezone?: string; total_points?: number; updated_at?: string; work_schedule?: Json; }; Relationships: []; }; webhook_notifications: { Row: { created_at: string; id: string; payload: Json; status: string; url: string; }; Insert: { created_at?: string; id?: string; payload: Json; status?: string; url: string; }; Update: { created_at?: string; id?: string; payload?: Json; status?: string; url?: string; }; Relationships: []; }; }'.
src/services/aiDailyTaskService.ts(47,9): error TS2345: Argument of type 'Record<string, unknown>' is not assignable to parameter of type '{ [key: string]: unknown; id: string; role: string; }[]'.
  Type 'Record<string, unknown>' is missing the following properties from type '{ [key: string]: unknown; id: string; role: string; }[]': length, pop, push, concat, and 35 more.
src/services/aiDailyTaskService.ts(47,9): error TS2352: Conversion of type 'FacilityUser[]' to type 'Record<string, unknown>' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Index signature for type 'string' is missing in type 'FacilityUser[]'.
src/services/analytics/forecasting/autoclaveCapacityForecastService.ts(141,17): error TS2367: This comparison appears to be unintentional because the types '"active" | "dirty" | "clean" | "problem" | "new_barcode"' and '"pending"' have no overlap.
src/services/analytics/forecasting/autoclaveCapacityForecastService.ts(142,15): error TS2367: This comparison appears to be unintentional because the types '"active" | "dirty" | "clean" | "problem" | "new_barcode"' and '"running"' have no overlap.
src/services/analytics/providers.ts(100,36): error TS2345: Argument of type 'unknown[]' is not assignable to parameter of type '{ [key: string]: string | number | boolean; event: string; }'.
  Property 'event' is missing in type 'unknown[]' but required in type '{ [key: string]: string | number | boolean; event: string; }'.
src/services/authMigrationService.ts(105,30): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(106,67): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(120,38): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(256,60): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(267,66): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(327,61): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authMigrationService.ts(412,59): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/authServiceMigration.ts(120,24): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/bi/BIRealtimeService.ts(27,7): error TS7030: Not all code paths return a value.
src/services/bi/BIRealtimeService.ts(58,7): error TS7030: Not all code paths return a value.
src/services/bi/BISubscriptionService.ts(23,7): error TS7030: Not all code paths return a value.
src/services/bi/BISubscriptionService.ts(54,7): error TS7030: Not all code paths return a value.
src/services/bi/failure/analytics/BIFailurePredictiveService.ts(60,9): error TS2345: Argument of type 'Record<string, unknown>' is not assignable to parameter of type 'RiskFactor[]'.
  Type 'Record<string, unknown>' is missing the following properties from type 'RiskFactor[]': length, pop, push, concat, and 35 more.
src/services/bi/failure/index.ts(52,30): error TS2345: Argument of type '{ unsubscribe: () => void; }' is not assignable to parameter of type 'RealtimeChannel'.
  Type '{ unsubscribe: () => void; }' is missing the following properties from type 'RealtimeChannel': topic, params, socket, bindings, and 18 more.
src/services/bi/notification/EmailNotificationService.ts(229,26): error TS2552: Cannot find name 'config'. Did you mean '_config'?
src/services/helpArticlesService.ts(56,7): error TS2322: Type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }[]' is not assignable to type 'HelpArticlePreview[]'.
  Property 'is_published' is missing in type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }' but required in type 'HelpArticlePreview'.
src/services/helpArticlesService.ts(134,7): error TS2322: Type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }[]' is not assignable to type 'HelpArticlePreview[]'.
  Property 'is_published' is missing in type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }' but required in type 'HelpArticlePreview'.
src/services/helpArticlesService.ts(170,7): error TS2322: Type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }[]' is not assignable to type 'HelpArticlePreview[]'.
  Property 'is_published' is missing in type '{ id: any; slug: any; title: any; excerpt: any; category: any; subcategory: any; priority: any; is_featured: any; view_count: any; }' but required in type 'HelpArticlePreview'.
src/services/homeData/HomeDataUserProvider.ts(119,11): error TS2739: Type '{}' is missing the following properties from type 'Error': name, message
src/services/inventory/InventoryFilterService.ts(393,51): error TS2339: Property 'tracked' does not exist on type 'Json'.
  Property 'tracked' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(397,52): error TS2339: Property 'favorite' does not exist on type 'Json'.
  Property 'favorite' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(404,43): error TS2339: Property 'updatedAt' does not exist on type 'Json'.
  Property 'updatedAt' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(405,33): error TS2339: Property 'updatedAt' does not exist on type 'Json'.
  Property 'updatedAt' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(407,44): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(408,33): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(410,46): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(411,33): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(425,46): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(426,35): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(443,48): error TS2339: Property 'p2Status' does not exist on type 'Json'.
  Property 'p2Status' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(445,46): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(447,48): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(449,51): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/InventoryFilterService.ts(451,50): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/InventoryServiceFacade.ts(449,22): error TS2339: Property 'isActive' does not exist on type 'Json'.
  Property 'isActive' does not exist on type 'string'.
src/services/inventory/InventoryServiceFacade.ts(550,19): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/InventoryServiceFacade.ts(550,47): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/InventoryServiceFacade.ts(551,21): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(412,43): error TS2339: Property 'updatedAt' does not exist on type 'Json'.
  Property 'updatedAt' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(413,33): error TS2339: Property 'updatedAt' does not exist on type 'Json'.
  Property 'updatedAt' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(415,44): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(416,33): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(418,46): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(419,33): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(432,51): error TS2339: Property 'tracked' does not exist on type 'Json'.
  Property 'tracked' does not exist on type 'string'.
src/services/inventory/InventorySortService.ts(436,52): error TS2339: Property 'favorite' does not exist on type 'Json'.
  Property 'favorite' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(410,23): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(411,30): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(412,23): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(462,20): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(462,48): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(463,23): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(490,19): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(490,46): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(491,21): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(493,19): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(493,48): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(494,21): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(496,19): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(496,51): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(497,21): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(499,19): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(499,50): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/UnifiedInventoryDataService.ts(500,21): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(311,19): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(311,46): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(312,21): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(314,19): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(314,48): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(315,21): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(317,19): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(317,51): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(318,21): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(320,19): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(320,50): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/adapters/LocalStorageAdapter.ts(321,21): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/adapters/StaticDataAdapter.ts(135,7): error TS2740: Type '{ id: string; facility_id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { lastUpdated: string; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/services/inventory/adapters/StaticDataAdapter.ts(152,7): error TS2740: Type '{ id: string; facility_id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { lastUpdated: string; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/services/inventory/adapters/StaticDataAdapter.ts(169,7): error TS2740: Type '{ id: string; facility_id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; created_at: string; updated_at: string; reorder_point: number; expiration_date: null; data: { lastUpdated: string; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/services/inventory/adapters/TypedSupabaseAdapter.ts(376,9): error TS2769: No overload matches this call.
  The last overload gave the following error.
    Argument of type '"postgres_changes"' is not assignable to parameter of type '"system"'.
src/services/inventory/adapters/TypedSupabaseAdapter.ts(409,13): error TS2739: Type '{ id: string; facility_id: string; name: string; quantity: number; data: Json; created_at: string; updated_at: string; reorder_level: number; reorder_point: number; status: string; expiration_date: string; unit_cost: number; category: string; }' is missing the following properties from type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }': archived, archived_at, archived_by, archive_reason
src/services/inventory/data/inventoryDataProvider.ts(89,30): error TS2554: Expected 1 arguments, but got 2.
src/services/inventory/data/inventoryDataProvider.ts(131,9): error TS2352: Conversion of type 'typeof InventoryActionService' to type '{ processItemCreation: (item: Omit<InventoryItem, "id" | "lastUpdated">) => Promise<InventoryItem>; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'processItemCreation' is missing in type 'typeof InventoryActionService' but required in type '{ processItemCreation: (item: Omit<InventoryItem, "id" | "lastUpdated">) => Promise<InventoryItem>; }'.
src/services/inventory/data/inventoryDataProvider.ts(150,9): error TS2352: Conversion of type 'typeof InventoryActionService' to type '{ processItemUpdate: (id: string, updates: Partial<InventoryItem>) => Promise<InventoryItem>; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'processItemUpdate' is missing in type 'typeof InventoryActionService' but required in type '{ processItemUpdate: (id: string, updates: Partial<InventoryItem>) => Promise<InventoryItem>; }'.
src/services/inventory/data/inventoryDataProvider.ts(167,9): error TS2352: Conversion of type 'typeof InventoryActionService' to type '{ processItemDeletion: (id: string) => Promise<void>; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'processItemDeletion' is missing in type 'typeof InventoryActionService' but required in type '{ processItemDeletion: (id: string) => Promise<void>; }'.
src/services/inventory/data/inventoryDataProvider.ts(182,9): error TS2352: Conversion of type 'Promise<unknown>' to type '{ eq: (column: string, value: string) => Promise<{ data: Record<string, unknown>[]; }>; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'eq' is missing in type 'Promise<unknown>' but required in type '{ eq: (column: string, value: string) => Promise<{ data: Record<string, unknown>[]; }>; }'.
src/services/inventory/data/inventoryDataProvider.ts(183,11): error TS2345: Argument of type '{ from: (table: string) => unknown; }' is not assignable to parameter of type 'SupabaseClient<any, "public", "public", any, any>'.
  Type '{ from: (table: string) => unknown; }' is missing the following properties from type 'SupabaseClient<any, "public", "public", any, any>': supabaseUrl, supabaseKey, auth, realtime, and 20 more.
src/services/inventory/data/inventoryDataProvider.ts(219,9): error TS2352: Conversion of type 'Promise<unknown>' to type '{ eq: (column: string, value: string) => Promise<{ data: Record<string, unknown>[]; }>; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Property 'eq' is missing in type 'Promise<unknown>' but required in type '{ eq: (column: string, value: string) => Promise<{ data: Record<string, unknown>[]; }>; }'.
src/services/inventory/data/inventoryDataProvider.ts(220,11): error TS2345: Argument of type '{ from: (table: string) => unknown; }' is not assignable to parameter of type 'SupabaseClient<any, "public", "public", any, any>'.
  Type '{ from: (table: string) => unknown; }' is missing the following properties from type 'SupabaseClient<any, "public", "public", any, any>': supabaseUrl, supabaseKey, auth, realtime, and 20 more.
src/services/inventory/facade/adapters.ts(63,27): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/services/SimpleInventoryLoadBalancer.ts(62,12): error TS2352: Conversion of type 'Promise<{ data: unknown[]; count: number; error: string; }>' to type 'InventoryResponse' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'Promise<{ data: unknown[]; count: number; error: string; }>' is missing the following properties from type 'InventoryResponse': data, error
src/services/inventory/services/inventoryAnalyticsService.ts(122,23): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/services/inventoryAnalyticsService.ts(123,49): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/services/inventoryAnalyticsService.ts(136,23): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/services/inventoryAnalyticsService.ts(137,51): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/services/inventoryLoadBalancer.ts(79,12): error TS2352: Conversion of type 'Promise<{ data: unknown[]; count: number; error: string; }>' to type 'InventoryResponse' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'Promise<{ data: unknown[]; count: number; error: string; }>' is missing the following properties from type 'InventoryResponse': data, error
src/services/inventory/utils/inventoryCrudOperations.ts(76,31): error TS2352: Conversion of type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }[]' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' is missing the following properties from type 'InventoryItem': location, supplier, cost, vendor, and 24 more.
src/services/inventory/utils/inventoryCrudOperations.ts(110,20): error TS2352: Conversion of type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' to type 'InventoryItem' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' is missing the following properties from type 'InventoryItem': location, supplier, cost, vendor, and 24 more.
src/services/inventory/utils/inventoryCrudOperations.ts(152,14): error TS2352: Conversion of type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' to type 'InventoryItem' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' is missing the following properties from type 'InventoryItem': location, supplier, cost, vendor, and 24 more.
src/services/inventory/utils/inventoryCrudOperations.ts(183,14): error TS2352: Conversion of type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' to type 'InventoryItem' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type '{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }' is missing the following properties from type 'InventoryItem': location, supplier, cost, vendor, and 24 more.
src/services/inventory/utils/inventoryCrudOperations.ts(232,9): error TS2353: Object literal may only specify known properties, and 'archived' does not exist in type 'UpdateInventoryItemData'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(269,23): error TS2339: Property 'description' does not exist on type 'Json'.
  Property 'description' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(270,30): error TS2339: Property 'description' does not exist on type 'Json'.
  Property 'description' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(271,23): error TS2339: Property 'description' does not exist on type 'Json'.
  Property 'description' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(272,23): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(273,30): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(274,23): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(275,23): error TS2339: Property 'serialNumber' does not exist on type 'Json'.
  Property 'serialNumber' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(276,30): error TS2339: Property 'serialNumber' does not exist on type 'Json'.
  Property 'serialNumber' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(277,23): error TS2339: Property 'serialNumber' does not exist on type 'Json'.
  Property 'serialNumber' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(317,20): error TS2339: Property 'isActive' does not exist on type 'Json'.
  Property 'isActive' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(324,20): error TS2339: Property 'tracked' does not exist on type 'Json'.
  Property 'tracked' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(331,20): error TS2339: Property 'favorite' does not exist on type 'Json'.
  Property 'favorite' does not exist on type 'string'.
src/services/inventory/utils/inventoryStandardizedFilters.ts(414,7): error TS2322: Type '"active" | "inactive" | "maintenance" | "retired"' is not assignable to type '"active" | "inactive" | "p2" | "n/a"'.
  Type '"maintenance"' is not assignable to type '"active" | "inactive" | "p2" | "n/a"'.
src/services/inventory/utils/inventoryTransformers.ts(32,5): error TS2740: Type '{ id: string; name: string; category: string; location: string; status: string; updated_at: string; quantity: number; unit_cost: number; reorder_point: number; expiration_date: string; created_at: string; facility_id: string; data: { description: string; barcode: string; warranty: string; serialNumber: string; manufacturer: string; lastServiced: string; unit: string; supplier: string; notes: string; tags: string[]; imageUrl: string; isActive: boolean; tracked: boolean; favorite: boolean; purchaseDate: string; createdAt: string; updatedAt: string; currentPhase: string; sku: string; p2Status: string; toolId: string; supplyId: string; equipmentId: string; hardwareId: string; serviceProvider: string; assignedTo: string; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/services/inventory/utils/inventoryTransformers.ts(338,5): error TS2740: Type '{ id: string; name: string; category: string; location: string; status: string; quantity: number; unit_cost: number; reorder_point: number; expiration_date: string; created_at: string; updated_at: string; facility_id: string; data: { description: any; barcode: any; warranty: any; serialNumber: any; expiration: any; manufacturer: any; lastServiced: any; unit: any; supplier: any; notes: any; tags: any; imageUrl: any; isActive: any; tracked: any; favorite: any; purchaseDate: any; createdAt: string; updatedAt: string; currentPhase: any; sku: any; p2Status: any; toolId: any; supplyId: any; equipmentId: any; hardwareId: any; serviceProvider: any; assignedTo: any; }; }' is missing the following properties from type 'InventoryItem': supplier, cost, vendor, warranty, and 23 more.
src/services/inventory/utils/inventoryTransformers.ts(356,28): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(357,56): error TS2339: Property 'description' does not exist on type 'Json'.
  Property 'description' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(358,53): error TS2339: Property 'description' does not exist on type 'Json'.
  Property 'description' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(364,24): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(365,56): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(366,53): error TS2339: Property 'barcode' does not exist on type 'Json'.
  Property 'barcode' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(372,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(373,56): error TS2339: Property 'warranty' does not exist on type 'Json'.
  Property 'warranty' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(374,53): error TS2339: Property 'warranty' does not exist on type 'Json'.
  Property 'warranty' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(380,29): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(381,56): error TS2339: Property 'serialNumber' does not exist on type 'Json'.
  Property 'serialNumber' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(382,53): error TS2339: Property 'serialNumber' does not exist on type 'Json'.
  Property 'serialNumber' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(388,27): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(389,56): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(390,53): error TS2339: Property 'expiration' does not exist on type 'Json'.
  Property 'expiration' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(396,29): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(397,56): error TS2339: Property 'manufacturer' does not exist on type 'Json'.
  Property 'manufacturer' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(398,53): error TS2339: Property 'manufacturer' does not exist on type 'Json'.
  Property 'manufacturer' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(404,29): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(405,56): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(406,53): error TS2339: Property 'lastServiced' does not exist on type 'Json'.
  Property 'lastServiced' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(412,21): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(413,56): error TS2339: Property 'unit' does not exist on type 'Json'.
  Property 'unit' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(414,53): error TS2339: Property 'unit' does not exist on type 'Json'.
  Property 'unit' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(420,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(421,56): error TS2339: Property 'supplier' does not exist on type 'Json'.
  Property 'supplier' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(422,53): error TS2339: Property 'supplier' does not exist on type 'Json'.
  Property 'supplier' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(428,22): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(429,56): error TS2339: Property 'notes' does not exist on type 'Json'.
  Property 'notes' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(430,53): error TS2339: Property 'notes' does not exist on type 'Json'.
  Property 'notes' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(436,21): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(437,63): error TS2339: Property 'tags' does not exist on type 'Json'.
  Property 'tags' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(438,53): error TS2339: Property 'tags' does not exist on type 'Json'.
  Property 'tags' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(444,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(445,56): error TS2339: Property 'imageUrl' does not exist on type 'Json'.
  Property 'imageUrl' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(446,53): error TS2339: Property 'imageUrl' does not exist on type 'Json'.
  Property 'imageUrl' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(452,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(453,56): error TS2339: Property 'isActive' does not exist on type 'Json'.
  Property 'isActive' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(454,53): error TS2339: Property 'isActive' does not exist on type 'Json'.
  Property 'isActive' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(460,24): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(461,56): error TS2339: Property 'tracked' does not exist on type 'Json'.
  Property 'tracked' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(462,53): error TS2339: Property 'tracked' does not exist on type 'Json'.
  Property 'tracked' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(468,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(469,56): error TS2339: Property 'favorite' does not exist on type 'Json'.
  Property 'favorite' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(470,53): error TS2339: Property 'favorite' does not exist on type 'Json'.
  Property 'favorite' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(476,29): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(477,56): error TS2339: Property 'purchaseDate' does not exist on type 'Json'.
  Property 'purchaseDate' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(478,53): error TS2339: Property 'purchaseDate' does not exist on type 'Json'.
  Property 'purchaseDate' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(486,29): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(487,56): error TS2339: Property 'currentPhase' does not exist on type 'Json'.
  Property 'currentPhase' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(488,53): error TS2339: Property 'currentPhase' does not exist on type 'Json'.
  Property 'currentPhase' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(494,20): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(495,56): error TS2339: Property 'sku' does not exist on type 'Json'.
  Property 'sku' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(496,53): error TS2339: Property 'sku' does not exist on type 'Json'.
  Property 'sku' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(502,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(503,56): error TS2339: Property 'p2Status' does not exist on type 'Json'.
  Property 'p2Status' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(504,53): error TS2339: Property 'p2Status' does not exist on type 'Json'.
  Property 'p2Status' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(510,23): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(511,56): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(512,53): error TS2339: Property 'toolId' does not exist on type 'Json'.
  Property 'toolId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(518,25): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(519,56): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(520,53): error TS2339: Property 'supplyId' does not exist on type 'Json'.
  Property 'supplyId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(526,28): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(527,56): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(528,53): error TS2339: Property 'equipmentId' does not exist on type 'Json'.
  Property 'equipmentId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(534,27): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(535,56): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(536,53): error TS2339: Property 'hardwareId' does not exist on type 'Json'.
  Property 'hardwareId' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(542,32): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(543,56): error TS2339: Property 'serviceProvider' does not exist on type 'Json'.
  Property 'serviceProvider' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(545,53): error TS2339: Property 'serviceProvider' does not exist on type 'Json'.
  Property 'serviceProvider' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(551,27): error TS2322: Type 'Json' is not assignable to type 'object'.
  Type 'string' is not assignable to type 'object'.
src/services/inventory/utils/inventoryTransformers.ts(552,56): error TS2339: Property 'assignedTo' does not exist on type 'Json'.
  Property 'assignedTo' does not exist on type 'string'.
src/services/inventory/utils/inventoryTransformers.ts(553,53): error TS2339: Property 'assignedTo' does not exist on type 'Json'.
  Property 'assignedTo' does not exist on type 'string'.
src/services/inventoryActions/inventoryActionHandlers.ts(233,7): error TS2345: Argument of type 'ImportOptions' is not assignable to parameter of type 'import("/workspace/src/pages/Inventory/services/inventoryImportService").ImportOptions'.
  Types of property 'format' are incompatible.
    Type 'unknown' is not assignable to type 'ImportFormat'.
src/services/inventoryActions/inventoryActionHandlers.ts(560,7): error TS2352: Conversion of type 'string[]' to type 'InventoryItem[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Type 'string' is not comparable to type 'InventoryItem'.
src/services/inventoryActions/inventoryActionUtils.ts(405,33): error TS2769: No overload matches this call.
  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.
      Types of parameters 'current' and 'previousValue' are incompatible.
        Type 'string' is not assignable to type 'Record<string, unknown>'.
  Overload 2 of 3, '(callbackfn: (previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>, initialValue: Record<string, unknown>): Record<...>', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>'.
      Type 'unknown' is not assignable to type 'Record<string, unknown>'.
        Index signature for type 'string' is missing in type '{}'.
src/services/inventoryActions/inventoryActionUtils.ts(420,30): error TS2769: No overload matches this call.
  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.
      Types of parameters 'current' and 'previousValue' are incompatible.
        Type 'string' is not assignable to type 'Record<string, unknown>'.
  Overload 2 of 3, '(callbackfn: (previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>, initialValue: Record<string, unknown>): Record<...>', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>'.
      Type 'unknown' is not assignable to type 'Record<string, unknown>'.
        Index signature for type 'string' is missing in type '{}'.
src/services/inventoryActions/inventoryActionUtils.ts(438,30): error TS2769: No overload matches this call.
  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.
      Types of parameters 'current' and 'previousValue' are incompatible.
        Type 'string' is not assignable to type 'Record<string, unknown>'.
  Overload 2 of 3, '(callbackfn: (previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>, initialValue: Record<string, unknown>): Record<...>', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>'.
      Type 'unknown' is not assignable to type 'Record<string, unknown>'.
        Index signature for type 'string' is missing in type '{}'.
src/services/inventoryActions/inventoryActionUtils.ts(442,12): error TS18047: 'target' is possibly 'null'.
src/services/learningAI/learningAIUtils.ts(109,33): error TS2769: No overload matches this call.
  Overload 1 of 3, '(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string'.
      Types of parameters 'current' and 'previousValue' are incompatible.
        Type 'string' is not assignable to type 'Record<string, unknown>'.
  Overload 2 of 3, '(callbackfn: (previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>, initialValue: Record<string, unknown>): Record<...>', gave the following error.
    Argument of type '(current: Record<string, unknown>, key: string) => unknown' is not assignable to parameter of type '(previousValue: Record<string, unknown>, currentValue: string, currentIndex: number, array: string[]) => Record<string, unknown>'.
      Type 'unknown' is not assignable to type 'Record<string, unknown>'.
        Index signature for type 'string' is missing in type '{}'.
src/services/performanceMetricsCache.ts(187,56): error TS7030: Not all code paths return a value.
src/services/rateLimiting/DistributedRateLimiter.ts(86,14): error TS2339: Property 'zRemRangeByScore' does not exist on type 'unknown'.
src/services/rateLimiting/DistributedRateLimiter.ts(89,14): error TS2339: Property 'zCard' does not exist on type 'unknown'.
src/services/rateLimiting/DistributedRateLimiter.ts(92,14): error TS2339: Property 'zAdd' does not exist on type 'unknown'.
src/services/rateLimiting/DistributedRateLimiter.ts(95,14): error TS2339: Property 'expire' does not exist on type 'unknown'.
src/services/rateLimiting/DistributedRateLimiter.ts(99,14): error TS2339: Property 'get' does not exist on type 'unknown'.
src/services/rateLimiting/DistributedRateLimiter.ts(101,36): error TS2339: Property 'exec' does not exist on type 'unknown'.
src/services/realtimeManager.ts(30,30): error TS2345: Argument of type '{ unsubscribe: () => void; }' is not assignable to parameter of type 'RealtimeChannel'.
  Type '{ unsubscribe: () => void; }' is missing the following properties from type 'RealtimeChannel': topic, params, socket, bindings, and 18 more.
src/services/realtimeManager.ts(38,32): error TS2345: Argument of type '{ unsubscribe: () => void; }' is not assignable to parameter of type 'RealtimeChannel'.
  Type '{ unsubscribe: () => void; }' is missing the following properties from type 'RealtimeChannel': topic, params, socket, bindings, and 18 more.
src/services/secureApiClient.ts(228,24): error TS2339: Property 'message' does not exist on type 'unknown'.
src/services/secureApiClient.ts(398,17): error TS2339: Property 'name' does not exist on type 'unknown'.
src/services/secureAuthService.ts(224,17): error TS2339: Property 'name' does not exist on type 'unknown'.
src/services/security/SecurityMonitoringService.ts(197,12): error TS2352: Conversion of type 'SecurityDashboard' to type '{ overview: SecurityMetrics; trends: Record<string, unknown>; alerts: unknown[]; recommendations: unknown[]; }' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
  Types of property 'trends' are incompatible.
    Type 'SecurityTrends' is not comparable to type 'Record<string, unknown>'.
      Index signature for type 'string' is missing in type 'SecurityTrends'.
src/services/supabase/inventoryService.ts(102,63): error TS2345: Argument of type 'Omit<{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }, "id" | "lastUpdated">' is not assignable to parameter of type 'Omit<InventoryItem, "id" | "lastUpdated">'.
  Type 'Omit<{ id: string; reorder_point: number; facility_id: string; quantity: number; data: Json; created_at: string; updated_at: string; expiration_date: string; unit_cost: number; name: string; category: string; reorder_level: number; status: string; archived: boolean; archived_at: string; archived_by: string; archive_reason: string; }, "id" | "lastUpdated">' is missing the following properties from type 'Omit<InventoryItem, "id" | "lastUpdated">': location, tool_id, supplier, cost, and 24 more.
src/services/supabase/inventoryService.ts(262,59): error TS2345: Argument of type '(payload: Record<string, unknown>) => void' is not assignable to parameter of type '(payload: unknown) => void'.
  Types of parameters 'payload' and 'payload' are incompatible.
    Type 'unknown' is not assignable to type 'Record<string, unknown>'.
      Index signature for type 'string' is missing in type '{}'.
src/services/tableService.ts(92,19): error TS2339: Property 'eq' does not exist on type 'unknown'.
src/services/tableService.ts(98,21): error TS2339: Property 'eq' does not exist on type 'unknown'.
src/services/tableService.ts(102,15): error TS2339: Property 'data' does not exist on type '{}'.
src/services/tableService.ts(102,21): error TS2339: Property 'error' does not exist on type '{}'.
src/services/workflowRealtimeService.ts(68,7): error TS7030: Not all code paths return a value.
src/services/workflowRealtimeService.ts(98,7): error TS7030: Not all code paths return a value.
src/store/inventoryStore.ts(39,69): error TS2322: Type '{ analyticsData: { totalItems: number; lowStockItems: number; outOfStockItems: number; expiredItems: number; categories: Record<string, number>; recentActivity: Array<{ id: string; action: string; timestamp: string; itemName: string; }>; }; isLoadingAnalytics: boolean; setAnalyticsData: (data: InventoryAnalyticsState["analyticsData"]) => void; setLoadingAnalytics: (loading: boolean) => void; updateAnalytics: () => void; resetAnalytics: () => void; currentPage: number; itemsPerPage: number; totalItems: number; setCurrentPage: (page: number) => void; setItemsPerPage: (items: number) => void; setTotalItems: (total: number) => void; nextPage: () => void; previousPage: () => void; goToPage: (page: number) => void; resetPagination: () => void; totalPages: number; startIndex: number; endIndex: number; pagination: { currentPage: number; pageSize: number; }; formData: InventoryFormData; isEditMode: boolean; isDirty: boolean; isCloned: boolean; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; resetForm: () => void; setEditMode: (isEdit: boolean) => void; setIsCloned: (isCloned: boolean) => void; markAsDirty: () => void; markAsClean: () => void; openEditModal: (item: InventoryItem) => void; closeEditModal: () => void; searchQuery: string; searchTerm: string; categoryFilter: string; locationFilter: string; statusFilter: string; activeFilter: string; favorites: string[]; showFavoritesOnly: boolean; sortField: string; sortDirection: "asc" | "desc"; setSearchQuery: (query: string) => void; setSearchTerm: (term: string) => void; setCategoryFilter: (filter: string) => void; setLocationFilter: (filter: string) => void; setStatusFilter: (filter: string) => void; setActiveFilter: (filter: string) => void; setFavorites: (favorites: string[]) => void; toggleFavorite: (itemId: string) => void; setShowFavoritesOnly: (show: boolean) => void; setSortField: (field: string) => void; setSortDirection: (direction: "asc" | "desc") => void; clearFilters: () => void; resetFilters: () => void; clearSearch: () => void; showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; showDeleteModal: boolean; itemToDelete: InventoryItem | null; scanMode: "add" | "use" | null; scannedItems: string[]; setShowAddModal: (show: boolean) => void; setShowTrackModal: (show: boolean) => void; setShowUploadBarcodeModal: (show: boolean) => void; setShowScanModal: (show: boolean) => void; setShowDeleteModal: (show: boolean) => void; setItemToDelete: (item: InventoryItem | null) => void; openDeleteModal: (item: InventoryItem) => void; closeDeleteModal: () => void; setScanMode: (mode: "add" | "use" | null) => void; addScannedItem: (id: string) => void; removeScannedItem: (id: string) => void; resetScannedItems: () => void; openAddModal: () => void; closeAddModal: () => void; openTrackModal: () => void; closeTrackModal: () => void; openUploadBarcodeModal: () => void; closeUploadBarcodeModal: () => void; toggleUploadBarcodeModal: () => void; openScanModal: () => void; closeScanModal: () => void; activeTab: TabType; showFilters: boolean; showTrackedOnly: boolean; expandedSections: ExpandedSections; showFiltersPanel: boolean; showAnalytics: boolean; showBulkActions: boolean; mergeMode: boolean; selectedItems: Set<string>; trackedItems: Set<string>; trackingData: Map<string, { doctor: string; timestamp: string; }>; setActiveTab: (tab: TabType) => void; setShowFilters: (show: boolean) => void; setShowTrackedOnly: (show: boolean) => void; setExpandedSections: (sections: ExpandedSections) => void; toggleExpandedSection: (section: keyof ExpandedSections) => void; setShowFiltersPanel: (show: boolean) => void; setShowAnalytics: (show: boolean) => void; setShowBulkActions: (show: boolean) => void; toggleTrackedItem: (itemId: string, doctor: string) => void; setTrackedItems: (items: Set<string>) => void; setTrackingData: (data: Map<string, { doctor: string; timestamp: string; }>) => void; setMergeMode: (enabled: boolean) => void; toggleItemSelection: (itemId: string) => void; clearSelectedItems: () => void; selectAllItems: (itemIds: string[]) => void; items: InventoryItem[]; categories: string[]; isLoading: boolean; isCategoriesLoading: boolean; setItems: (items: InventoryItem[]) => void; setCategories: (categories: string[]) => void; addItem: (item: InventoryItem) => void; updateItem: (id: string, updates: Partial<InventoryItem>) => void; deleteItem: (id: string) => void; addCategory: (category: string) => void; removeCategory: (category: string) => void; setSelectedItems: (items: string[]) => void; setLoading: (loading: boolean) => void; setCategoriesLoading: (loading: boolean) => void; setInventoryLoading: (loading: boolean) => void; refreshInventoryData: () => Promise<void>; getFilteredItems: () => InventoryItem[]; getUniqueCategories: () => string[]; inventoryItems: InventoryItem[]; }' is not assignable to type 'InventoryStore'.
  Type '{ analyticsData: { totalItems: number; lowStockItems: number; outOfStockItems: number; expiredItems: number; categories: Record<string, number>; recentActivity: Array<{ id: string; action: string; timestamp: string; itemName: string; }>; }; isLoadingAnalytics: boolean; setAnalyticsData: (data: InventoryAnalyticsState["analyticsData"]) => void; setLoadingAnalytics: (loading: boolean) => void; updateAnalytics: () => void; resetAnalytics: () => void; currentPage: number; itemsPerPage: number; totalItems: number; setCurrentPage: (page: number) => void; setItemsPerPage: (items: number) => void; setTotalItems: (total: number) => void; nextPage: () => void; previousPage: () => void; goToPage: (page: number) => void; resetPagination: () => void; totalPages: number; startIndex: number; endIndex: number; pagination: { currentPage: number; pageSize: number; }; formData: InventoryFormData; isEditMode: boolean; isDirty: boolean; isCloned: boolean; setFormData: (data: InventoryFormData) => void; mergeFormData: (data: Partial<InventoryFormData>) => void; updateField: <K extends keyof InventoryFormData>(field: K, value: InventoryFormData[K]) => void; resetForm: () => void; setEditMode: (isEdit: boolean) => void; setIsCloned: (isCloned: boolean) => void; markAsDirty: () => void; markAsClean: () => void; openEditModal: (item: InventoryItem) => void; closeEditModal: () => void; searchQuery: string; searchTerm: string; categoryFilter: string; locationFilter: string; statusFilter: string; activeFilter: string; favorites: string[]; showFavoritesOnly: boolean; sortField: string; sortDirection: "asc" | "desc"; setSearchQuery: (query: string) => void; setSearchTerm: (term: string) => void; setCategoryFilter: (filter: string) => void; setLocationFilter: (filter: string) => void; setStatusFilter: (filter: string) => void; setActiveFilter: (filter: string) => void; setFavorites: (favorites: string[]) => void; toggleFavorite: (itemId: string) => void; setShowFavoritesOnly: (show: boolean) => void; setSortField: (field: string) => void; setSortDirection: (direction: "asc" | "desc") => void; clearFilters: () => void; resetFilters: () => void; clearSearch: () => void; showAddModal: boolean; showTrackModal: boolean; showUploadBarcodeModal: boolean; showScanModal: boolean; showDeleteModal: boolean; itemToDelete: InventoryItem | null; scanMode: "add" | "use" | null; scannedItems: string[]; setShowAddModal: (show: boolean) => void; setShowTrackModal: (show: boolean) => void; setShowUploadBarcodeModal: (show: boolean) => void; setShowScanModal: (show: boolean) => void; setShowDeleteModal: (show: boolean) => void; setItemToDelete: (item: InventoryItem | null) => void; openDeleteModal: (item: InventoryItem) => void; closeDeleteModal: () => void; setScanMode: (mode: "add" | "use" | null) => void; addScannedItem: (id: string) => void; removeScannedItem: (id: string) => void; resetScannedItems: () => void; openAddModal: () => void; closeAddModal: () => void; openTrackModal: () => void; closeTrackModal: () => void; openUploadBarcodeModal: () => void; closeUploadBarcodeModal: () => void; toggleUploadBarcodeModal: () => void; openScanModal: () => void; closeScanModal: () => void; activeTab: TabType; showFilters: boolean; showTrackedOnly: boolean; expandedSections: ExpandedSections; showFiltersPanel: boolean; showAnalytics: boolean; showBulkActions: boolean; mergeMode: boolean; selectedItems: Set<string>; trackedItems: Set<string>; trackingData: Map<string, { doctor: string; timestamp: string; }>; setActiveTab: (tab: TabType) => void; setShowFilters: (show: boolean) => void; setShowTrackedOnly: (show: boolean) => void; setExpandedSections: (sections: ExpandedSections) => void; toggleExpandedSection: (section: keyof ExpandedSections) => void; setShowFiltersPanel: (show: boolean) => void; setShowAnalytics: (show: boolean) => void; setShowBulkActions: (show: boolean) => void; toggleTrackedItem: (itemId: string, doctor: string) => void; setTrackedItems: (items: Set<string>) => void; setTrackingData: (data: Map<string, { doctor: string; timestamp: string; }>) => void; setMergeMode: (enabled: boolean) => void; toggleItemSelection: (itemId: string) => void; clearSelectedItems: () => void; selectAllItems: (itemIds: string[]) => void; items: InventoryItem[]; categories: string[]; isLoading: boolean; isCategoriesLoading: boolean; setItems: (items: InventoryItem[]) => void; setCategories: (categories: string[]) => void; addItem: (item: InventoryItem) => void; updateItem: (id: string, updates: Partial<InventoryItem>) => void; deleteItem: (id: string) => void; addCategory: (category: string) => void; removeCategory: (category: string) => void; setSelectedItems: (items: string[]) => void; setLoading: (loading: boolean) => void; setCategoriesLoading: (loading: boolean) => void; setInventoryLoading: (loading: boolean) => void; refreshInventoryData: () => Promise<void>; getFilteredItems: () => InventoryItem[]; getUniqueCategories: () => string[]; inventoryItems: InventoryItem[]; }' is not assignable to type 'InventoryDataState'.
    Types of property 'selectedItems' are incompatible.
      Type 'Set<string>' is missing the following properties from type 'string[]': length, pop, push, concat, and 30 more.
src/store/slices/actions/cycleActions.ts(74,26): error TS2349: This expression is not callable.
  Type '{}' has no call signatures.
src/store/slices/actions/cycleActions.ts(96,26): error TS2349: This expression is not callable.
  Type '{}' has no call signatures.
src/store/sterilizationStore.ts(39,3): error TS2305: Module '"./slices/biWorkflowSlice"' has no exported member 'BIWorkflowState'.
src/tests/services/ServiceConsolidationTest.ts(124,31): error TS2304: Cannot find name 'biFailureService'.
src/tests/services/ServiceConsolidationTest.ts(137,31): error TS2304: Cannot find name 'biFailureService'.
src/tests/services/ServiceConsolidationTest.ts(147,28): error TS2304: Cannot find name 'biFailureService'.
src/tests/services/ServiceConsolidationTest.ts(293,14): error TS2304: Cannot find name 'biFailureService'.
src/tests/services/ServiceConsolidationTest.ts(304,9): error TS2304: Cannot find name 'biFailureService'.
src/types/inventoryTypes.ts(8,18): error TS2430: Interface 'import("/workspace/src/types/inventoryTypes").InventoryItem' incorrectly extends interface 'import("/workspace/src/types/consolidated").InventoryItem'.
  Property 'description' is optional in type 'InventoryItem' but required in type 'InventoryItem'.
